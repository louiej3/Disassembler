00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/25/2014 9:46:49 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L #$Imm,A7
00000000                            39  
00000000  =0000E1D7                 40  Shift_Test1         EQU     %1110000111010111   ; Asl (A7)
00000000  =0000E1F8                 41  Shift_Test2         EQU     %1110000111111000   ; Asl $Word
00000000  =0000EF21                 42  Shift_Test3         EQU     %1110111100100001   ; Asl.B D7,D1
00000000  =0000E507                 43  Shift_Test4         EQU     %1110010100000111   ; Asl.B #2,D7
00000000  =0000E104                 44  Shift_Test5         EQU     %1110000100000100   ; Asl.B #8,D4
00000000                            45          
00001000                            46      ORG    $1000
00001000                            47      
00001000                            48  START:                  ; first instruction of program
00001000  267C 00000400             49          Move.L  #$0000400, A3
00001006                            50  
00001006  36BC 4030                 51          Move.W  #$4030, (A3)
0000100A                            52          ;Move.L  #$12345678, (A3)
0000100A                            53          ;Move.L  #$12349999, (A3)
0000100A                            54          ;Move.W  #$11, (A3)
0000100A                            55          
0000100A                            56          ;Move.W  #Test_Move1, D4
0000100A                            57          ;Move.W  #Test_Move2, D4
0000100A                            58          ;Move.W  #Test_Move3, D4
0000100A                            59          ;Move.W  #Test_Move4, D4
0000100A                            60          ;Move.W  #Test_Move5, D4
0000100A                            61          ;Move.W  #Test_Move6, D4        
0000100A                            62          ;Move.W  #Test_Move7, D4        
0000100A                            63          ;Move.W  #Test_Move8, D4
0000100A                            64          
0000100A                            65          ;Move.W  #Add_Test1, D4
0000100A                            66          ;Move.W  #Add_Test2, D4
0000100A                            67          ;Move.W  #Add_Test3, D4
0000100A                            68          ;Move.W  #Add_Test4, D4
0000100A                            69          
0000100A                            70          ;Move.W  #Shift_Test1, D4
0000100A                            71          ;Move.W  #Shift_Test2, D4
0000100A                            72          ;Move.W  #Shift_Test3, D4
0000100A                            73          ;Move.W  #Shift_Test4, D4
0000100A  383C E104                 74          Move.W  #Shift_Test5, D4
0000100E                            75                  
0000100E                            76          ;Jmp     EA_MOVE     ; Branch to EA function for Move
0000100E                            77          ;Jmp     EA_ADD
0000100E  4EF9 00001212             78          Jmp     EA_BIT_SHIFT
00001014                            79  
00001014                            80  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
00001014                            81  ;-------------------- Effective Address Sub Routines --------------------;
00001014                            82  ; These subroutines look for the correct effective address
00001014                            83  ; in each OP code.
00001014                            84  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
00001014                            85  
00001014                            86  ;=============================================;
00001014                            87  ;--------------- EA Move/MoveA ---------------;
00001014                            88  ;=============================================;
00001014                            89  EA_MOVE
00001014  4EB9 00001024             90          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
0000101A  1CFC 002C                 91          Move.B  #',', (A6)+             ; Add a comma
0000101E  4EB9 00001074             92          Jsr     EA_MOVE_DEST            ; Add the EA for destination
00001024                            93                  
00001024                            94  EA_MOVE_SOURCE  ; Find out Move's source
00001024  4EB9 00001508             95          Jsr     GET3TO5                 ; Get source mode
0000102A  1A00                      96          Move.B  D0, D5                  ; Move source mode to D5
0000102C  4EB9 0000151A             97          Jsr     Get0TO2                 ; Get source register
00001032                            98          
00001032                            99          ; List of valid effective addresses
00001032  BA3C 0000                100          Cmp.B   #Dn_Mode, D5            ; Dn
00001036  6700 0284                101          Beq     EA_DN
0000103A                           102          
0000103A  BA3C 0001                103          Cmp.B   #An_Mode, D5            ; An
0000103E  6700 0288                104          Beq     EA_AN
00001042                           105          
00001042  BA3C 0002                106          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001046  6700 028C                107          Beq     EA_AN_PNTR
0000104A                           108          
0000104A  BA3C 0003                109          Cmp.B   #An_Inc_Mode, D5        ; (An)+
0000104E  6700 0298                110          Beq     EA_AN_INC
00001052                           111          
00001052  BA3C 0004                112          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001056  6700 02A8                113          Beq     EA_AN_DEC
0000105A                           114          
0000105A                           115          ; Comparing registers at this point because modes are the same
0000105A  B03C 0000                116          Cmp.B   #Word_Reg, D0           ; (xxx).W
0000105E  6700 02B8                117          Beq     EA_WORD_ADDR
00001062                           118          
00001062  B03C 0001                119          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001066  6700 034C                120          Beq     EA_LONG_ADDR
0000106A                           121          
0000106A  B03C 0004                122          Cmp.B   #Imm_Reg, D0            ; #<data>
0000106E  6700 004C                123          Beq     EA_MOVE_SIZE
00001072                           124          
00001072  4E75                     125          Rts
00001074                           126          
00001074                           127  EA_MOVE_DEST    ; Find out Move's destination
00001074  4EB9 000014F6            128          Jsr     GET6TO8                 ; Get destination mode
0000107A  1A00                     129          Move.B  D0, D5                  ; Move destination mode to D5
0000107C  4EB9 000014E4            130          Jsr     GET9TO11                ; Get destination register
00001082                           131          
00001082                           132          ; List of valid effective addresses
00001082  BA3C 0000                133          Cmp.B   #Dn_Mode, D5            ; Dn
00001086  6700 0234                134          Beq     EA_DN
0000108A                           135          
0000108A  BA3C 0001                136          Cmp.B   #An_Mode, D5            ; An
0000108E  6700 0238                137          Beq     EA_AN
00001092                           138          
00001092  BA3C 0002                139          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001096  6700 023C                140          Beq     EA_AN_PNTR
0000109A                           141          
0000109A  BA3C 0003                142          Cmp.B   #An_Inc_Mode, D5        ; (An)+
0000109E  6700 0248                143          Beq     EA_AN_INC
000010A2                           144          
000010A2  BA3C 0004                145          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000010A6  6700 0258                146          Beq     EA_AN_DEC
000010AA                           147          
000010AA                           148          ; Comparing registers at this point because modes are the same
000010AA  B03C 0000                149          Cmp.B   #Word_Reg, D0           ; (xxx).W
000010AE  6700 0268                150          Beq     EA_WORD_ADDR
000010B2                           151          
000010B2  B03C 0001                152          Cmp.B   #Long_Reg, D0           ; (xxx).L
000010B6  6700 02FC                153          Beq     EA_LONG_ADDR
000010BA                           154          
000010BA  4E75                     155          Rts
000010BC                           156          
000010BC                           157  EA_MOVE_SIZE    ; Find the size of immediate data being moved
000010BC  4EB9 000014D2            158          Jsr     GET12TO13               ; Get Move size
000010C2                           159  
000010C2  B03C 0001                160          Cmp.B   #%01, D0                ; Byte
000010C6  6700 03CE                161          Beq     EA_IMM_BYTE
000010CA                           162  
000010CA  B03C 0003                163          Cmp.B   #%11, D0                ; Word
000010CE  6700 03D6                164          Beq     EA_IMM_WORD
000010D2                           165          
000010D2  B03C 0002                166          Cmp.B   #%10, D0                ; Long
000010D6  6700 03DE                167          Beq     EA_IMM_LONG
000010DA                           168          
000010DA  4E75                     169          Rts
000010DC                           170  
000010DC                           171  ;===========================================;        
000010DC                           172  ;--------------- EA Add/AddA ---------------;
000010DC                           173  ;===========================================;       
000010DC                           174  EA_ADD  ; Figures out the EA for Add        
000010DC  4EB9 000014F6            175          Jsr     GET6TO8                 ; Isolate the Op mode
000010E2                           176          
000010E2  B03C 0003                177          Cmp.B   #%011, D0               ; Compare to AddA word
000010E6  6700 0028                178          Beq     EA_ADDA
000010EA                           179          
000010EA  B03C 0007                180          Cmp.B   #%111, D0               ; Compare to AddA long
000010EE  6700 0020                181          Beq     EA_ADDA
000010F2                           182  
000010F2  B03C 0000                183          Cmp.B   #%000, D0               ; Compare to Add source byte
000010F6  6700 002E                184          Beq     EA_ADD_OPMODE_SOURCE
000010FA                           185          
000010FA  B03C 0001                186          Cmp.B   #%001, D0               ; Compare to Add source word
000010FE  6700 0026                187          Beq     EA_ADD_OPMODE_SOURCE
00001102                           188          
00001102  B03C 0002                189          Cmp.B   #%010, D0               ; Compare to Add source Long
00001106  6700 001E                190          Beq     EA_ADD_OPMODE_SOURCE
0000110A                           191          
0000110A  4EF9 0000113C            192          Jmp     EA_ADD_OPMODE_DEST      ; Must be an Add destination if none of the above
00001110                           193          
00001110                           194  EA_ADDA ; Figures out the EA for AddA
00001110  4EB9 00001152            195          Jsr     EA_ADD_SOURCE           ; Get the source EA
00001116  1CFC 002C                196          Move.B  #',', (A6)+             ; Add a comma
0000111A  4EB9 000014E4            197          Jsr     GET9TO11                ; Get the register
00001120  4EB9 000012C8            198          Jsr     EA_AN                   ; Add An
00001126                           199          
00001126                           200  EA_ADD_OPMODE_SOURCE    ; Finds the EA for Add if it is for the source
00001126  4EB9 00001152            201          Jsr     EA_ADD_SOURCE           ; Get the source EA
0000112C  1CFC 002C                202          Move.B  #',', (A6)+             ; Add a comma
00001130  4EB9 000014E4            203          Jsr     GET9TO11                ; Get the register
00001136  4EB9 000012BC            204          Jsr     EA_DN                   ; Add Dn
0000113C                           205          
0000113C                           206  EA_ADD_OPMODE_DEST      ; Finds the EA for Add if it is for the destination
0000113C  4EB9 000014E4            207          Jsr     GET9TO11                ; Get the register
00001142  4EB9 000012BC            208          Jsr     EA_DN                   ; Add Dn
00001148  1CFC 002C                209          Move.B  #',', (A6)+             ; Add a comma
0000114C  4EB9 000011A2            210          Jsr     EA_ADD_DEST             ; Get the destination EA 
00001152                           211  
00001152                           212  EA_ADD_SOURCE   ; Find out Add source
00001152  4EB9 00001508            213          Jsr     GET3TO5                 ; Get source mode
00001158  1A00                     214          Move.B  D0, D5                  ; Move source mode to D5
0000115A  4EB9 0000151A            215          Jsr     Get0TO2                 ; Get source register
00001160                           216          
00001160                           217          ; List of valid effective addresses
00001160  BA3C 0000                218          Cmp.B   #Dn_Mode, D5            ; Dn
00001164  6700 0156                219          Beq     EA_DN
00001168                           220          
00001168  BA3C 0001                221          Cmp.B   #An_Mode, D5            ; An
0000116C  6700 015A                222          Beq     EA_AN
00001170                           223          
00001170  BA3C 0002                224          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001174  6700 015E                225          Beq     EA_AN_PNTR
00001178                           226          
00001178  BA3C 0003                227          Cmp.B   #An_Inc_Mode, D5        ; (An)+
0000117C  6700 016A                228          Beq     EA_AN_INC
00001180                           229          
00001180  BA3C 0004                230          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001184  6700 017A                231          Beq     EA_AN_DEC
00001188                           232          
00001188                           233          ; Comparing registers at this point because modes are the same
00001188  B03C 0000                234          Cmp.B   #Word_Reg, D0           ; (xxx).W
0000118C  6700 018A                235          Beq     EA_WORD_ADDR
00001190                           236          
00001190  B03C 0001                237          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001194  6700 021E                238          Beq     EA_LONG_ADDR
00001198                           239          
00001198  B03C 0004                240          Cmp.B   #Imm_Reg, D0            ; #<data>
0000119C  6700 003C                241          Beq     EA_ADD_SIZE
000011A0                           242          
000011A0  4E75                     243          Rts
000011A2                           244          
000011A2                           245  EA_ADD_DEST ; Find out Add destination
000011A2  4EB9 00001508            246          Jsr     GET3TO5                 ; Get destination mode
000011A8  1A00                     247          Move.B  D0, D5                  ; Move destination mode to D5
000011AA  4EB9 0000151A            248          Jsr     Get0TO2                 ; Get destination register
000011B0                           249          
000011B0                           250          ; List of valid effective addresses
000011B0  BA3C 0002                251          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000011B4  6700 011E                252          Beq     EA_AN_PNTR
000011B8                           253          
000011B8  BA3C 0003                254          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000011BC  6700 012A                255          Beq     EA_AN_INC
000011C0                           256          
000011C0  BA3C 0004                257          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000011C4  6700 013A                258          Beq     EA_AN_DEC
000011C8                           259          
000011C8                           260          ; Comparing registers at this point because modes are the same
000011C8  B03C 0000                261          Cmp.B   #Word_Reg, D0           ; (xxx).W
000011CC  6700 014A                262          Beq     EA_WORD_ADDR
000011D0                           263          
000011D0  B03C 0001                264          Cmp.B   #Long_Reg, D0           ; (xxx).L
000011D4  6700 01DE                265          Beq     EA_LONG_ADDR
000011D8                           266                  
000011D8  4E75                     267          Rts
000011DA                           268          
000011DA                           269  EA_ADD_SIZE ; Find the size of immediate data being moved
000011DA  4EB9 000014F6            270          Jsr     GET6TO8                 ; Get Move size
000011E0                           271  
000011E0  B03C 0000                272          Cmp.B   #%000, D0               ; Byte
000011E4  6700 02B0                273          Beq     EA_IMM_BYTE
000011E8                           274  
000011E8  B03C 0001                275          Cmp.B   #%001, D0               ; Word
000011EC  6700 02B8                276          Beq     EA_IMM_WORD
000011F0                           277          
000011F0  B03C 0002                278          Cmp.B   #%010, D0               ; Long
000011F4  6700 02C0                279          Beq     EA_IMM_LONG
000011F8                           280          
000011F8  B03C 0003                281          Cmp.B   #%011, D0               ; AddA Word
000011FC  6700 02A8                282          Beq     EA_IMM_WORD
00001200                           283     
00001200  B03C 0007                284          Cmp.B   #%111, D0               ; AddA Long
00001204  6700 02B0                285          Beq     EA_IMM_LONG
00001208                           286          
00001208  4E75                     287          Rts
0000120A                           288          
0000120A                           289  ;=========================================================;        
0000120A                           290  ;---------------------- EA Sub/SubA ----------------------;
0000120A                           291  ; Jumps straight to EA_ADD because the EA for Add/AddA and
0000120A                           292  ; Sub/SubA are exactly the same.
0000120A                           293  ;=========================================================;
0000120A                           294  EA_SUB
0000120A  4EF8 10DC                295          Jmp     EA_ADD
0000120E                           296  
0000120E                           297  ;=========================================================;        
0000120E                           298  ;---------------------- EA Cmp/CmpA ----------------------;
0000120E                           299  ; Jumps straight to EA_ADD because the EA for Add/AddA and
0000120E                           300  ; Cmp/CmpA are exactly the same.
0000120E                           301  ;=========================================================;
0000120E                           302  EA_CMP       
0000120E  4EF8 10DC                303          Jmp     EA_ADD
00001212                           304  
00001212                           305  ;=========================================================;
00001212                           306  ;--------------------- EA Bit Shift ----------------------;
00001212                           307  ; Finds the EA for ASd, LSd, ROd. All of these OP codes
00001212                           308  ; are combined because the EA for each code is exactly the
00001212                           309  ; same.
00001212                           310  ;=========================================================;
00001212                           311  EA_BIT_SHIFT    ; Figures out the EA for bit shift functions
00001212  4EB9 0000153E            312          Jsr     GET6TO7
00001218                           313          
00001218  B03C 0003                314          Cmp.B   #%11, D0                ; If bits 6 and 7 are not %11, then we are shifting a register
0000121C  6600 0040                315          Bne     EA_SHIFT_REGISTER
00001220                           316          
00001220  4EB9 00001226            317          Jsr     EA_SHIFT_MEMORY         ; If bits 6 and 7 are %11, then we are shifting memory
00001226                           318          
00001226                           319          ; <Next instruction>
00001226                           320                  
00001226                           321  EA_SHIFT_MEMORY ; Adds the correct EA for a memory shift
00001226  4EB9 00001508            322          Jsr     GET3TO5                 ; Get source mode
0000122C  1A00                     323          Move.B  D0, D5                  ; Move source mode to D5
0000122E  4EB9 0000151A            324          Jsr     Get0TO2                 ; Get source register
00001234                           325          
00001234                           326          ; List of valid effective addresses        
00001234  BA3C 0002                327          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001238  6700 009A                328          Beq     EA_AN_PNTR
0000123C                           329          
0000123C  BA3C 0003                330          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001240  6700 00A6                331          Beq     EA_AN_INC
00001244                           332          
00001244  BA3C 0004                333          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001248  6700 00B6                334          Beq     EA_AN_DEC
0000124C                           335          
0000124C                           336          ; Comparing registers at this point because modes are the same
0000124C  B03C 0000                337          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001250  6700 00C6                338          Beq     EA_WORD_ADDR
00001254                           339          
00001254  B03C 0001                340          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001258  6700 015A                341          Beq     EA_LONG_ADDR
0000125C                           342          
0000125C  4E75                     343          Rts
0000125E                           344          
0000125E                           345  EA_SHIFT_REGISTER   ; Figure out if we are shifting by #<data> or by the value in a data register
0000125E  4EB9 00001550            346          Jsr     GETBIT5
00001264                           347          
00001264  B03C 0000                348          Cmp.B   #0, D0                  ; Check if bit 5 is %0
00001268  6700 0008                349          Beq     EA_SHIFT_CHECK_8
0000126C                           350          
0000126C  4EF9 0000129A            351          Jmp     EA_SHIFT_DN             ; If it's not, we are shifting from a data register
00001272                           352          
00001272                           353  EA_SHIFT_CHECK_8    ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001272  4EB9 000014E4            354          Jsr     GET9TO11                ; Isolate the count/register bits
00001278                           355          
00001278  B03C 0000                356          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
0000127C  6E00 000C                357          Bgt     EA_SHIFT_IMMEDIATE
00001280                           358          
00001280  103C 0008                359          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001284                           360                  
00001284  4EF9 0000128A            361          Jmp     EA_SHIFT_IMMEDIATE
0000128A                           362          
0000128A                           363  EA_SHIFT_IMMEDIATE  ; Adds an immediate value before the comma
0000128A  1CFC 0023                364          Move.B  #'#', (A6)+
0000128E  0600 0030                365          Add.B   #$30, D0
00001292  1CC0                     366          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001294                           367  
00001294  4EF9 000012AC            368          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it
0000129A                           369          
0000129A                           370  EA_SHIFT_DN ; Adds a data register before the comma
0000129A  4EB9 000014E4            371          Jsr     GET9TO11                ; Isolate the data register bits
000012A0                           372          
000012A0  4EB9 000012BC            373          Jsr     EA_DN                   ; Add the data register to the string
000012A6                           374          
000012A6  4EF9 000012AC            375          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it 
000012AC                           376          
000012AC                           377  EA_SHIFT_COMMA  ; Adds the comma and everything after it to the string
000012AC  1CFC 002C                378          Move.B  #',', (A6)+
000012B0                           379          
000012B0  4EB9 0000151A            380          Jsr     GET0TO2                 ; Get the register number
000012B6                           381          
000012B6  4EB9 000012BC            382          Jsr     EA_DN                   ; Add the register
000012BC                           383          
000012BC                           384          ; <Next instruction>
000012BC                           385         
000012BC                           386  ;==========================================;        
000012BC                           387  ;---------- General EA functions ----------;
000012BC                           388  ;==========================================;
000012BC                           389  EA_DN   ; Adds Dn EA to string
000012BC  1CFC 0044                390          Move.B  #'D', (A6)+             
000012C0  0600 0030                391          Add.B   #$30, D0        
000012C4  1CC0                     392          Move.B  D0, (A6)+               
000012C6                           393                  
000012C6  4E75                     394          Rts
000012C8                           395  
000012C8                           396  EA_AN   ; Adds An EA to string
000012C8  1CFC 0041                397          Move.B  #'A', (A6)+
000012CC  0600 0030                398          Add.B   #$30, D0    
000012D0  1CC0                     399          Move.B  D0, (A6)+               
000012D2                           400                  
000012D2  4E75                     401          Rts
000012D4                           402  
000012D4                           403  EA_AN_PNTR  ; Adds (An) EA to string
000012D4  1CFC 0028                404          Move.B  #'(', (A6)+
000012D8  1CFC 0041                405          Move.B  #'A', (A6)+
000012DC  0600 0030                406          Add.B   #$30, D0
000012E0  1CC0                     407          Move.B  D0, (A6)+
000012E2  1CFC 0029                408          Move.B  #')', (A6)+
000012E6                           409                  
000012E6  4E75                     410          Rts
000012E8                           411          
000012E8                           412  EA_AN_INC   ; Adds (An)+ EA to string
000012E8  1CFC 0028                413          Move.B  #'(', (A6)+
000012EC  1CFC 0041                414          Move.B  #'A', (A6)+
000012F0  0600 0030                415          Add.B   #$30, D0
000012F4  1CC0                     416          Move.B  D0, (A6)+
000012F6  1CFC 0029                417          Move.B  #')', (A6)+
000012FA  1CFC 002B                418          Move.B  #'+', (A6)+
000012FE                           419                  
000012FE  4E75                     420          Rts 
00001300                           421          
00001300                           422  EA_AN_DEC   ; Adds -(An) EA to string
00001300  1CFC 002D                423          Move.B  #'-', (A6)+
00001304  1CFC 0028                424          Move.B  #'(', (A6)+
00001308  1CFC 0041                425          Move.B  #'A', (A6)+
0000130C  0600 0030                426          Add.B   #$30, D0
00001310  1CC0                     427          Move.B  D0, (A6)+
00001312  1CFC 0029                428          Move.B  #')', (A6)+
00001316                           429                  
00001316  4E75                     430          Rts 
00001318                           431  
00001318                           432  EA_WORD_ADDR    ; Adds $Word to string
00001318  3C1B                     433          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
0000131A                           434          
0000131A  1CFC 0024                435          Move.B  #'$', (A6)+
0000131E                           436          
0000131E  BC7C 8000                437          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001322  6E00 000C                438          Bgt     EA_SIGN_EXT_16
00001326                           439          
00001326  BC7C 8000                440          Cmp.W   #$8000, D6          ; Word address is greater than 8000
0000132A  6F00 001C                441          Ble     EA_SIGN_EXT_32
0000132E                           442          
0000132E  4E75                     443          Rts
00001330                           444                  
00001330                           445  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
00001330  1CFC 0030                446          Move.B  #'0', (A6)+
00001334  1CFC 0030                447          Move.B  #'0', (A6)+
00001338  1CFC 0030                448          Move.B  #'0', (A6)+
0000133C  1CFC 0030                449          Move.B  #'0', (A6)+
00001340                           450          
00001340  4EB9 00001360            451          Jsr     EA_WORD_TO_STRING       
00001346                           452          
00001346  4E75                     453          Rts
00001348                           454  
00001348                           455  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
00001348  1CFC 0046                456          Move.B  #'F', (A6)+
0000134C  1CFC 0046                457          Move.B  #'F', (A6)+
00001350  1CFC 0046                458          Move.B  #'F', (A6)+
00001354  1CFC 0046                459          Move.B  #'F', (A6)+
00001358                           460          
00001358  4EB9 00001360            461          Jsr     EA_WORD_TO_STRING   
0000135E                           462          
0000135E  4E75                     463          Rts
00001360                           464          
00001360                           465  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
00001360  4280                     466          Clr.L   D0              ; Clear D0
00001362  3006                     467          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
00001364                           468  
00001364  123C 000C                469          Move.B  #12, D1         ; Grab bits 12 to 15
00001368  E268                     470          Lsr     D1, D0
0000136A  0600 0030                471          Add.B   #$30, D0
0000136E  1CC0                     472          Move.B  D0, (A6)+
00001370                           473          
00001370  4280                     474          Clr.L   D0
00001372  3006                     475          Move.W  D6, D0
00001374                           476          
00001374  123C 0004                477          Move.B  #4, D1          ; Grab bits 8 to 11
00001378  E368                     478          Lsl     D1, D0
0000137A  123C 000C                479          Move.B  #12, D1
0000137E  E268                     480          Lsr     D1, D0  
00001380  0600 0030                481          Add.B   #$30, D0
00001384  1CC0                     482          Move.B  D0, (A6)+
00001386                           483          
00001386  4280                     484          Clr.L   D0
00001388  3006                     485          Move.W  D6, D0
0000138A                           486          
0000138A  123C 0008                487          Move.B  #8, D1          ; Grab bits 4 to 7
0000138E  E368                     488          Lsl     D1, D0
00001390  123C 000C                489          Move.B  #12, D1
00001394  E268                     490          Lsr     D1, D0
00001396  0600 0030                491          Add.B   #$30, D0
0000139A  1CC0                     492          Move.B  D0, (A6)+
0000139C                           493          
0000139C  4280                     494          Clr.L   D0
0000139E  3006                     495          Move.W  D6, D0
000013A0                           496          
000013A0  123C 000C                497          Move.B  #12, D1         ; Grab bits 0 to 3
000013A4  E368                     498          Lsl     D1, D0
000013A6  123C 000C                499          Move.B  #12, D1
000013AA  E268                     500          Lsr     D1, D0
000013AC  0600 0030                501          Add.B   #$30, D0
000013B0  1CC0                     502          Move.B  D0, (A6)+
000013B2                           503          
000013B2  4E75                     504          Rts
000013B4                           505          
000013B4                           506  EA_LONG_ADDR    ; Adds $Long to string
000013B4  2C1B                     507          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000013B6                           508          
000013B6  1CFC 0024                509          Move.B  #'$', (A6)+
000013BA                           510          
000013BA  4EB9 000013C2            511          Jsr     EA_LONG_TO_STRING
000013C0                           512  
000013C0  4E75                     513          Rts
000013C2                           514                  
000013C2                           515  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
000013C2  4280                     516          Clr.L   D0              ; Clear D0
000013C4  2006                     517          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
000013C6                           518  
000013C6  123C 001C                519          Move.B  #28, D1         ; Grab bits 28 to 31
000013CA  E2A8                     520          Lsr.L   D1, D0
000013CC  0600 0030                521          Add.B   #$30, D0
000013D0  1CC0                     522          Move.B  D0, (A6)+
000013D2                           523          
000013D2  4280                     524          Clr.L   D0             
000013D4  2006                     525          Move.L  D6, D0          
000013D6                           526          
000013D6  123C 0004                527          Move.B  #4, D1          ; Grab bits 24 to 27
000013DA  E3A8                     528          Lsl.L   D1, D0
000013DC  123C 001C                529          Move.B  #28, D1
000013E0  E2A8                     530          Lsr.L   D1, D0
000013E2  0600 0030                531          Add.B   #$30, D0
000013E6  1CC0                     532          Move.B  D0, (A6)+
000013E8                           533          
000013E8  4280                     534          Clr.L   D0             
000013EA  2006                     535          Move.L  D6, D0
000013EC                           536  
000013EC  123C 0008                537          Move.B  #8, D1          ; Grab bits 20 to 23
000013F0  E3A8                     538          Lsl.L   D1, D0
000013F2  123C 001C                539          Move.B  #28, D1
000013F6  E2A8                     540          Lsr.L   D1, D0
000013F8  0600 0030                541          Add.B   #$30, D0
000013FC  1CC0                     542          Move.B  D0, (A6)+
000013FE                           543          
000013FE  4280                     544          Clr.L   D0             
00001400  2006                     545          Move.L  D6, D0
00001402                           546  
00001402  123C 000C                547          Move.B  #12, D1         ; Grab bits 16 to 19
00001406  E3A8                     548          Lsl.L   D1, D0
00001408  123C 001C                549          Move.B  #28, D1
0000140C  E2A8                     550          Lsr.L   D1, D0
0000140E  0600 0030                551          Add.B   #$30, D0
00001412  1CC0                     552          Move.B  D0, (A6)+
00001414                           553          
00001414  4280                     554          Clr.L   D0             
00001416  2006                     555          Move.L  D6, D0
00001418                           556  
00001418  123C 0010                557          Move.B  #16, D1         ; Grab bits 12 to 15
0000141C  E3A8                     558          Lsl.L   D1, D0
0000141E  123C 001C                559          Move.B  #28, D1
00001422  E2A8                     560          Lsr.L   D1, D0
00001424  0600 0030                561          Add.B   #$30, D0
00001428  1CC0                     562          Move.B  D0, (A6)+
0000142A                           563          
0000142A  4280                     564          Clr.L   D0             
0000142C  2006                     565          Move.L  D6, D0
0000142E                           566          
0000142E  123C 0014                567          Move.B  #20, D1         ; Grab bits 8 to 11
00001432  E3A8                     568          Lsl.L   D1, D0
00001434  123C 001C                569          Move.B  #28, D1
00001438  E2A8                     570          Lsr.L   D1, D0
0000143A  0600 0030                571          Add.B   #$30, D0
0000143E  1CC0                     572          Move.B  D0, (A6)+
00001440                           573          
00001440  4280                     574          Clr.L   D0             
00001442  2006                     575          Move.L  D6, D0
00001444                           576  
00001444  123C 0018                577          Move.B  #24, D1         ; Grab bits 4 to 7
00001448  E3A8                     578          Lsl.L   D1, D0
0000144A  123C 001C                579          Move.B  #28, D1
0000144E  E2A8                     580          Lsr.L   D1, D0
00001450  0600 0030                581          Add.B   #$30, D0
00001454  1CC0                     582          Move.B  D0, (A6)+
00001456                           583          
00001456  4280                     584          Clr.L   D0             
00001458  2006                     585          Move.L  D6, D0
0000145A                           586  
0000145A  123C 001C                587          Move.B  #28, D1         ; Grab bits 0 to 3
0000145E  E3A8                     588          Lsl.L   D1, D0
00001460  123C 001C                589          Move.B  #28, D1
00001464  E2A8                     590          Lsr.L   D1, D0
00001466  0600 0030                591          Add.B   #$30, D0
0000146A  1CC0                     592          Move.B  D0, (A6)+
0000146C                           593          
0000146C  4E75                     594          Rts
0000146E                           595          
0000146E                           596  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
0000146E  4280                     597          Clr.L   D0              ; Clear D0
00001470  2006                     598          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
00001472                           599  
00001472  123C 0004                600          Move.B  #4, D1         ; Grab bits 4 to 7
00001476  E2A8                     601          Lsr.L   D1, D0
00001478  0600 0030                602          Add.B   #$30, D0
0000147C  1CC0                     603          Move.B  D0, (A6)+
0000147E                           604          
0000147E  4280                     605          Clr.L   D0             
00001480  2006                     606          Move.L  D6, D0          
00001482                           607          
00001482  123C 0004                608          Move.B  #4, D1          ; Grab bits 0 to 3
00001486  E3A8                     609          Lsl.L   D1, D0
00001488  123C 0004                610          Move.B  #4, D1
0000148C  E2A8                     611          Lsr.L   D1, D0
0000148E  0600 0030                612          Add.B   #$30, D0
00001492  1CC0                     613          Move.B  D0, (A6)+
00001494                           614          
00001494  4E75                     615          Rts
00001496                           616  
00001496                           617  EA_IMM_BYTE ; Finds the immediate byte data
00001496  1C1B                     618          Move.B  (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
00001498                           619          
00001498  1CFC 0023                620          Move.B  #'#', (A6)+         
0000149C  1CFC 0024                621          Move.B  #'$', (A6)+         
000014A0                           622          
000014A0  4EB8 146E                623          Jsr     EA_BYTE_TO_STRING   ; Add the byte to the string
000014A4                           624          
000014A4  4E75                     625          Rts
000014A6                           626                  
000014A6                           627  EA_IMM_WORD ; Finds the immediate word data
000014A6  3C1B                     628          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
000014A8                           629          
000014A8  1CFC 0023                630          Move.B  #'#', (A6)+         
000014AC  1CFC 0024                631          Move.B  #'$', (A6)+         
000014B0                           632          
000014B0  4EB8 1360                633          Jsr     EA_WORD_TO_STRING   ; Add the word to the string
000014B4                           634          
000014B4  4E75                     635          Rts
000014B6                           636          
000014B6                           637  EA_IMM_LONG ; Finds the immediate long data
000014B6  2C1B                     638          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
000014B8                           639          
000014B8  1CFC 0023                640          Move.B  #'#', (A6)+
000014BC  1CFC 0024                641          Move.B  #'$', (A6)+
000014C0                           642          
000014C0  4EB8 13C2                643          Jsr     EA_LONG_TO_STRING   ; Add the long to the string
000014C4                           644          
000014C4  4E75                     645          Rts
000014C6                           646  
000014C6                           647  ;===========================================================;       
000014C6                           648  ;---------------- Bit Chopping Sub Routines ----------------;
000014C6                           649  ; These Sub Routines Chop a WORD size piece of data from
000014C6                           650  ; Data register 4 into a smaller piece, leaving just the
000014C6                           651  ; Piece in register 0 while leaving the original piece
000014C6                           652  ; of data intact.
000014C6                           653  ;===========================================================;
000014C6                           654  GET12TO15
000014C6  4280                     655          CLR.L   D0
000014C8  3004                     656          Move.W  D4, D0
000014CA                           657                  
000014CA  123C 000C                658          Move.B  #12, D1
000014CE  E268                     659          LSR     D1, D0
000014D0                           660                  
000014D0  4E75                     661          RTS
000014D2                           662  
000014D2                           663  GET12TO13
000014D2  4280                     664          CLR.L   D0
000014D4  3004                     665          Move.W  D4, D0
000014D6                           666          
000014D6  123C 0002                667          Move.B  #2, D1
000014DA  E368                     668          LSL     D1, D0
000014DC                           669          
000014DC  123C 000E                670          Move.B  #14, D1
000014E0  E268                     671          LSR     D1, D0
000014E2                           672          
000014E2  4E75                     673          RTS
000014E4                           674                  
000014E4                           675  GET9TO11        
000014E4  4280                     676          CLR.L   D0
000014E6  3004                     677          Move.W  D4, D0
000014E8                           678                  
000014E8  123C 0004                679          Move.B  #4, D1
000014EC  E368                     680          LSL     D1, D0
000014EE                           681                  
000014EE  123C 000D                682          Move.B  #13, D1
000014F2  E268                     683          LSR     D1, D0
000014F4                           684                  
000014F4  4E75                     685          RTS
000014F6                           686                  
000014F6                           687  GET6TO8 
000014F6  4280                     688          CLR.L   D0
000014F8  3004                     689          Move.W  D4, D0
000014FA                           690                  
000014FA  123C 0007                691          Move.B  #7, D1
000014FE  E368                     692          LSL     D1, D0
00001500                           693                  
00001500  123C 000D                694          Move.B  #13, D1
00001504  E268                     695          LSR     D1, D0
00001506                           696                  
00001506  4E75                     697          RTS
00001508                           698                  
00001508                           699  GET3TO5 
00001508  4280                     700          CLR.L   D0
0000150A  3004                     701          Move.W  D4, D0
0000150C                           702                  
0000150C  123C 000A                703          Move.B  #10, D1
00001510  E368                     704          LSL     D1, D0
00001512                           705                  
00001512  123C 000D                706          Move.B  #13, D1
00001516  E268                     707          LSR     D1, D0
00001518                           708                  
00001518  4E75                     709          RTS
0000151A                           710  GET0TO2 
0000151A  4280                     711          CLR.L   D0
0000151C  3004                     712          Move.W  D4, D0
0000151E                           713                  
0000151E  123C 000D                714          Move.B  #13, D1
00001522  E368                     715          LSL     D1, D0
00001524                           716                  
00001524  123C 000D                717          Move.B  #13, D1
00001528  E268                     718          LSR     D1, D0
0000152A                           719                  
0000152A  4E75                     720          RTS
0000152C                           721  GETBIT8
0000152C  4280                     722          CLR.L   D0
0000152E  3004                     723          Move.W  D4, D0
00001530                           724                  
00001530  123C 0007                725          Move.B  #7, D1
00001534  E368                     726          LSL     D1, D0
00001536                           727                  
00001536  123C 000F                728          Move.B  #15, D1
0000153A  E268                     729          LSR     D1, D0
0000153C                           730                  
0000153C  4E75                     731          RTS 
0000153E                           732          
0000153E                           733  GET6TO7
0000153E  4280                     734          Clr.L   D0
00001540  3004                     735          Move.W  D4, D0
00001542                           736          
00001542  123C 0008                737          Move.B  #8, D1
00001546  E368                     738          Lsl     D1, D0
00001548                           739          
00001548  123C 000E                740          Move.B  #14, D1
0000154C  E268                     741          Lsr     D1, D0
0000154E                           742          
0000154E  4E75                     743          Rts
00001550                           744          
00001550                           745  GETBIT5
00001550  4280                     746          Clr.L   D0
00001552  3004                     747          Move.W  D4, D0
00001554                           748          
00001554  123C 000A                749          Move.B  #10, D1
00001558  E368                     750          Lsl     D1, D0
0000155A                           751          
0000155A  123C 000F                752          Move.B  #15, D1
0000155E  E268                     753          Lsr     D1, D0
00001560                           754          
00001560  4E75                     755          Rts
00001562                           756  
00001562                           757  
00001562                           758      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_ADD              10DC
EA_ADDA             1110
EA_ADD_DEST         11A2
EA_ADD_OPMODE_DEST  113C
EA_ADD_OPMODE_SOURCE  1126
EA_ADD_SIZE         11DA
EA_ADD_SOURCE       1152
EA_AN               12C8
EA_AN_DEC           1300
EA_AN_INC           12E8
EA_AN_PNTR          12D4
EA_BIT_SHIFT        1212
EA_BYTE_TO_STRING   146E
EA_CMP              120E
EA_DN               12BC
EA_IMM_BYTE         1496
EA_IMM_LONG         14B6
EA_IMM_WORD         14A6
EA_LONG_ADDR        13B4
EA_LONG_TO_STRING   13C2
EA_MOVE             1014
EA_MOVE_DEST        1074
EA_MOVE_SIZE        10BC
EA_MOVE_SOURCE      1024
EA_SHIFT_CHECK_8    1272
EA_SHIFT_COMMA      12AC
EA_SHIFT_DN         129A
EA_SHIFT_IMMEDIATE  128A
EA_SHIFT_MEMORY     1226
EA_SHIFT_REGISTER   125E
EA_SIGN_EXT_16      1330
EA_SIGN_EXT_32      1348
EA_SUB              120A
EA_WORD_ADDR        1318
EA_WORD_TO_STRING   1360
GET0TO2             151A
GET12TO13           14D2
GET12TO15           14C6
GET3TO5             1508
GET6TO7             153E
GET6TO8             14F6
GET9TO11            14E4
GETBIT5             1550
GETBIT8             152C
IMM_MODE            7
IMM_REG             4
LONG_MODE           7
LONG_REG            1
SHIFT_TEST1         E1D7
SHIFT_TEST2         E1F8
SHIFT_TEST3         EF21
SHIFT_TEST4         E507
SHIFT_TEST5         E104
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
