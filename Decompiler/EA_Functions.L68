00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/27/2014 11:49:53 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L $Long,A7
00000000                            39  
00000000  =0000E1D7                 40  Shift_Test1         EQU     %1110000111010111   ; Asl (A7)
00000000  =0000E1F8                 41  Shift_Test2         EQU     %1110000111111000   ; Asl $Word
00000000  =0000EF21                 42  Shift_Test3         EQU     %1110111100100001   ; Asl.B D7,D1
00000000  =0000E507                 43  Shift_Test4         EQU     %1110010100000111   ; Asl.B #2,D7
00000000  =0000E104                 44  Shift_Test5         EQU     %1110000100000100   ; Asl.B #8,D4
00000000                            45  
00000000  =0000041F                 46  Imm_Test1           EQU     %0000010000011111   ; SubI.B #$Imm,(A7)+
00000000  =00000479                 47  Imm_Test2           EQU     %0000010001111001   ; SubI.W #$Imm,$Long
00000000                            48  
00000000  =00005E09                 49  AddQ_Test1          EQU     %0101111000001001   ; AddQ.B #7,A1
00000000  =00005009                 50  AddQ_Test2          EQU     %0101000000001001   ; AddQ.B #8,A1
00000000                            51  
00000000  =0000CFFC                 52  Muls_Test1          EQU     %1100111111111100   ; Muls.W #$Imm,D7
00000000  =0000CFD2                 53  Muls_Test2          EQU     %1100111111010010   ; Muls.W (A2),D7
00000000                            54  
00000000  =00000F07                 55  Btst_Test1          EQU     %0000111100000111   ; Btst D7,D7
00000000  =00000F3C                 56  Btst_Test2          EQU     %0000111100111100   ; Btst D7,#$Imm
00000000  =00000807                 57  Btst_Test3          EQU     %0000100000000111   ; Btst #$Byte,D7
00000000                            58  
00000000  =00006007                 59  Bra_Test1           EQU     %0110000000000111   ; Bra 7
00000000                            60  ;Bra_Test2           EQU     %0110000000001011   ; Bra -5
00000000                            61          
00001000                            62      ORG    $1000
00001000                            63      
00001000                            64  START:                  ; first instruction of program
00001000  267C 00000400             65          Move.L  #$0000400, A3
00001006                            66          
00001006  36BC 0034                 67          Move.W  #$0034, (A3)
0000100A                            68          ;Move.W  #$4030, (A3)+
0000100A                            69          ;Move.L  #$12345678, (A3)
0000100A                            70          ;Sub.W   #2, A3
0000100A                            71          ;Move.L  #$12349999, (A3)
0000100A                            72          ;Move.W  #$11, (A3)
0000100A                            73          ;Move.B  #$99, (A3)
0000100A                            74          
0000100A                            75          ;Move.W  #Test_Move1, D4
0000100A                            76          ;Move.W  #Test_Move2, D4
0000100A                            77          ;Move.W  #Test_Move3, D4
0000100A                            78          ;Move.W  #Test_Move4, D4
0000100A                            79          ;Move.W  #Test_Move5, D4
0000100A                            80          ;Move.W  #Test_Move6, D4        
0000100A                            81          ;Move.W  #Test_Move7, D4        
0000100A                            82          ;Move.W  #Test_Move8, D4
0000100A                            83          
0000100A                            84          ;Move.W  #Add_Test1, D4
0000100A                            85          ;Move.W  #Add_Test2, D4
0000100A                            86          ;Move.W  #Add_Test3, D4
0000100A                            87          ;Move.W  #Add_Test4, D4
0000100A                            88          
0000100A                            89          ;Move.W  #Shift_Test1, D4
0000100A                            90          ;Move.W  #Shift_Test2, D4
0000100A                            91          ;Move.W  #Shift_Test3, D4
0000100A                            92          ;Move.W  #Shift_Test4, D4
0000100A                            93          ;Move.W  #Shift_Test5, D4
0000100A                            94          
0000100A                            95          ;Move.W  #Imm_Test1, D4
0000100A                            96          ;Move.W  #Imm_Test2, D4
0000100A                            97          
0000100A                            98          ;Move.W  #AddQ_Test1, D4
0000100A                            99          ;Move.W  #AddQ_Test2, D4
0000100A                           100          
0000100A                           101          ;Move.W  #Muls_Test1, D4
0000100A                           102          ;Move.W  #Muls_Test2, D4
0000100A                           103          
0000100A                           104          ;Move.W  #Btst_Test1, D4
0000100A                           105          ;Move.W  #Btst_Test2, D4
0000100A                           106          ;Move.W  #Btst_Test3, D4
0000100A                           107          
0000100A  383C 6007                108          Move.W  #Bra_Test1, D4
0000100E                           109          ;Move.W  #Bra_Test2, D4
0000100E                           110                  
0000100E                           111          ;Jmp     EA_MOVE     ; Branch to EA function for Move
0000100E                           112          ;Jmp     EA_ADD
0000100E                           113          ;Jmp     EA_BIT_SHIFT
0000100E                           114          ;Jmp     EA_IMMEDIATE
0000100E                           115          ;Jmp     EA_ADDQ
0000100E                           116          ;Jmp     EA_MULS
0000100E                           117          ;Jmp     EA_BTST
0000100E  4EF9 000012CE            118          Jmp     EA_BRA
00001014                           119  
00001014                           120  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
00001014                           121  ;-------------------- Effective Address Sub Routines --------------------;
00001014                           122  ; These subroutines look for the correct effective address
00001014                           123  ; in each OP code.
00001014                           124  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
00001014                           125  
00001014                           126  ;=============================================;
00001014                           127  ;--------------- EA Move/MoveA ---------------;
00001014                           128  ;=============================================;
00001014                           129  EA_MOVE
00001014  4EB9 00001024            130          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
0000101A  1CFC 002C                131          Move.B  #',', (A6)+             ; Add a comma
0000101E  4EB9 00001034            132          Jsr     EA_MOVE_DEST            ; Add the EA for destination
00001024                           133          
00001024                           134          ; <Next instruction>
00001024                           135                  
00001024                           136  EA_MOVE_SOURCE  ; Find out Move's source
00001024  4EB9 000014F2            137          Jsr     EA_0TO5                 ; Get the EA
0000102A                           138          
0000102A  B03C 0004                139          Cmp.B   #Imm_Reg, D0            ; #<data>
0000102E  6700 004C                140          Beq     EA_MOVE_SIZE
00001032                           141          
00001032  4E75                     142          Rts
00001034                           143          
00001034                           144  EA_MOVE_DEST    ; Find out Move's destination
00001034  4EB9 0000156A            145          Jsr     GET6TO8                 ; Get destination mode
0000103A  1A00                     146          Move.B  D0, D5                  ; Move destination mode to D5
0000103C  4EB9 00001558            147          Jsr     GET9TO11                ; Get destination register
00001042                           148          
00001042                           149          ; List of valid effective addresses
00001042  BA3C 0000                150          Cmp.B   #Dn_Mode, D5            ; Dn
00001046  6700 02A0                151          Beq     EA_DN
0000104A                           152          
0000104A  BA3C 0001                153          Cmp.B   #An_Mode, D5            ; An
0000104E  6700 02A4                154          Beq     EA_AN
00001052                           155          
00001052  BA3C 0002                156          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001056  6700 02A8                157          Beq     EA_AN_PNTR
0000105A                           158          
0000105A  BA3C 0003                159          Cmp.B   #An_Inc_Mode, D5        ; (An)+
0000105E  6700 02B4                160          Beq     EA_AN_INC
00001062                           161          
00001062  BA3C 0004                162          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001066  6700 02C4                163          Beq     EA_AN_DEC
0000106A                           164          
0000106A                           165          ; Comparing registers at this point because modes are the same
0000106A  B03C 0000                166          Cmp.B   #Word_Reg, D0           ; (xxx).W
0000106E  6700 02D4                167          Beq     EA_WORD_ADDR
00001072                           168          
00001072  B03C 0001                169          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001076  6700 0368                170          Beq     EA_LONG_ADDR
0000107A                           171          
0000107A  4E75                     172          Rts
0000107C                           173          
0000107C                           174  EA_MOVE_SIZE    ; Find the size of immediate data being moved
0000107C  4EB9 00001546            175          Jsr     GET12TO13               ; Get Move size
00001082                           176  
00001082  B03C 0001                177          Cmp.B   #%01, D0                ; Byte
00001086  6700 043A                178          Beq     EA_IMM_BYTE
0000108A                           179  
0000108A  B03C 0003                180          Cmp.B   #%11, D0                ; Word
0000108E  6700 0442                181          Beq     EA_IMM_WORD
00001092                           182          
00001092  B03C 0002                183          Cmp.B   #%10, D0                ; Long
00001096  6700 044A                184          Beq     EA_IMM_LONG
0000109A                           185          
0000109A  4E75                     186          Rts
0000109C                           187  
0000109C                           188  ;===========================================;        
0000109C                           189  ;--------------- EA Add/AddA ---------------;
0000109C                           190  ;===========================================;       
0000109C                           191  EA_ADD  ; Figures out the EA for Add        
0000109C  4EB9 0000156A            192          Jsr     GET6TO8                 ; Isolate the Op mode
000010A2                           193          
000010A2  B03C 0003                194          Cmp.B   #%011, D0               ; Compare to AddA word
000010A6  6700 0028                195          Beq     EA_ADDA
000010AA                           196          
000010AA  B03C 0007                197          Cmp.B   #%111, D0               ; Compare to AddA long
000010AE  6700 0020                198          Beq     EA_ADDA
000010B2                           199  
000010B2  B03C 0000                200          Cmp.B   #%000, D0               ; Compare to Add source byte
000010B6  6700 002E                201          Beq     EA_ADD_OPMODE_SOURCE
000010BA                           202          
000010BA  B03C 0001                203          Cmp.B   #%001, D0               ; Compare to Add source word
000010BE  6700 0026                204          Beq     EA_ADD_OPMODE_SOURCE
000010C2                           205          
000010C2  B03C 0002                206          Cmp.B   #%010, D0               ; Compare to Add source Long
000010C6  6700 001E                207          Beq     EA_ADD_OPMODE_SOURCE
000010CA                           208          
000010CA  4EF9 000010FC            209          Jmp     EA_ADD_OPMODE_DEST      ; Must be an Add destination if none of the above
000010D0                           210          
000010D0                           211  EA_ADDA ; Figures out the EA for AddA
000010D0  4EB9 00001112            212          Jsr     EA_ADD_ADDRESS          ; Get the source EA
000010D6  1CFC 002C                213          Move.B  #',', (A6)+             ; Add a comma
000010DA  4EB9 00001558            214          Jsr     GET9TO11                ; Get the register
000010E0  4EB9 000012F4            215          Jsr     EA_AN                   ; Add An
000010E6                           216          
000010E6                           217          ; <Next instruction>
000010E6                           218          
000010E6                           219  EA_ADD_OPMODE_SOURCE    ; Finds the EA for Add if it is for the source
000010E6  4EB9 00001112            220          Jsr     EA_ADD_ADDRESS          ; Get the source EA
000010EC  1CFC 002C                221          Move.B  #',', (A6)+             ; Add a comma
000010F0  4EB9 00001558            222          Jsr     GET9TO11                ; Get the register
000010F6  4EB9 000012E8            223          Jsr     EA_DN                   ; Add Dn
000010FC                           224          
000010FC                           225          ; <Next instruction>
000010FC                           226          
000010FC                           227  EA_ADD_OPMODE_DEST      ; Finds the EA for Add if it is for the destination
000010FC  4EB9 00001558            228          Jsr     GET9TO11                ; Get the register
00001102  4EB9 000012E8            229          Jsr     EA_DN                   ; Add Dn
00001108  1CFC 002C                230          Move.B  #',', (A6)+             ; Add a comma
0000110C  4EB9 00001112            231          Jsr     EA_ADD_ADDRESS          ; Get the destination EA 
00001112                           232          
00001112                           233          ; <Next instruction>
00001112                           234          
00001112                           235  EA_ADD_ADDRESS
00001112  4EB9 000014F2            236          Jsr     EA_0TO5                 ; Check for all EA except #<data>
00001118                           237          
00001118  B03C 0004                238          Cmp.B   #Imm_Reg, D0            ; #<data>
0000111C  6700 0004                239          Beq     EA_ADD_SIZE
00001120                           240  
00001120  4E75                     241          Rts
00001122                           242          
00001122                           243  EA_ADD_SIZE ; Find the size of immediate data being moved
00001122  4EB9 0000156A            244          Jsr     GET6TO8                 ; Get Move size
00001128                           245  
00001128  B03C 0000                246          Cmp.B   #%000, D0               ; Byte
0000112C  6700 0394                247          Beq     EA_IMM_BYTE
00001130                           248  
00001130  B03C 0001                249          Cmp.B   #%001, D0               ; Word
00001134  6700 039C                250          Beq     EA_IMM_WORD
00001138                           251          
00001138  B03C 0002                252          Cmp.B   #%010, D0               ; Long
0000113C  6700 03A4                253          Beq     EA_IMM_LONG
00001140                           254          
00001140  B03C 0003                255          Cmp.B   #%011, D0               ; AddA Word
00001144  6700 038C                256          Beq     EA_IMM_WORD
00001148                           257     
00001148  B03C 0007                258          Cmp.B   #%111, D0               ; AddA Long
0000114C  6700 0394                259          Beq     EA_IMM_LONG
00001150                           260          
00001150  4E75                     261          Rts
00001152                           262          
00001152                           263  ;=================================================;        
00001152                           264  ;-------------------- EA AddQ --------------------;
00001152                           265  ;=================================================;
00001152                           266  EA_ADDQ ; Figures out the EA for AddQ
00001152  4EB9 00001162            267          Jsr     EA_ADDQ_CHECK_8         ; Get the immediate value
00001158  1CFC 002C                268          Move.B  #',', (A6)+             ; Add a comma
0000115C  4EB9 00001186            269          Jsr     EA_ADDQ_DEST            ; Add the destination
00001162                           270  
00001162                           271  EA_ADDQ_CHECK_8 ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001162  4EB9 00001558            272          Jsr     GET9TO11                ; Isolate the count/register bits
00001168                           273          
00001168  B03C 0000                274          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
0000116C  6E00 000C                275          Bgt     EA_ADDQ_IMMEDIATE
00001170                           276          
00001170  103C 0008                277          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001174                           278          
00001174  4EF9 0000117A            279          Jmp     EA_ADDQ_IMMEDIATE
0000117A                           280          
0000117A                           281  EA_ADDQ_IMMEDIATE   ; Adds an immediate value before the comma
0000117A  1CFC 0023                282          Move.B  #'#', (A6)+
0000117E  0600 0030                283          Add.B   #$30, D0
00001182  1CC0                     284          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001184                           285          
00001184  4E75                     286          Rts
00001186                           287          
00001186                           288  EA_ADDQ_DEST    ; Determines the destination       
00001186  4EB9 000014F2            289          Jsr     EA_0TO5                 ; Check for all EA except #<data>
0000118C                           290          
0000118C                           291  ;=========================================================;        
0000118C                           292  ;---------------------- EA Sub/SubA ----------------------;
0000118C                           293  ; Jumps straight to EA_ADD because the EA for Add/AddA and
0000118C                           294  ; Sub/SubA are exactly the same.
0000118C                           295  ;=========================================================;
0000118C                           296  EA_SUB
0000118C  4EF8 109C                297          Jmp     EA_ADD
00001190                           298  
00001190                           299  ;=========================================================;        
00001190                           300  ;---------------------- EA Cmp/CmpA ----------------------;
00001190                           301  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001190                           302  ; Cmp/CmpA are exactly the same.
00001190                           303  ;=========================================================;
00001190                           304  EA_CMP       
00001190  4EF8 109C                305          Jmp     EA_ADD
00001194                           306          
00001194                           307  ;=========================================================;        
00001194                           308  ;------------------------ EA Lea -------------------------;
00001194                           309  ; Jumps straight to EA_ADD because the EA for AddA and Lea
00001194                           310  ; are exactly the same.
00001194                           311  ;=========================================================;
00001194                           312  EA_LEA
00001194  4EF8 109C                313          Jmp     EA_ADD
00001198                           314          
00001198                           315  ;=========================================================;        
00001198                           316  ;------------------------ EA And -------------------------;
00001198                           317  ; Jumps straight to EA_ADD because the EA for Add and And
00001198                           318  ; are exactly the same.
00001198                           319  ;=========================================================;
00001198                           320  EA_AND
00001198  4EF8 109C                321          Jmp     EA_ADD
0000119C                           322          
0000119C                           323  ;=========================================================;        
0000119C                           324  ;------------------------ EA Eor -------------------------;
0000119C                           325  ; Jumps straight to EA_ADD because the EA for Add and Eor
0000119C                           326  ; are exactly the same.
0000119C                           327  ;=========================================================;
0000119C                           328  EA_EOR
0000119C  4EF8 109C                329          Jmp     EA_ADD
000011A0                           330          
000011A0                           331  ;=========================================================;        
000011A0                           332  ;------------------------ EA Neg -------------------------;
000011A0                           333  ;=========================================================;
000011A0                           334  EA_NEG
000011A0  4EB9 000014F2            335          Jsr     EA_0TO5                 ; Check for all EA except #<data>
000011A6                           336          
000011A6                           337          ; <Next instruction>
000011A6                           338          
000011A6                           339  ;=========================================================;        
000011A6                           340  ;------------------------ EA Not -------------------------;
000011A6                           341  ; Jumps straight to EA_NEG because Neg and Not have the
000011A6                           342  ; exact same EAs. 
000011A6                           343  ;=========================================================;
000011A6                           344  EA_NOT
000011A6  4EF8 11A0                345          Jmp     EA_NEG 
000011AA                           346          
000011AA                           347  ;=========================================================;        
000011AA                           348  ;------------------------ EA Jsr -------------------------;
000011AA                           349  ; Jumps straight to EA_NEG because Neg and Jsr have the
000011AA                           350  ; exact same EAs. 
000011AA                           351  ;=========================================================;
000011AA                           352  EA_Jsr
000011AA  4EF8 11A0                353          Jmp     EA_NEG 
000011AE                           354  
000011AE                           355  ;=========================================================;
000011AE                           356  ;--------------------- EA Bit Shift ----------------------;
000011AE                           357  ; Finds the EA for ASd, LSd, ROd. All of these OP codes
000011AE                           358  ; are combined because the EA for each code is exactly the
000011AE                           359  ; same.
000011AE                           360  ;=========================================================;
000011AE                           361  EA_BIT_SHIFT    ; Figures out the EA for bit shift functions
000011AE  4EB9 000015B2            362          Jsr     GET6TO7
000011B4                           363          
000011B4  B03C 0003                364          Cmp.B   #%11, D0                ; If bits 6 and 7 are not %11, then we are shifting a register
000011B8  6600 000E                365          Bne     EA_SHIFT_REGISTER
000011BC                           366          
000011BC  4EB9 000011C2            367          Jsr     EA_SHIFT_MEMORY         ; If bits 6 and 7 are %11, then we are shifting memory
000011C2                           368          
000011C2                           369          ; <Next instruction>
000011C2                           370                  
000011C2                           371  EA_SHIFT_MEMORY ; Adds the correct EA for a memory shift
000011C2  4EB9 000014F2            372          Jsr     EA_0TO5                 ; Check for all EA except #<data>
000011C8                           373          
000011C8                           374  EA_SHIFT_REGISTER   ; Figure out if we are shifting by #<data> or by the value in a data register
000011C8  4EB9 000015C4            375          Jsr     GETBIT5
000011CE                           376          
000011CE  B03C 0000                377          Cmp.B   #0, D0                  ; Check if bit 5 is %0
000011D2  6700 0008                378          Beq     EA_SHIFT_CHECK_8
000011D6                           379          
000011D6  4EF9 00001204            380          Jmp     EA_SHIFT_DN             ; If it's not, we are shifting from a data register
000011DC                           381          
000011DC                           382  EA_SHIFT_CHECK_8    ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
000011DC  4EB9 00001558            383          Jsr     GET9TO11                ; Isolate the count/register bits
000011E2                           384          
000011E2  B03C 0000                385          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
000011E6  6E00 000C                386          Bgt     EA_SHIFT_IMMEDIATE
000011EA                           387          
000011EA  103C 0008                388          Move.B  #8, D0                  ; Else, use 8 as the immediate value
000011EE                           389                  
000011EE  4EF9 000011F4            390          Jmp     EA_SHIFT_IMMEDIATE
000011F4                           391          
000011F4                           392  EA_SHIFT_IMMEDIATE  ; Adds an immediate value before the comma
000011F4  1CFC 0023                393          Move.B  #'#', (A6)+
000011F8  0600 0030                394          Add.B   #$30, D0
000011FC  1CC0                     395          Move.B  D0, (A6)+               ; Add the immediate value to the string
000011FE                           396  
000011FE  4EF9 00001216            397          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it
00001204                           398          
00001204                           399  EA_SHIFT_DN ; Adds a data register before the comma
00001204  4EB9 00001558            400          Jsr     GET9TO11                ; Isolate the data register bits
0000120A                           401          
0000120A  4EB9 000012E8            402          Jsr     EA_DN                   ; Add the data register to the string
00001210                           403          
00001210  4EF9 00001216            404          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it 
00001216                           405          
00001216                           406  EA_SHIFT_COMMA  ; Adds the comma and everything after it to the string
00001216  1CFC 002C                407          Move.B  #',', (A6)+
0000121A                           408          
0000121A  4EB9 0000158E            409          Jsr     GET0TO2                 ; Get the register number
00001220                           410          
00001220  4EB9 000012E8            411          Jsr     EA_DN                   ; Add the register
00001226                           412          
00001226                           413          ; <Next instruction>
00001226                           414  
00001226                           415  ;============================================;        
00001226                           416  ;--------------- EA Immediate ---------------;
00001226                           417  ; Provides EA for SubI, OrI, EorI, and CmpI.
00001226                           418  ;============================================;
00001226                           419  EA_IMMEDIATE    ; Figures out the EA for immediate data OP codes
00001226  4EB9 00001236            420          Jsr     EA_IMMEDIATE_SIZE       ; Get the size of the immediate data and add to string
0000122C  1CFC 002C                421          Move.B  #',', (A6)+             ; Add a comma
00001230  4EB9 00001256            422          Jsr     EA_IMMEDIATE_DEST       ; Add the destination EA
00001236                           423          
00001236                           424          ; <Next instruction>
00001236                           425          
00001236                           426  EA_IMMEDIATE_SIZE   ; Determines the size of the immediate data and adds it
00001236  4EB9 000015B2            427          Jsr     GET6TO7                 ; Isolate the size bits
0000123C                           428                  
0000123C  B03C 0001                429          Cmp.B   #%01, D0                ; Immediate word
00001240  6700 0290                430          Beq     EA_IMM_WORD
00001244                           431          
00001244  B03C 0002                432          Cmp.B   #%10, D0                ; Immediate long
00001248  6700 0298                433          Beq     EA_IMM_LONG
0000124C                           434          
0000124C  524B                     435          AddA.W  #1, A3                  ; Else, move the pointer forward by a byte to get the next byte
0000124E  4EF9 000014C2            436          Jmp     EA_IMM_BYTE
00001254                           437  
00001254  4E75                     438          Rts
00001256                           439          
00001256                           440  EA_IMMEDIATE_DEST   ; Determines the destination EA
00001256  4EB9 000014F2            441          Jsr     EA_0TO5                 ; Check for all EA except #<data>
0000125C                           442        
0000125C                           443  ;=================================================;  
0000125C                           444  ;-------------------- EA Muls --------------------;
0000125C                           445  ;=================================================;
0000125C                           446  EA_MULS ; Determines the EA for Muls
0000125C  4EB9 00001272            447          Jsr     EA_MULS_ADDRESS         ; Get the EA
00001262  1CFC 002C                448          Move.B  #',', (A6)+             ; Add a comma
00001266  4EB9 00001558            449          Jsr     GET9TO11                ; Get the register
0000126C  4EB9 000012E8            450          Jsr     EA_DN                   ; Add Dn
00001272                           451          
00001272                           452          ; <Next instruction>
00001272                           453          
00001272                           454  EA_MULS_ADDRESS ; Determines the EA
00001272  4EB9 000014F2            455          Jsr     EA_0TO5                 ; Check for all EA except #<data>
00001278                           456          
00001278  B03C 0004                457          Cmp.B   #Imm_Reg, D0            ; Check for #<data>
0000127C  6700 0254                458          Beq     EA_IMM_WORD
00001280                           459          
00001280  4E75                     460          Rts
00001282                           461          
00001282                           462  ;=================================================;  
00001282                           463  ;-------------------- EA DIVS --------------------;
00001282                           464  ; Jumps straight to EA_DIVS because the EA for
00001282                           465  ; both OP codes is exactly the same.
00001282                           466  ;=================================================;
00001282                           467  EA_DIVS
00001282  4EF8 125C                468          Jmp     EA_MULS
00001286                           469          
00001286                           470  ;=================================================;        
00001286                           471  ;-------------------- EA BTST --------------------;
00001286                           472  ;=================================================;
00001286                           473  EA_BTST ; Determines the EA for Btst
00001286  4EB9 000015A0            474          Jsr     GETBIT8                 ; Use bit 8 to determine if the bit number is immediate or a data register
0000128C                           475          
0000128C  B03C 0001                476          Cmp.B   #%1, D0                 ; 1 is a data register
00001290  6700 0008                477          Beq     EA_BTST_DN
00001294                           478          
00001294  4EF9 000012AC            479          Jmp     EA_BTST_IMM             ; Else (0), the bit number is immediate data
0000129A                           480          
0000129A                           481  EA_BTST_DN  ; Gets the register for the bit number
0000129A  4EB9 00001558            482          Jsr     GET9TO11                ; Get the register
000012A0  4EB9 000012E8            483          Jsr     EA_DN                   ; Add the register to the string
000012A6                           484          
000012A6  4EB9 000012BA            485          Jsr     EA_BTST_ADDRESS         ; Add the EA
000012AC                           486          
000012AC                           487          ; <Next instruction>
000012AC                           488  
000012AC                           489  EA_BTST_IMM ; Gets the immediate data for the bit number
000012AC  524B                     490          AddA.W  #1, A3                  ; Move the pointer forward by a byte to get the next byte
000012AE  4EB9 000014C2            491          Jsr     EA_IMM_BYTE             ; Add the bit number as an immediate hex byte
000012B4                           492          
000012B4  4EB9 000012BA            493          Jsr     EA_BTST_ADDRESS         ; Add the register to the string
000012BA                           494          
000012BA                           495          ; <Next instruction>
000012BA                           496  
000012BA                           497  EA_BTST_ADDRESS ; Get the EA
000012BA  1CFC 002C                498          Move.B  #',', (A6)+
000012BE                           499  
000012BE  4EB9 000014F2            500          Jsr     EA_0TO5                 ; Check the EA for everything but #<data>
000012C4                           501          
000012C4  B03C 0004                502          Cmp.B   #Imm_Reg, D0            ; Check if the EA is #<data>
000012C8  6700 01F8                503          Beq     EA_IMM_BYTE             ; Add immediate byte for EA
000012CC                           504          
000012CC  4E75                     505          Rts
000012CE                           506          
000012CE                           507  ;================================================;        
000012CE                           508  ;-------------------- EA Bra --------------------;
000012CE                           509  ;================================================;
000012CE                           510  EA_BRA
000012CE  4EB9 000015D6            511          Jsr     GET0TO7
000012D4                           512          
000012D4  B03C 0000                513          Cmp.B   #0, D0
000012D8  6700 0006                514          Beq     EA_BRA_16_BIT
000012DC                           515          
000012DC  4400                     516          Neg.B   D0
000012DE                           517          ;Add.B   #$30, D0
000012DE  1CC0                     518          Move.B  D0, (A6)+
000012E0                           519  
000012E0                           520          ; <Next instruction>
000012E0                           521  
000012E0                           522  EA_BRA_16_BIT
000012E0  301B                     523          Move.W  (A3)+, D0
000012E2                           524      
000012E2  0640 0030                525          Add.W   #$30, D0
000012E6                           526  
000012E6  3CC0                     527          Move.W  D0, (A6)+
000012E8                           528  
000012E8                           529          ; <Next instruction>   
000012E8                           530                 
000012E8                           531  ;==========================================;        
000012E8                           532  ;---------- General EA functions ----------;
000012E8                           533  ;==========================================;
000012E8                           534  EA_DN   ; Adds Dn EA to string
000012E8  1CFC 0044                535          Move.B  #'D', (A6)+             
000012EC  0600 0030                536          Add.B   #$30, D0        
000012F0  1CC0                     537          Move.B  D0, (A6)+               
000012F2                           538                  
000012F2  4E75                     539          Rts
000012F4                           540  
000012F4                           541  EA_AN   ; Adds An EA to string
000012F4  1CFC 0041                542          Move.B  #'A', (A6)+
000012F8  0600 0030                543          Add.B   #$30, D0    
000012FC  1CC0                     544          Move.B  D0, (A6)+               
000012FE                           545                  
000012FE  4E75                     546          Rts
00001300                           547  
00001300                           548  EA_AN_PNTR  ; Adds (An) EA to string
00001300  1CFC 0028                549          Move.B  #'(', (A6)+
00001304  1CFC 0041                550          Move.B  #'A', (A6)+
00001308  0600 0030                551          Add.B   #$30, D0
0000130C  1CC0                     552          Move.B  D0, (A6)+
0000130E  1CFC 0029                553          Move.B  #')', (A6)+
00001312                           554                  
00001312  4E75                     555          Rts
00001314                           556          
00001314                           557  EA_AN_INC   ; Adds (An)+ EA to string
00001314  1CFC 0028                558          Move.B  #'(', (A6)+
00001318  1CFC 0041                559          Move.B  #'A', (A6)+
0000131C  0600 0030                560          Add.B   #$30, D0
00001320  1CC0                     561          Move.B  D0, (A6)+
00001322  1CFC 0029                562          Move.B  #')', (A6)+
00001326  1CFC 002B                563          Move.B  #'+', (A6)+
0000132A                           564                  
0000132A  4E75                     565          Rts 
0000132C                           566          
0000132C                           567  EA_AN_DEC   ; Adds -(An) EA to string
0000132C  1CFC 002D                568          Move.B  #'-', (A6)+
00001330  1CFC 0028                569          Move.B  #'(', (A6)+
00001334  1CFC 0041                570          Move.B  #'A', (A6)+
00001338  0600 0030                571          Add.B   #$30, D0
0000133C  1CC0                     572          Move.B  D0, (A6)+
0000133E  1CFC 0029                573          Move.B  #')', (A6)+
00001342                           574                  
00001342  4E75                     575          Rts 
00001344                           576  
00001344                           577  EA_WORD_ADDR    ; Adds $Word to string
00001344  3C1B                     578          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
00001346                           579          
00001346  1CFC 0024                580          Move.B  #'$', (A6)+
0000134A                           581          
0000134A  BC7C 8000                582          Cmp.W   #$8000, D6          ; Word address is less than 8000
0000134E  6E00 000C                583          Bgt     EA_SIGN_EXT_16
00001352                           584          
00001352  BC7C 8000                585          Cmp.W   #$8000, D6          ; Word address is greater than 8000
00001356  6F00 001C                586          Ble     EA_SIGN_EXT_32
0000135A                           587          
0000135A  4E75                     588          Rts
0000135C                           589                  
0000135C                           590  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
0000135C  1CFC 0030                591          Move.B  #'0', (A6)+
00001360  1CFC 0030                592          Move.B  #'0', (A6)+
00001364  1CFC 0030                593          Move.B  #'0', (A6)+
00001368  1CFC 0030                594          Move.B  #'0', (A6)+
0000136C                           595          
0000136C  4EB9 0000138C            596          Jsr     EA_WORD_TO_STRING       
00001372                           597          
00001372  4E75                     598          Rts
00001374                           599  
00001374                           600  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
00001374  1CFC 0046                601          Move.B  #'F', (A6)+
00001378  1CFC 0046                602          Move.B  #'F', (A6)+
0000137C  1CFC 0046                603          Move.B  #'F', (A6)+
00001380  1CFC 0046                604          Move.B  #'F', (A6)+
00001384                           605          
00001384  4EB9 0000138C            606          Jsr     EA_WORD_TO_STRING   
0000138A                           607          
0000138A  4E75                     608          Rts
0000138C                           609          
0000138C                           610  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
0000138C  4280                     611          Clr.L   D0              ; Clear D0
0000138E  3006                     612          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
00001390                           613  
00001390  123C 000C                614          Move.B  #12, D1         ; Grab bits 12 to 15
00001394  E268                     615          Lsr     D1, D0
00001396  0600 0030                616          Add.B   #$30, D0
0000139A  1CC0                     617          Move.B  D0, (A6)+
0000139C                           618          
0000139C  4280                     619          Clr.L   D0
0000139E  3006                     620          Move.W  D6, D0
000013A0                           621          
000013A0  123C 0004                622          Move.B  #4, D1          ; Grab bits 8 to 11
000013A4  E368                     623          Lsl     D1, D0
000013A6  123C 000C                624          Move.B  #12, D1
000013AA  E268                     625          Lsr     D1, D0  
000013AC  0600 0030                626          Add.B   #$30, D0
000013B0  1CC0                     627          Move.B  D0, (A6)+
000013B2                           628          
000013B2  4280                     629          Clr.L   D0
000013B4  3006                     630          Move.W  D6, D0
000013B6                           631          
000013B6  123C 0008                632          Move.B  #8, D1          ; Grab bits 4 to 7
000013BA  E368                     633          Lsl     D1, D0
000013BC  123C 000C                634          Move.B  #12, D1
000013C0  E268                     635          Lsr     D1, D0
000013C2  0600 0030                636          Add.B   #$30, D0
000013C6  1CC0                     637          Move.B  D0, (A6)+
000013C8                           638          
000013C8  4280                     639          Clr.L   D0
000013CA  3006                     640          Move.W  D6, D0
000013CC                           641          
000013CC  123C 000C                642          Move.B  #12, D1         ; Grab bits 0 to 3
000013D0  E368                     643          Lsl     D1, D0
000013D2  123C 000C                644          Move.B  #12, D1
000013D6  E268                     645          Lsr     D1, D0
000013D8  0600 0030                646          Add.B   #$30, D0
000013DC  1CC0                     647          Move.B  D0, (A6)+
000013DE                           648          
000013DE  4E75                     649          Rts
000013E0                           650          
000013E0                           651  EA_LONG_ADDR    ; Adds $Long to string
000013E0  2C1B                     652          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000013E2                           653          
000013E2  1CFC 0024                654          Move.B  #'$', (A6)+
000013E6                           655          
000013E6  4EB9 000013EE            656          Jsr     EA_LONG_TO_STRING
000013EC                           657  
000013EC  4E75                     658          Rts
000013EE                           659                  
000013EE                           660  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
000013EE  4280                     661          Clr.L   D0              ; Clear D0
000013F0  2006                     662          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
000013F2                           663  
000013F2  123C 001C                664          Move.B  #28, D1         ; Grab bits 28 to 31
000013F6  E2A8                     665          Lsr.L   D1, D0
000013F8  0600 0030                666          Add.B   #$30, D0
000013FC  1CC0                     667          Move.B  D0, (A6)+
000013FE                           668          
000013FE  4280                     669          Clr.L   D0             
00001400  2006                     670          Move.L  D6, D0          
00001402                           671          
00001402  123C 0004                672          Move.B  #4, D1          ; Grab bits 24 to 27
00001406  E3A8                     673          Lsl.L   D1, D0
00001408  123C 001C                674          Move.B  #28, D1
0000140C  E2A8                     675          Lsr.L   D1, D0
0000140E  0600 0030                676          Add.B   #$30, D0
00001412  1CC0                     677          Move.B  D0, (A6)+
00001414                           678          
00001414  4280                     679          Clr.L   D0             
00001416  2006                     680          Move.L  D6, D0
00001418                           681  
00001418  123C 0008                682          Move.B  #8, D1          ; Grab bits 20 to 23
0000141C  E3A8                     683          Lsl.L   D1, D0
0000141E  123C 001C                684          Move.B  #28, D1
00001422  E2A8                     685          Lsr.L   D1, D0
00001424  0600 0030                686          Add.B   #$30, D0
00001428  1CC0                     687          Move.B  D0, (A6)+
0000142A                           688          
0000142A  4280                     689          Clr.L   D0             
0000142C  2006                     690          Move.L  D6, D0
0000142E                           691  
0000142E  123C 000C                692          Move.B  #12, D1         ; Grab bits 16 to 19
00001432  E3A8                     693          Lsl.L   D1, D0
00001434  123C 001C                694          Move.B  #28, D1
00001438  E2A8                     695          Lsr.L   D1, D0
0000143A  0600 0030                696          Add.B   #$30, D0
0000143E  1CC0                     697          Move.B  D0, (A6)+
00001440                           698          
00001440  4280                     699          Clr.L   D0             
00001442  2006                     700          Move.L  D6, D0
00001444                           701  
00001444  123C 0010                702          Move.B  #16, D1         ; Grab bits 12 to 15
00001448  E3A8                     703          Lsl.L   D1, D0
0000144A  123C 001C                704          Move.B  #28, D1
0000144E  E2A8                     705          Lsr.L   D1, D0
00001450  0600 0030                706          Add.B   #$30, D0
00001454  1CC0                     707          Move.B  D0, (A6)+
00001456                           708          
00001456  4280                     709          Clr.L   D0             
00001458  2006                     710          Move.L  D6, D0
0000145A                           711          
0000145A  123C 0014                712          Move.B  #20, D1         ; Grab bits 8 to 11
0000145E  E3A8                     713          Lsl.L   D1, D0
00001460  123C 001C                714          Move.B  #28, D1
00001464  E2A8                     715          Lsr.L   D1, D0
00001466  0600 0030                716          Add.B   #$30, D0
0000146A  1CC0                     717          Move.B  D0, (A6)+
0000146C                           718          
0000146C  4280                     719          Clr.L   D0             
0000146E  2006                     720          Move.L  D6, D0
00001470                           721  
00001470  123C 0018                722          Move.B  #24, D1         ; Grab bits 4 to 7
00001474  E3A8                     723          Lsl.L   D1, D0
00001476  123C 001C                724          Move.B  #28, D1
0000147A  E2A8                     725          Lsr.L   D1, D0
0000147C  0600 0030                726          Add.B   #$30, D0
00001480  1CC0                     727          Move.B  D0, (A6)+
00001482                           728          
00001482  4280                     729          Clr.L   D0             
00001484  2006                     730          Move.L  D6, D0
00001486                           731  
00001486  123C 001C                732          Move.B  #28, D1         ; Grab bits 0 to 3
0000148A  E3A8                     733          Lsl.L   D1, D0
0000148C  123C 001C                734          Move.B  #28, D1
00001490  E2A8                     735          Lsr.L   D1, D0
00001492  0600 0030                736          Add.B   #$30, D0
00001496  1CC0                     737          Move.B  D0, (A6)+
00001498                           738          
00001498  4E75                     739          Rts
0000149A                           740          
0000149A                           741  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
0000149A  4280                     742          Clr.L   D0              ; Clear D0
0000149C  2006                     743          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
0000149E                           744  
0000149E  123C 0004                745          Move.B  #4, D1          ; Grab bits 4 to 7
000014A2  E228                     746          Lsr.B   D1, D0
000014A4  0600 0030                747          Add.B   #$30, D0
000014A8  1CC0                     748          Move.B  D0, (A6)+
000014AA                           749          
000014AA  4280                     750          Clr.L   D0             
000014AC  2006                     751          Move.L  D6, D0          
000014AE                           752          
000014AE  123C 0004                753          Move.B  #4, D1          ; Grab bits 0 to 3
000014B2  E328                     754          Lsl.B   D1, D0
000014B4  123C 0004                755          Move.B  #4, D1
000014B8  E228                     756          Lsr.B   D1, D0
000014BA  0600 0030                757          Add.B   #$30, D0
000014BE  1CC0                     758          Move.B  D0, (A6)+
000014C0                           759          
000014C0  4E75                     760          Rts
000014C2                           761  
000014C2                           762  EA_IMM_BYTE ; Finds the immediate byte data
000014C2  1C1B                     763          Move.B  (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
000014C4                           764          
000014C4  1CFC 0023                765          Move.B  #'#', (A6)+         
000014C8  1CFC 0024                766          Move.B  #'$', (A6)+         
000014CC                           767          
000014CC  4EB8 149A                768          Jsr     EA_BYTE_TO_STRING    ; Add the byte to the string
000014D0                           769          
000014D0  4E75                     770          Rts
000014D2                           771                  
000014D2                           772  EA_IMM_WORD ; Finds the immediate word data
000014D2  3C1B                     773          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
000014D4                           774          
000014D4  1CFC 0023                775          Move.B  #'#', (A6)+         
000014D8  1CFC 0024                776          Move.B  #'$', (A6)+         
000014DC                           777          
000014DC  4EB8 138C                778          Jsr     EA_WORD_TO_STRING    ; Add the word to the string
000014E0                           779          
000014E0  4E75                     780          Rts
000014E2                           781          
000014E2                           782  EA_IMM_LONG ; Finds the immediate long data
000014E2  2C1B                     783          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
000014E4                           784          
000014E4  1CFC 0023                785          Move.B  #'#', (A6)+
000014E8  1CFC 0024                786          Move.B  #'$', (A6)+
000014EC                           787          
000014EC  4EB8 13EE                788          Jsr     EA_LONG_TO_STRING    ; Add the long to the string
000014F0                           789          
000014F0  4E75                     790          Rts
000014F2                           791          
000014F2                           792  EA_0TO5 ; Determines the EA for an EA in bits 0-5. DOES NOT HANDLE IMMEDIATE VALUES.
000014F2  4EB9 0000157C            793          Jsr     GET3TO5                 ; Get source mode
000014F8  1A00                     794          Move.B  D0, D5                  ; Move source mode to D5
000014FA  4EB9 0000158E            795          Jsr     Get0TO2                 ; Get source register
00001500                           796          
00001500                           797          ; List of valid effective addresses
00001500  BA3C 0000                798          Cmp.B   #Dn_Mode, D5            ; Dn
00001504  6700 FDE2                799          Beq     EA_DN
00001508                           800          
00001508  BA3C 0001                801          Cmp.B   #An_Mode, D5            ; An
0000150C  6700 FDE6                802          Beq     EA_AN
00001510                           803          
00001510  BA3C 0002                804          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001514  6700 FDEA                805          Beq     EA_AN_PNTR
00001518                           806          
00001518  BA3C 0003                807          Cmp.B   #An_Inc_Mode, D5        ; (An)+
0000151C  6700 FDF6                808          Beq     EA_AN_INC
00001520                           809          
00001520  BA3C 0004                810          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001524  6700 FE06                811          Beq     EA_AN_DEC
00001528                           812          
00001528                           813          ; Comparing registers at this point because modes are the same
00001528  B03C 0000                814          Cmp.B   #Word_Reg, D0           ; (xxx).W
0000152C  6700 FE16                815          Beq     EA_WORD_ADDR
00001530                           816          
00001530  B03C 0001                817          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001534  6700 FEAA                818          Beq     EA_LONG_ADDR
00001538                           819          
00001538  4E75                     820          Rts
0000153A                           821          
0000153A                           822  ;===========================================================;       
0000153A                           823  ;---------------- Bit Chopping Sub Routines ----------------;
0000153A                           824  ; These Sub Routines Chop a WORD size piece of data from
0000153A                           825  ; Data register 4 into a smaller piece, leaving just the
0000153A                           826  ; Piece in register 0 while leaving the original piece
0000153A                           827  ; of data intact.
0000153A                           828  ;===========================================================;
0000153A                           829  GET12TO15
0000153A  4280                     830          CLR.L   D0
0000153C  3004                     831          Move.W  D4, D0
0000153E                           832                  
0000153E  123C 000C                833          Move.B  #12, D1
00001542  E268                     834          LSR     D1, D0
00001544                           835                  
00001544  4E75                     836          RTS
00001546                           837  
00001546                           838  GET12TO13
00001546  4280                     839          CLR.L   D0
00001548  3004                     840          Move.W  D4, D0
0000154A                           841          
0000154A  123C 0002                842          Move.B  #2, D1
0000154E  E368                     843          LSL     D1, D0
00001550                           844          
00001550  123C 000E                845          Move.B  #14, D1
00001554  E268                     846          LSR     D1, D0
00001556                           847          
00001556  4E75                     848          RTS
00001558                           849                  
00001558                           850  GET9TO11        
00001558  4280                     851          CLR.L   D0
0000155A  3004                     852          Move.W  D4, D0
0000155C                           853                  
0000155C  123C 0004                854          Move.B  #4, D1
00001560  E368                     855          LSL     D1, D0
00001562                           856                  
00001562  123C 000D                857          Move.B  #13, D1
00001566  E268                     858          LSR     D1, D0
00001568                           859                  
00001568  4E75                     860          RTS
0000156A                           861                  
0000156A                           862  GET6TO8 
0000156A  4280                     863          CLR.L   D0
0000156C  3004                     864          Move.W  D4, D0
0000156E                           865                  
0000156E  123C 0007                866          Move.B  #7, D1
00001572  E368                     867          LSL     D1, D0
00001574                           868                  
00001574  123C 000D                869          Move.B  #13, D1
00001578  E268                     870          LSR     D1, D0
0000157A                           871                  
0000157A  4E75                     872          RTS
0000157C                           873                  
0000157C                           874  GET3TO5 
0000157C  4280                     875          CLR.L   D0
0000157E  3004                     876          Move.W  D4, D0
00001580                           877                  
00001580  123C 000A                878          Move.B  #10, D1
00001584  E368                     879          LSL     D1, D0
00001586                           880                  
00001586  123C 000D                881          Move.B  #13, D1
0000158A  E268                     882          LSR     D1, D0
0000158C                           883                  
0000158C  4E75                     884          RTS
0000158E                           885  GET0TO2 
0000158E  4280                     886          CLR.L   D0
00001590  3004                     887          Move.W  D4, D0
00001592                           888                  
00001592  123C 000D                889          Move.B  #13, D1
00001596  E368                     890          LSL     D1, D0
00001598                           891                  
00001598  123C 000D                892          Move.B  #13, D1
0000159C  E268                     893          LSR     D1, D0
0000159E                           894                  
0000159E  4E75                     895          RTS
000015A0                           896  GETBIT8
000015A0  4280                     897          CLR.L   D0
000015A2  3004                     898          Move.W  D4, D0
000015A4                           899                  
000015A4  123C 0007                900          Move.B  #7, D1
000015A8  E368                     901          LSL     D1, D0
000015AA                           902                  
000015AA  123C 000F                903          Move.B  #15, D1
000015AE  E268                     904          LSR     D1, D0
000015B0                           905                  
000015B0  4E75                     906          RTS 
000015B2                           907          
000015B2                           908  GET6TO7
000015B2  4280                     909          Clr.L   D0
000015B4  3004                     910          Move.W  D4, D0
000015B6                           911          
000015B6  123C 0008                912          Move.B  #8, D1
000015BA  E368                     913          Lsl     D1, D0
000015BC                           914          
000015BC  123C 000E                915          Move.B  #14, D1
000015C0  E268                     916          Lsr     D1, D0
000015C2                           917          
000015C2  4E75                     918          Rts
000015C4                           919          
000015C4                           920  GETBIT5
000015C4  4280                     921          Clr.L   D0
000015C6  3004                     922          Move.W  D4, D0
000015C8                           923          
000015C8  123C 000A                924          Move.B  #10, D1
000015CC  E368                     925          Lsl     D1, D0
000015CE                           926          
000015CE  123C 000F                927          Move.B  #15, D1
000015D2  E268                     928          Lsr     D1, D0
000015D4                           929          
000015D4  4E75                     930          Rts
000015D6                           931  
000015D6                           932  GET0TO7
000015D6  4280                     933          Clr.L   D0
000015D8  3004                     934          Move.W  D4, D0
000015DA                           935          
000015DA  123C 0008                936          Move.B  #8, D1
000015DE  E368                     937          Lsl     D1, D0
000015E0                           938          
000015E0  E268                     939          Lsr     D1, D0
000015E2                           940          
000015E2  4E75                     941          Rts
000015E4                           942  
000015E4                           943      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_TEST1          5E09
ADDQ_TEST2          5009
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
BRA_TEST1           6007
BTST_TEST1          F07
BTST_TEST2          F3C
BTST_TEST3          807
DN_MODE             0
EA_0TO5             14F2
EA_ADD              109C
EA_ADDA             10D0
EA_ADDQ             1152
EA_ADDQ_CHECK_8     1162
EA_ADDQ_DEST        1186
EA_ADDQ_IMMEDIATE   117A
EA_ADD_ADDRESS      1112
EA_ADD_OPMODE_DEST  10FC
EA_ADD_OPMODE_SOURCE  10E6
EA_ADD_SIZE         1122
EA_AN               12F4
EA_AND              1198
EA_AN_DEC           132C
EA_AN_INC           1314
EA_AN_PNTR          1300
EA_BIT_SHIFT        11AE
EA_BRA              12CE
EA_BRA_16_BIT       12E0
EA_BTST             1286
EA_BTST_ADDRESS     12BA
EA_BTST_DN          129A
EA_BTST_IMM         12AC
EA_BYTE_TO_STRING   149A
EA_CMP              1190
EA_DIVS             1282
EA_DN               12E8
EA_EOR              119C
EA_IMMEDIATE        1226
EA_IMMEDIATE_DEST   1256
EA_IMMEDIATE_SIZE   1236
EA_IMM_BYTE         14C2
EA_IMM_LONG         14E2
EA_IMM_WORD         14D2
EA_JSR              11AA
EA_LEA              1194
EA_LONG_ADDR        13E0
EA_LONG_TO_STRING   13EE
EA_MOVE             1014
EA_MOVE_DEST        1034
EA_MOVE_SIZE        107C
EA_MOVE_SOURCE      1024
EA_MULS             125C
EA_MULS_ADDRESS     1272
EA_NEG              11A0
EA_NOT              11A6
EA_SHIFT_CHECK_8    11DC
EA_SHIFT_COMMA      1216
EA_SHIFT_DN         1204
EA_SHIFT_IMMEDIATE  11F4
EA_SHIFT_MEMORY     11C2
EA_SHIFT_REGISTER   11C8
EA_SIGN_EXT_16      135C
EA_SIGN_EXT_32      1374
EA_SUB              118C
EA_WORD_ADDR        1344
EA_WORD_TO_STRING   138C
GET0TO2             158E
GET0TO7             15D6
GET12TO13           1546
GET12TO15           153A
GET3TO5             157C
GET6TO7             15B2
GET6TO8             156A
GET9TO11            1558
GETBIT5             15C4
GETBIT8             15A0
IMM_MODE            7
IMM_REG             4
IMM_TEST1           41F
IMM_TEST2           479
LONG_MODE           7
LONG_REG            1
MULS_TEST1          CFFC
MULS_TEST2          CFD2
SHIFT_TEST1         E1D7
SHIFT_TEST2         E1F8
SHIFT_TEST3         EF21
SHIFT_TEST4         E507
SHIFT_TEST5         E104
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
