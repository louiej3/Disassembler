00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/27/2014 2:53:16 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L $Long,A7
00000000                            39  
00000000  =0000E1D7                 40  Shift_Test1         EQU     %1110000111010111   ; Asl (A7)
00000000  =0000E1F8                 41  Shift_Test2         EQU     %1110000111111000   ; Asl $Word
00000000  =0000EF21                 42  Shift_Test3         EQU     %1110111100100001   ; Asl.B D7,D1
00000000  =0000E507                 43  Shift_Test4         EQU     %1110010100000111   ; Asl.B #2,D7
00000000  =0000E104                 44  Shift_Test5         EQU     %1110000100000100   ; Asl.B #8,D4
00000000                            45  
00000000  =0000041F                 46  Imm_Test1           EQU     %0000010000011111   ; SubI.B #$Imm,(A7)+
00000000  =00000479                 47  Imm_Test2           EQU     %0000010001111001   ; SubI.W #$Imm,$Long
00000000                            48  
00000000  =00005E09                 49  AddQ_Test1          EQU     %0101111000001001   ; AddQ.B #7,A1
00000000  =00005009                 50  AddQ_Test2          EQU     %0101000000001001   ; AddQ.B #8,A1
00000000                            51  
00000000  =0000CFFC                 52  Muls_Test1          EQU     %1100111111111100   ; Muls.W #$Imm,D7
00000000  =0000CFD2                 53  Muls_Test2          EQU     %1100111111010010   ; Muls.W (A2),D7
00000000                            54  
00000000  =00000F07                 55  Btst_Test1          EQU     %0000111100000111   ; Btst D7,D7
00000000  =00000F3C                 56  Btst_Test2          EQU     %0000111100111100   ; Btst D7,#$Imm
00000000  =00000807                 57  Btst_Test3          EQU     %0000100000000111   ; Btst #$Byte,D7
00000000                            58          
00001000                            59      ORG    $1000
00001000                            60      
00001000                            61  START:                  ; first instruction of program
00001000  267C 00000400             62          Move.L  #$0000400, A3
00001006                            63          
00001006  36BC 0034                 64          Move.W  #$0034, (A3)
0000100A                            65          ;Move.W  #$4030, (A3)+
0000100A                            66          ;Move.L  #$12345678, (A3)
0000100A                            67          ;Sub.W   #2, A3
0000100A                            68          ;Move.L  #$12349999, (A3)
0000100A                            69          ;Move.W  #$11, (A3)
0000100A                            70          ;Move.B  #$99, (A3)
0000100A                            71          
0000100A                            72          ;Move.W  #Test_Move1, D4
0000100A                            73          ;Move.W  #Test_Move2, D4
0000100A                            74          ;Move.W  #Test_Move3, D4
0000100A                            75          ;Move.W  #Test_Move4, D4
0000100A                            76          ;Move.W  #Test_Move5, D4
0000100A                            77          ;Move.W  #Test_Move6, D4        
0000100A                            78          ;Move.W  #Test_Move7, D4        
0000100A                            79          ;Move.W  #Test_Move8, D4
0000100A                            80          
0000100A                            81          ;Move.W  #Add_Test1, D4
0000100A                            82          ;Move.W  #Add_Test2, D4
0000100A                            83          ;Move.W  #Add_Test3, D4
0000100A                            84          ;Move.W  #Add_Test4, D4
0000100A                            85          
0000100A                            86          ;Move.W  #Shift_Test1, D4
0000100A                            87          ;Move.W  #Shift_Test2, D4
0000100A                            88          ;Move.W  #Shift_Test3, D4
0000100A                            89          ;Move.W  #Shift_Test4, D4
0000100A                            90          ;Move.W  #Shift_Test5, D4
0000100A                            91          
0000100A                            92          ;Move.W  #Imm_Test1, D4
0000100A                            93          ;Move.W  #Imm_Test2, D4
0000100A                            94          
0000100A                            95          ;Move.W  #AddQ_Test1, D4
0000100A                            96          ;Move.W  #AddQ_Test2, D4
0000100A                            97          
0000100A                            98          ;Move.W  #Muls_Test1, D4
0000100A                            99          ;Move.W  #Muls_Test2, D4
0000100A                           100          
0000100A                           101          ;Move.W  #Btst_Test1, D4
0000100A                           102          ;Move.W  #Btst_Test2, D4
0000100A  383C 0807                103          Move.W  #Btst_Test3, D4
0000100E                           104                  
0000100E                           105          ;Jmp     EA_MOVE     ; Branch to EA function for Move
0000100E                           106          ;Jmp     EA_ADD
0000100E                           107          ;Jmp     EA_BIT_SHIFT
0000100E                           108          ;Jmp     EA_IMMEDIATE
0000100E                           109          ;Jmp     EA_ADDQ
0000100E                           110          ;Jmp     EA_MULS
0000100E  4EF9 00001282            111          Jmp     EA_BTST
00001014                           112  
00001014                           113  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
00001014                           114  ;-------------------- Effective Address Sub Routines --------------------;
00001014                           115  ; These subroutines look for the correct effective address
00001014                           116  ; in each OP code.
00001014                           117  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
00001014                           118  
00001014                           119  ;=============================================;
00001014                           120  ;--------------- EA Move/MoveA ---------------;
00001014                           121  ;=============================================;
00001014                           122  EA_MOVE
00001014  4EB9 00001024            123          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
0000101A  1CFC 002C                124          Move.B  #',', (A6)+             ; Add a comma
0000101E  4EB9 00001034            125          Jsr     EA_MOVE_DEST            ; Add the EA for destination
00001024                           126          
00001024                           127          ; <Next instruction>
00001024                           128                  
00001024                           129  EA_MOVE_SOURCE  ; Find out Move's source
00001024  4EB9 000014D4            130          Jsr     EA_0TO5                 ; Get the EA
0000102A                           131          
0000102A  B03C 0004                132          Cmp.B   #Imm_Reg, D0            ; #<data>
0000102E  6700 004C                133          Beq     EA_MOVE_SIZE
00001032                           134          
00001032  4E75                     135          Rts
00001034                           136          
00001034                           137  EA_MOVE_DEST    ; Find out Move's destination
00001034  4EB9 0000154C            138          Jsr     GET6TO8                 ; Get destination mode
0000103A  1A00                     139          Move.B  D0, D5                  ; Move destination mode to D5
0000103C  4EB9 0000153A            140          Jsr     GET9TO11                ; Get destination register
00001042                           141          
00001042                           142          ; List of valid effective addresses
00001042  BA3C 0000                143          Cmp.B   #Dn_Mode, D5            ; Dn
00001046  6700 0282                144          Beq     EA_DN
0000104A                           145          
0000104A  BA3C 0001                146          Cmp.B   #An_Mode, D5            ; An
0000104E  6700 0286                147          Beq     EA_AN
00001052                           148          
00001052  BA3C 0002                149          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001056  6700 028A                150          Beq     EA_AN_PNTR
0000105A                           151          
0000105A  BA3C 0003                152          Cmp.B   #An_Inc_Mode, D5        ; (An)+
0000105E  6700 0296                153          Beq     EA_AN_INC
00001062                           154          
00001062  BA3C 0004                155          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001066  6700 02A6                156          Beq     EA_AN_DEC
0000106A                           157          
0000106A                           158          ; Comparing registers at this point because modes are the same
0000106A  B03C 0000                159          Cmp.B   #Word_Reg, D0           ; (xxx).W
0000106E  6700 02B6                160          Beq     EA_WORD_ADDR
00001072                           161          
00001072  B03C 0001                162          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001076  6700 034A                163          Beq     EA_LONG_ADDR
0000107A                           164          
0000107A  4E75                     165          Rts
0000107C                           166          
0000107C                           167  EA_MOVE_SIZE    ; Find the size of immediate data being moved
0000107C  4EB9 00001528            168          Jsr     GET12TO13               ; Get Move size
00001082                           169  
00001082  B03C 0001                170          Cmp.B   #%01, D0                ; Byte
00001086  6700 041C                171          Beq     EA_IMM_BYTE
0000108A                           172  
0000108A  B03C 0003                173          Cmp.B   #%11, D0                ; Word
0000108E  6700 0424                174          Beq     EA_IMM_WORD
00001092                           175          
00001092  B03C 0002                176          Cmp.B   #%10, D0                ; Long
00001096  6700 042C                177          Beq     EA_IMM_LONG
0000109A                           178          
0000109A  4E75                     179          Rts
0000109C                           180  
0000109C                           181  ;===========================================;        
0000109C                           182  ;--------------- EA Add/AddA ---------------;
0000109C                           183  ;===========================================;       
0000109C                           184  EA_ADD  ; Figures out the EA for Add        
0000109C  4EB9 0000154C            185          Jsr     GET6TO8                 ; Isolate the Op mode
000010A2                           186          
000010A2  B03C 0003                187          Cmp.B   #%011, D0               ; Compare to AddA word
000010A6  6700 0028                188          Beq     EA_ADDA
000010AA                           189          
000010AA  B03C 0007                190          Cmp.B   #%111, D0               ; Compare to AddA long
000010AE  6700 0020                191          Beq     EA_ADDA
000010B2                           192  
000010B2  B03C 0000                193          Cmp.B   #%000, D0               ; Compare to Add source byte
000010B6  6700 002E                194          Beq     EA_ADD_OPMODE_SOURCE
000010BA                           195          
000010BA  B03C 0001                196          Cmp.B   #%001, D0               ; Compare to Add source word
000010BE  6700 0026                197          Beq     EA_ADD_OPMODE_SOURCE
000010C2                           198          
000010C2  B03C 0002                199          Cmp.B   #%010, D0               ; Compare to Add source Long
000010C6  6700 001E                200          Beq     EA_ADD_OPMODE_SOURCE
000010CA                           201          
000010CA  4EF9 000010FC            202          Jmp     EA_ADD_OPMODE_DEST      ; Must be an Add destination if none of the above
000010D0                           203          
000010D0                           204  EA_ADDA ; Figures out the EA for AddA
000010D0  4EB9 00001112            205          Jsr     EA_ADD_ADDRESS          ; Get the source EA
000010D6  1CFC 002C                206          Move.B  #',', (A6)+             ; Add a comma
000010DA  4EB9 0000153A            207          Jsr     GET9TO11                ; Get the register
000010E0  4EB9 000012D6            208          Jsr     EA_AN                   ; Add An
000010E6                           209          
000010E6                           210          ; <Next instruction>
000010E6                           211          
000010E6                           212  EA_ADD_OPMODE_SOURCE    ; Finds the EA for Add if it is for the source
000010E6  4EB9 00001112            213          Jsr     EA_ADD_ADDRESS          ; Get the source EA
000010EC  1CFC 002C                214          Move.B  #',', (A6)+             ; Add a comma
000010F0  4EB9 0000153A            215          Jsr     GET9TO11                ; Get the register
000010F6  4EB9 000012CA            216          Jsr     EA_DN                   ; Add Dn
000010FC                           217          
000010FC                           218          ; <Next instruction>
000010FC                           219          
000010FC                           220  EA_ADD_OPMODE_DEST      ; Finds the EA for Add if it is for the destination
000010FC  4EB9 0000153A            221          Jsr     GET9TO11                ; Get the register
00001102  4EB9 000012CA            222          Jsr     EA_DN                   ; Add Dn
00001108  1CFC 002C                223          Move.B  #',', (A6)+             ; Add a comma
0000110C  4EB9 00001112            224          Jsr     EA_ADD_ADDRESS          ; Get the destination EA 
00001112                           225          
00001112                           226          ; <Next instruction>
00001112                           227          
00001112                           228  EA_ADD_ADDRESS
00001112  4EB9 000014D4            229          Jsr     EA_0TO5                 ; Check for all EA except #<data>
00001118                           230          
00001118  B03C 0004                231          Cmp.B   #Imm_Reg, D0            ; #<data>
0000111C  6700 0004                232          Beq     EA_ADD_SIZE
00001120                           233  
00001120  4E75                     234          Rts
00001122                           235          
00001122                           236  EA_ADD_SIZE ; Find the size of immediate data being moved
00001122  4EB9 0000154C            237          Jsr     GET6TO8                 ; Get Move size
00001128                           238  
00001128  B03C 0000                239          Cmp.B   #%000, D0               ; Byte
0000112C  6700 0376                240          Beq     EA_IMM_BYTE
00001130                           241  
00001130  B03C 0001                242          Cmp.B   #%001, D0               ; Word
00001134  6700 037E                243          Beq     EA_IMM_WORD
00001138                           244          
00001138  B03C 0002                245          Cmp.B   #%010, D0               ; Long
0000113C  6700 0386                246          Beq     EA_IMM_LONG
00001140                           247          
00001140  B03C 0003                248          Cmp.B   #%011, D0               ; AddA Word
00001144  6700 036E                249          Beq     EA_IMM_WORD
00001148                           250     
00001148  B03C 0007                251          Cmp.B   #%111, D0               ; AddA Long
0000114C  6700 0376                252          Beq     EA_IMM_LONG
00001150                           253          
00001150  4E75                     254          Rts
00001152                           255          
00001152                           256  ;=================================================;        
00001152                           257  ;-------------------- EA AddQ --------------------;
00001152                           258  ;=================================================;
00001152                           259  EA_ADDQ ; Figures out the EA for AddQ
00001152  4EB9 00001162            260          Jsr     EA_ADDQ_CHECK_8         ; Get the immediate value
00001158  1CFC 002C                261          Move.B  #',', (A6)+             ; Add a comma
0000115C  4EB9 00001186            262          Jsr     EA_ADDQ_DEST            ; Add the destination
00001162                           263  
00001162                           264  EA_ADDQ_CHECK_8 ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001162  4EB9 0000153A            265          Jsr     GET9TO11                ; Isolate the count/register bits
00001168                           266          
00001168  B03C 0000                267          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
0000116C  6E00 000C                268          Bgt     EA_ADDQ_IMMEDIATE
00001170                           269          
00001170  103C 0008                270          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001174                           271          
00001174  4EF9 0000117A            272          Jmp     EA_ADDQ_IMMEDIATE
0000117A                           273          
0000117A                           274  EA_ADDQ_IMMEDIATE   ; Adds an immediate value before the comma
0000117A  1CFC 0023                275          Move.B  #'#', (A6)+
0000117E  0600 0030                276          Add.B   #$30, D0
00001182  1CC0                     277          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001184                           278          
00001184  4E75                     279          Rts
00001186                           280          
00001186                           281  EA_ADDQ_DEST    ; Determines the destination       
00001186  4EB9 000014D4            282          Jsr     EA_0TO5                 ; Check for all EA except #<data>
0000118C                           283          
0000118C                           284  ;=========================================================;        
0000118C                           285  ;---------------------- EA Sub/SubA ----------------------;
0000118C                           286  ; Jumps straight to EA_ADD because the EA for Add/AddA and
0000118C                           287  ; Sub/SubA are exactly the same.
0000118C                           288  ;=========================================================;
0000118C                           289  EA_SUB
0000118C  4EF8 109C                290          Jmp     EA_ADD
00001190                           291  
00001190                           292  ;=========================================================;        
00001190                           293  ;---------------------- EA Cmp/CmpA ----------------------;
00001190                           294  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001190                           295  ; Cmp/CmpA are exactly the same.
00001190                           296  ;=========================================================;
00001190                           297  EA_CMP       
00001190  4EF8 109C                298          Jmp     EA_ADD
00001194                           299          
00001194                           300  ;=========================================================;        
00001194                           301  ;------------------------ EA Lea -------------------------;
00001194                           302  ; Jumps straight to EA_ADD because the EA for AddA and Lea
00001194                           303  ; are exactly the same.
00001194                           304  ;=========================================================;
00001194                           305  EA_LEA
00001194  4EF8 109C                306          Jmp     EA_ADD
00001198                           307          
00001198                           308  ;=========================================================;        
00001198                           309  ;------------------------ EA And -------------------------;
00001198                           310  ; Jumps straight to EA_ADD because the EA for Add and And
00001198                           311  ; are exactly the same.
00001198                           312  ;=========================================================;
00001198                           313  EA_AND
00001198  4EF8 109C                314          Jmp     EA_ADD
0000119C                           315          
0000119C                           316  ;=========================================================;        
0000119C                           317  ;------------------------ EA Eor -------------------------;
0000119C                           318  ; Jumps straight to EA_ADD because the EA for Add and Eor
0000119C                           319  ; are exactly the same.
0000119C                           320  ;=========================================================;
0000119C                           321  EA_EOR
0000119C  4EF8 109C                322          Jmp     EA_ADD
000011A0                           323          
000011A0                           324  ;=========================================================;        
000011A0                           325  ;------------------------ EA Neg -------------------------;
000011A0                           326  ;=========================================================;
000011A0                           327  EA_NEG
000011A0  4EB9 000014D4            328          Jsr     EA_0TO5                 ; Check for all EA except #<data>
000011A6                           329          
000011A6                           330          ; <Next instruction>
000011A6                           331          
000011A6                           332  ;=========================================================;        
000011A6                           333  ;------------------------ EA Not -------------------------;
000011A6                           334  ; Jumps straight to EA_NEG because Neg and Not have the
000011A6                           335  ; exact same EAs. 
000011A6                           336  ;=========================================================;
000011A6                           337  EA_NOT
000011A6  4EF8 11A0                338          Jmp     EA_NEG 
000011AA                           339  
000011AA                           340  ;=========================================================;
000011AA                           341  ;--------------------- EA Bit Shift ----------------------;
000011AA                           342  ; Finds the EA for ASd, LSd, ROd. All of these OP codes
000011AA                           343  ; are combined because the EA for each code is exactly the
000011AA                           344  ; same.
000011AA                           345  ;=========================================================;
000011AA                           346  EA_BIT_SHIFT    ; Figures out the EA for bit shift functions
000011AA  4EB9 00001594            347          Jsr     GET6TO7
000011B0                           348          
000011B0  B03C 0003                349          Cmp.B   #%11, D0                ; If bits 6 and 7 are not %11, then we are shifting a register
000011B4  6600 000E                350          Bne     EA_SHIFT_REGISTER
000011B8                           351          
000011B8  4EB9 000011BE            352          Jsr     EA_SHIFT_MEMORY         ; If bits 6 and 7 are %11, then we are shifting memory
000011BE                           353          
000011BE                           354          ; <Next instruction>
000011BE                           355                  
000011BE                           356  EA_SHIFT_MEMORY ; Adds the correct EA for a memory shift
000011BE  4EB9 000014D4            357          Jsr     EA_0TO5                 ; Check for all EA except #<data>
000011C4                           358          
000011C4                           359  EA_SHIFT_REGISTER   ; Figure out if we are shifting by #<data> or by the value in a data register
000011C4  4EB9 000015A6            360          Jsr     GETBIT5
000011CA                           361          
000011CA  B03C 0000                362          Cmp.B   #0, D0                  ; Check if bit 5 is %0
000011CE  6700 0008                363          Beq     EA_SHIFT_CHECK_8
000011D2                           364          
000011D2  4EF9 00001200            365          Jmp     EA_SHIFT_DN             ; If it's not, we are shifting from a data register
000011D8                           366          
000011D8                           367  EA_SHIFT_CHECK_8    ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
000011D8  4EB9 0000153A            368          Jsr     GET9TO11                ; Isolate the count/register bits
000011DE                           369          
000011DE  B03C 0000                370          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
000011E2  6E00 000C                371          Bgt     EA_SHIFT_IMMEDIATE
000011E6                           372          
000011E6  103C 0008                373          Move.B  #8, D0                  ; Else, use 8 as the immediate value
000011EA                           374                  
000011EA  4EF9 000011F0            375          Jmp     EA_SHIFT_IMMEDIATE
000011F0                           376          
000011F0                           377  EA_SHIFT_IMMEDIATE  ; Adds an immediate value before the comma
000011F0  1CFC 0023                378          Move.B  #'#', (A6)+
000011F4  0600 0030                379          Add.B   #$30, D0
000011F8  1CC0                     380          Move.B  D0, (A6)+               ; Add the immediate value to the string
000011FA                           381  
000011FA  4EF9 00001212            382          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it
00001200                           383          
00001200                           384  EA_SHIFT_DN ; Adds a data register before the comma
00001200  4EB9 0000153A            385          Jsr     GET9TO11                ; Isolate the data register bits
00001206                           386          
00001206  4EB9 000012CA            387          Jsr     EA_DN                   ; Add the data register to the string
0000120C                           388          
0000120C  4EF9 00001212            389          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it 
00001212                           390          
00001212                           391  EA_SHIFT_COMMA  ; Adds the comma and everything after it to the string
00001212  1CFC 002C                392          Move.B  #',', (A6)+
00001216                           393          
00001216  4EB9 00001570            394          Jsr     GET0TO2                 ; Get the register number
0000121C                           395          
0000121C  4EB9 000012CA            396          Jsr     EA_DN                   ; Add the register
00001222                           397          
00001222                           398          ; <Next instruction>
00001222                           399  
00001222                           400  ;============================================;        
00001222                           401  ;--------------- EA Immediate ---------------;
00001222                           402  ; Provides EA for SubI, OrI, EorI, and CmpI.
00001222                           403  ;============================================;
00001222                           404  EA_IMMEDIATE    ; Figures out the EA for immediate data OP codes
00001222  4EB9 00001232            405          Jsr     EA_IMMEDIATE_SIZE       ; Get the size of the immediate data and add to string
00001228  1CFC 002C                406          Move.B  #',', (A6)+             ; Add a comma
0000122C  4EB9 00001252            407          Jsr     EA_IMMEDIATE_DEST       ; Add the destination EA
00001232                           408          
00001232                           409          ; <Next instruction>
00001232                           410          
00001232                           411  EA_IMMEDIATE_SIZE   ; Determines the size of the immediate data and adds it
00001232  4EB9 00001594            412          Jsr     GET6TO7                 ; Isolate the size bits
00001238                           413                  
00001238  B03C 0001                414          Cmp.B   #%01, D0                ; Immediate word
0000123C  6700 0276                415          Beq     EA_IMM_WORD
00001240                           416          
00001240  B03C 0002                417          Cmp.B   #%10, D0                ; Immediate long
00001244  6700 027E                418          Beq     EA_IMM_LONG
00001248                           419          
00001248  524B                     420          AddA.W  #1, A3                  ; Else, move the pointer forward by a byte to get the next byte
0000124A  4EF9 000014A4            421          Jmp     EA_IMM_BYTE
00001250                           422  
00001250  4E75                     423          Rts
00001252                           424          
00001252                           425  EA_IMMEDIATE_DEST   ; Determines the destination EA
00001252  4EB9 000014D4            426          Jsr     EA_0TO5                 ; Check for all EA except #<data>
00001258                           427        
00001258                           428  ;=================================================;  
00001258                           429  ;-------------------- EA Muls --------------------;
00001258                           430  ;=================================================;
00001258                           431  EA_MULS ; Determines the EA for Muls
00001258  4EB9 0000126E            432          Jsr     EA_MULS_ADDRESS         ; Get the EA
0000125E  1CFC 002C                433          Move.B  #',', (A6)+             ; Add a comma
00001262  4EB9 0000153A            434          Jsr     GET9TO11                ; Get the register
00001268  4EB9 000012CA            435          Jsr     EA_DN                   ; Add Dn
0000126E                           436          
0000126E                           437          ; <Next instruction>
0000126E                           438          
0000126E                           439  EA_MULS_ADDRESS ; Determines the EA
0000126E  4EB9 000014D4            440          Jsr     EA_0TO5                 ; Check for all EA except #<data>
00001274                           441          
00001274  B03C 0004                442          Cmp.B   #Imm_Reg, D0            ; Check for #<data>
00001278  6700 023A                443          Beq     EA_IMM_WORD
0000127C                           444          
0000127C  4E75                     445          Rts
0000127E                           446          
0000127E                           447  ;=================================================;  
0000127E                           448  ;-------------------- EA DIVS --------------------;
0000127E                           449  ; Jumps straight to EA_DIVS because the EA for
0000127E                           450  ; both OP codes is exactly the same.
0000127E                           451  ;=================================================;
0000127E                           452  EA_DIVS
0000127E  4EF8 1258                453          Jmp     EA_MULS
00001282                           454          
00001282                           455  ;=================================================;        
00001282                           456  ;-------------------- EA BTST --------------------;
00001282                           457  ;=================================================;
00001282                           458  EA_BTST ; Determines the EA for Btst
00001282  4EB9 00001582            459          Jsr     GETBIT8                 ; Use bit 8 to determine if the bit number is immediate or a data register
00001288                           460          
00001288  B03C 0001                461          Cmp.B   #%1, D0                 ; 1 is a data register
0000128C  6700 0008                462          Beq     EA_BTST_DN
00001290                           463          
00001290  4EF9 000012A8            464          Jmp     EA_BTST_IMM             ; Else (0), the bit number is immediate data
00001296                           465          
00001296                           466  EA_BTST_DN  ; Gets the register for the bit number
00001296  4EB9 0000153A            467          Jsr     GET9TO11                ; Get the register
0000129C  4EB9 000012CA            468          Jsr     EA_DN                   ; Add the register to the string
000012A2                           469          
000012A2  4EB9 000012B6            470          Jsr     EA_BTST_ADDRESS         ; Add the EA
000012A8                           471          
000012A8                           472          ; <Next instruction>
000012A8                           473  
000012A8                           474  EA_BTST_IMM ; Gets the immediate data for the bit number
000012A8  524B                     475          AddA.W  #1, A3                  ; Move the pointer forward by a byte to get the next byte
000012AA  4EB9 000014A4            476          Jsr     EA_IMM_BYTE             ; Add the bit number as an immediate hex byte
000012B0                           477          
000012B0  4EB9 000012B6            478          Jsr     EA_BTST_ADDRESS         ; Add the register to the string
000012B6                           479          
000012B6                           480          ; <Next instruction>
000012B6                           481  
000012B6                           482  EA_BTST_ADDRESS ; Get the EA
000012B6  1CFC 002C                483          Move.B  #',', (A6)+
000012BA                           484  
000012BA  4EB9 000014D4            485          Jsr     EA_0TO5                 ; Check the EA for everything but #<data>
000012C0                           486          
000012C0  B03C 0004                487          Cmp.B   #Imm_Reg, D0            ; Check if the EA is #<data>
000012C4  6700 01DE                488          Beq     EA_IMM_BYTE             ; Add immediate byte for EA
000012C8                           489          
000012C8  4E75                     490          Rts
000012CA                           491                 
000012CA                           492  ;==========================================;        
000012CA                           493  ;---------- General EA functions ----------;
000012CA                           494  ;==========================================;
000012CA                           495  EA_DN   ; Adds Dn EA to string
000012CA  1CFC 0044                496          Move.B  #'D', (A6)+             
000012CE  0600 0030                497          Add.B   #$30, D0        
000012D2  1CC0                     498          Move.B  D0, (A6)+               
000012D4                           499                  
000012D4  4E75                     500          Rts
000012D6                           501  
000012D6                           502  EA_AN   ; Adds An EA to string
000012D6  1CFC 0041                503          Move.B  #'A', (A6)+
000012DA  0600 0030                504          Add.B   #$30, D0    
000012DE  1CC0                     505          Move.B  D0, (A6)+               
000012E0                           506                  
000012E0  4E75                     507          Rts
000012E2                           508  
000012E2                           509  EA_AN_PNTR  ; Adds (An) EA to string
000012E2  1CFC 0028                510          Move.B  #'(', (A6)+
000012E6  1CFC 0041                511          Move.B  #'A', (A6)+
000012EA  0600 0030                512          Add.B   #$30, D0
000012EE  1CC0                     513          Move.B  D0, (A6)+
000012F0  1CFC 0029                514          Move.B  #')', (A6)+
000012F4                           515                  
000012F4  4E75                     516          Rts
000012F6                           517          
000012F6                           518  EA_AN_INC   ; Adds (An)+ EA to string
000012F6  1CFC 0028                519          Move.B  #'(', (A6)+
000012FA  1CFC 0041                520          Move.B  #'A', (A6)+
000012FE  0600 0030                521          Add.B   #$30, D0
00001302  1CC0                     522          Move.B  D0, (A6)+
00001304  1CFC 0029                523          Move.B  #')', (A6)+
00001308  1CFC 002B                524          Move.B  #'+', (A6)+
0000130C                           525                  
0000130C  4E75                     526          Rts 
0000130E                           527          
0000130E                           528  EA_AN_DEC   ; Adds -(An) EA to string
0000130E  1CFC 002D                529          Move.B  #'-', (A6)+
00001312  1CFC 0028                530          Move.B  #'(', (A6)+
00001316  1CFC 0041                531          Move.B  #'A', (A6)+
0000131A  0600 0030                532          Add.B   #$30, D0
0000131E  1CC0                     533          Move.B  D0, (A6)+
00001320  1CFC 0029                534          Move.B  #')', (A6)+
00001324                           535                  
00001324  4E75                     536          Rts 
00001326                           537  
00001326                           538  EA_WORD_ADDR    ; Adds $Word to string
00001326  3C1B                     539          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
00001328                           540          
00001328  1CFC 0024                541          Move.B  #'$', (A6)+
0000132C                           542          
0000132C  BC7C 8000                543          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001330  6E00 000C                544          Bgt     EA_SIGN_EXT_16
00001334                           545          
00001334  BC7C 8000                546          Cmp.W   #$8000, D6          ; Word address is greater than 8000
00001338  6F00 001C                547          Ble     EA_SIGN_EXT_32
0000133C                           548          
0000133C  4E75                     549          Rts
0000133E                           550                  
0000133E                           551  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
0000133E  1CFC 0030                552          Move.B  #'0', (A6)+
00001342  1CFC 0030                553          Move.B  #'0', (A6)+
00001346  1CFC 0030                554          Move.B  #'0', (A6)+
0000134A  1CFC 0030                555          Move.B  #'0', (A6)+
0000134E                           556          
0000134E  4EB9 0000136E            557          Jsr     EA_WORD_TO_STRING       
00001354                           558          
00001354  4E75                     559          Rts
00001356                           560  
00001356                           561  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
00001356  1CFC 0046                562          Move.B  #'F', (A6)+
0000135A  1CFC 0046                563          Move.B  #'F', (A6)+
0000135E  1CFC 0046                564          Move.B  #'F', (A6)+
00001362  1CFC 0046                565          Move.B  #'F', (A6)+
00001366                           566          
00001366  4EB9 0000136E            567          Jsr     EA_WORD_TO_STRING   
0000136C                           568          
0000136C  4E75                     569          Rts
0000136E                           570          
0000136E                           571  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
0000136E  4280                     572          Clr.L   D0              ; Clear D0
00001370  3006                     573          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
00001372                           574  
00001372  123C 000C                575          Move.B  #12, D1         ; Grab bits 12 to 15
00001376  E268                     576          Lsr     D1, D0
00001378  0600 0030                577          Add.B   #$30, D0
0000137C  1CC0                     578          Move.B  D0, (A6)+
0000137E                           579          
0000137E  4280                     580          Clr.L   D0
00001380  3006                     581          Move.W  D6, D0
00001382                           582          
00001382  123C 0004                583          Move.B  #4, D1          ; Grab bits 8 to 11
00001386  E368                     584          Lsl     D1, D0
00001388  123C 000C                585          Move.B  #12, D1
0000138C  E268                     586          Lsr     D1, D0  
0000138E  0600 0030                587          Add.B   #$30, D0
00001392  1CC0                     588          Move.B  D0, (A6)+
00001394                           589          
00001394  4280                     590          Clr.L   D0
00001396  3006                     591          Move.W  D6, D0
00001398                           592          
00001398  123C 0008                593          Move.B  #8, D1          ; Grab bits 4 to 7
0000139C  E368                     594          Lsl     D1, D0
0000139E  123C 000C                595          Move.B  #12, D1
000013A2  E268                     596          Lsr     D1, D0
000013A4  0600 0030                597          Add.B   #$30, D0
000013A8  1CC0                     598          Move.B  D0, (A6)+
000013AA                           599          
000013AA  4280                     600          Clr.L   D0
000013AC  3006                     601          Move.W  D6, D0
000013AE                           602          
000013AE  123C 000C                603          Move.B  #12, D1         ; Grab bits 0 to 3
000013B2  E368                     604          Lsl     D1, D0
000013B4  123C 000C                605          Move.B  #12, D1
000013B8  E268                     606          Lsr     D1, D0
000013BA  0600 0030                607          Add.B   #$30, D0
000013BE  1CC0                     608          Move.B  D0, (A6)+
000013C0                           609          
000013C0  4E75                     610          Rts
000013C2                           611          
000013C2                           612  EA_LONG_ADDR    ; Adds $Long to string
000013C2  2C1B                     613          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000013C4                           614          
000013C4  1CFC 0024                615          Move.B  #'$', (A6)+
000013C8                           616          
000013C8  4EB9 000013D0            617          Jsr     EA_LONG_TO_STRING
000013CE                           618  
000013CE  4E75                     619          Rts
000013D0                           620                  
000013D0                           621  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
000013D0  4280                     622          Clr.L   D0              ; Clear D0
000013D2  2006                     623          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
000013D4                           624  
000013D4  123C 001C                625          Move.B  #28, D1         ; Grab bits 28 to 31
000013D8  E2A8                     626          Lsr.L   D1, D0
000013DA  0600 0030                627          Add.B   #$30, D0
000013DE  1CC0                     628          Move.B  D0, (A6)+
000013E0                           629          
000013E0  4280                     630          Clr.L   D0             
000013E2  2006                     631          Move.L  D6, D0          
000013E4                           632          
000013E4  123C 0004                633          Move.B  #4, D1          ; Grab bits 24 to 27
000013E8  E3A8                     634          Lsl.L   D1, D0
000013EA  123C 001C                635          Move.B  #28, D1
000013EE  E2A8                     636          Lsr.L   D1, D0
000013F0  0600 0030                637          Add.B   #$30, D0
000013F4  1CC0                     638          Move.B  D0, (A6)+
000013F6                           639          
000013F6  4280                     640          Clr.L   D0             
000013F8  2006                     641          Move.L  D6, D0
000013FA                           642  
000013FA  123C 0008                643          Move.B  #8, D1          ; Grab bits 20 to 23
000013FE  E3A8                     644          Lsl.L   D1, D0
00001400  123C 001C                645          Move.B  #28, D1
00001404  E2A8                     646          Lsr.L   D1, D0
00001406  0600 0030                647          Add.B   #$30, D0
0000140A  1CC0                     648          Move.B  D0, (A6)+
0000140C                           649          
0000140C  4280                     650          Clr.L   D0             
0000140E  2006                     651          Move.L  D6, D0
00001410                           652  
00001410  123C 000C                653          Move.B  #12, D1         ; Grab bits 16 to 19
00001414  E3A8                     654          Lsl.L   D1, D0
00001416  123C 001C                655          Move.B  #28, D1
0000141A  E2A8                     656          Lsr.L   D1, D0
0000141C  0600 0030                657          Add.B   #$30, D0
00001420  1CC0                     658          Move.B  D0, (A6)+
00001422                           659          
00001422  4280                     660          Clr.L   D0             
00001424  2006                     661          Move.L  D6, D0
00001426                           662  
00001426  123C 0010                663          Move.B  #16, D1         ; Grab bits 12 to 15
0000142A  E3A8                     664          Lsl.L   D1, D0
0000142C  123C 001C                665          Move.B  #28, D1
00001430  E2A8                     666          Lsr.L   D1, D0
00001432  0600 0030                667          Add.B   #$30, D0
00001436  1CC0                     668          Move.B  D0, (A6)+
00001438                           669          
00001438  4280                     670          Clr.L   D0             
0000143A  2006                     671          Move.L  D6, D0
0000143C                           672          
0000143C  123C 0014                673          Move.B  #20, D1         ; Grab bits 8 to 11
00001440  E3A8                     674          Lsl.L   D1, D0
00001442  123C 001C                675          Move.B  #28, D1
00001446  E2A8                     676          Lsr.L   D1, D0
00001448  0600 0030                677          Add.B   #$30, D0
0000144C  1CC0                     678          Move.B  D0, (A6)+
0000144E                           679          
0000144E  4280                     680          Clr.L   D0             
00001450  2006                     681          Move.L  D6, D0
00001452                           682  
00001452  123C 0018                683          Move.B  #24, D1         ; Grab bits 4 to 7
00001456  E3A8                     684          Lsl.L   D1, D0
00001458  123C 001C                685          Move.B  #28, D1
0000145C  E2A8                     686          Lsr.L   D1, D0
0000145E  0600 0030                687          Add.B   #$30, D0
00001462  1CC0                     688          Move.B  D0, (A6)+
00001464                           689          
00001464  4280                     690          Clr.L   D0             
00001466  2006                     691          Move.L  D6, D0
00001468                           692  
00001468  123C 001C                693          Move.B  #28, D1         ; Grab bits 0 to 3
0000146C  E3A8                     694          Lsl.L   D1, D0
0000146E  123C 001C                695          Move.B  #28, D1
00001472  E2A8                     696          Lsr.L   D1, D0
00001474  0600 0030                697          Add.B   #$30, D0
00001478  1CC0                     698          Move.B  D0, (A6)+
0000147A                           699          
0000147A  4E75                     700          Rts
0000147C                           701          
0000147C                           702  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
0000147C  4280                     703          Clr.L   D0              ; Clear D0
0000147E  2006                     704          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
00001480                           705  
00001480  123C 0004                706          Move.B  #4, D1          ; Grab bits 4 to 7
00001484  E228                     707          Lsr.B   D1, D0
00001486  0600 0030                708          Add.B   #$30, D0
0000148A  1CC0                     709          Move.B  D0, (A6)+
0000148C                           710          
0000148C  4280                     711          Clr.L   D0             
0000148E  2006                     712          Move.L  D6, D0          
00001490                           713          
00001490  123C 0004                714          Move.B  #4, D1          ; Grab bits 0 to 3
00001494  E328                     715          Lsl.B   D1, D0
00001496  123C 0004                716          Move.B  #4, D1
0000149A  E228                     717          Lsr.B   D1, D0
0000149C  0600 0030                718          Add.B   #$30, D0
000014A0  1CC0                     719          Move.B  D0, (A6)+
000014A2                           720          
000014A2  4E75                     721          Rts
000014A4                           722  
000014A4                           723  EA_IMM_BYTE ; Finds the immediate byte data
000014A4  1C1B                     724          Move.B  (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
000014A6                           725          
000014A6  1CFC 0023                726          Move.B  #'#', (A6)+         
000014AA  1CFC 0024                727          Move.B  #'$', (A6)+         
000014AE                           728          
000014AE  4EB8 147C                729          Jsr     EA_BYTE_TO_STRING    ; Add the byte to the string
000014B2                           730          
000014B2  4E75                     731          Rts
000014B4                           732                  
000014B4                           733  EA_IMM_WORD ; Finds the immediate word data
000014B4  3C1B                     734          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
000014B6                           735          
000014B6  1CFC 0023                736          Move.B  #'#', (A6)+         
000014BA  1CFC 0024                737          Move.B  #'$', (A6)+         
000014BE                           738          
000014BE  4EB8 136E                739          Jsr     EA_WORD_TO_STRING    ; Add the word to the string
000014C2                           740          
000014C2  4E75                     741          Rts
000014C4                           742          
000014C4                           743  EA_IMM_LONG ; Finds the immediate long data
000014C4  2C1B                     744          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
000014C6                           745          
000014C6  1CFC 0023                746          Move.B  #'#', (A6)+
000014CA  1CFC 0024                747          Move.B  #'$', (A6)+
000014CE                           748          
000014CE  4EB8 13D0                749          Jsr     EA_LONG_TO_STRING    ; Add the long to the string
000014D2                           750          
000014D2  4E75                     751          Rts
000014D4                           752          
000014D4                           753  EA_0TO5 ; Determines the EA for an EA in bits 0-5. DOES NOT HANDLE IMMEDIATE VALUES.
000014D4  4EB9 0000155E            754          Jsr     GET3TO5                 ; Get source mode
000014DA  1A00                     755          Move.B  D0, D5                  ; Move source mode to D5
000014DC  4EB9 00001570            756          Jsr     Get0TO2                 ; Get source register
000014E2                           757          
000014E2                           758          ; List of valid effective addresses
000014E2  BA3C 0000                759          Cmp.B   #Dn_Mode, D5            ; Dn
000014E6  6700 FDE2                760          Beq     EA_DN
000014EA                           761          
000014EA  BA3C 0001                762          Cmp.B   #An_Mode, D5            ; An
000014EE  6700 FDE6                763          Beq     EA_AN
000014F2                           764          
000014F2  BA3C 0002                765          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000014F6  6700 FDEA                766          Beq     EA_AN_PNTR
000014FA                           767          
000014FA  BA3C 0003                768          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000014FE  6700 FDF6                769          Beq     EA_AN_INC
00001502                           770          
00001502  BA3C 0004                771          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001506  6700 FE06                772          Beq     EA_AN_DEC
0000150A                           773          
0000150A                           774          ; Comparing registers at this point because modes are the same
0000150A  B03C 0000                775          Cmp.B   #Word_Reg, D0           ; (xxx).W
0000150E  6700 FE16                776          Beq     EA_WORD_ADDR
00001512                           777          
00001512  B03C 0001                778          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001516  6700 FEAA                779          Beq     EA_LONG_ADDR
0000151A                           780          
0000151A  4E75                     781          Rts
0000151C                           782          
0000151C                           783  ;===========================================================;       
0000151C                           784  ;---------------- Bit Chopping Sub Routines ----------------;
0000151C                           785  ; These Sub Routines Chop a WORD size piece of data from
0000151C                           786  ; Data register 4 into a smaller piece, leaving just the
0000151C                           787  ; Piece in register 0 while leaving the original piece
0000151C                           788  ; of data intact.
0000151C                           789  ;===========================================================;
0000151C                           790  GET12TO15
0000151C  4280                     791          CLR.L   D0
0000151E  3004                     792          Move.W  D4, D0
00001520                           793                  
00001520  123C 000C                794          Move.B  #12, D1
00001524  E268                     795          LSR     D1, D0
00001526                           796                  
00001526  4E75                     797          RTS
00001528                           798  
00001528                           799  GET12TO13
00001528  4280                     800          CLR.L   D0
0000152A  3004                     801          Move.W  D4, D0
0000152C                           802          
0000152C  123C 0002                803          Move.B  #2, D1
00001530  E368                     804          LSL     D1, D0
00001532                           805          
00001532  123C 000E                806          Move.B  #14, D1
00001536  E268                     807          LSR     D1, D0
00001538                           808          
00001538  4E75                     809          RTS
0000153A                           810                  
0000153A                           811  GET9TO11        
0000153A  4280                     812          CLR.L   D0
0000153C  3004                     813          Move.W  D4, D0
0000153E                           814                  
0000153E  123C 0004                815          Move.B  #4, D1
00001542  E368                     816          LSL     D1, D0
00001544                           817                  
00001544  123C 000D                818          Move.B  #13, D1
00001548  E268                     819          LSR     D1, D0
0000154A                           820                  
0000154A  4E75                     821          RTS
0000154C                           822                  
0000154C                           823  GET6TO8 
0000154C  4280                     824          CLR.L   D0
0000154E  3004                     825          Move.W  D4, D0
00001550                           826                  
00001550  123C 0007                827          Move.B  #7, D1
00001554  E368                     828          LSL     D1, D0
00001556                           829                  
00001556  123C 000D                830          Move.B  #13, D1
0000155A  E268                     831          LSR     D1, D0
0000155C                           832                  
0000155C  4E75                     833          RTS
0000155E                           834                  
0000155E                           835  GET3TO5 
0000155E  4280                     836          CLR.L   D0
00001560  3004                     837          Move.W  D4, D0
00001562                           838                  
00001562  123C 000A                839          Move.B  #10, D1
00001566  E368                     840          LSL     D1, D0
00001568                           841                  
00001568  123C 000D                842          Move.B  #13, D1
0000156C  E268                     843          LSR     D1, D0
0000156E                           844                  
0000156E  4E75                     845          RTS
00001570                           846  GET0TO2 
00001570  4280                     847          CLR.L   D0
00001572  3004                     848          Move.W  D4, D0
00001574                           849                  
00001574  123C 000D                850          Move.B  #13, D1
00001578  E368                     851          LSL     D1, D0
0000157A                           852                  
0000157A  123C 000D                853          Move.B  #13, D1
0000157E  E268                     854          LSR     D1, D0
00001580                           855                  
00001580  4E75                     856          RTS
00001582                           857  GETBIT8
00001582  4280                     858          CLR.L   D0
00001584  3004                     859          Move.W  D4, D0
00001586                           860                  
00001586  123C 0007                861          Move.B  #7, D1
0000158A  E368                     862          LSL     D1, D0
0000158C                           863                  
0000158C  123C 000F                864          Move.B  #15, D1
00001590  E268                     865          LSR     D1, D0
00001592                           866                  
00001592  4E75                     867          RTS 
00001594                           868          
00001594                           869  GET6TO7
00001594  4280                     870          Clr.L   D0
00001596  3004                     871          Move.W  D4, D0
00001598                           872          
00001598  123C 0008                873          Move.B  #8, D1
0000159C  E368                     874          Lsl     D1, D0
0000159E                           875          
0000159E  123C 000E                876          Move.B  #14, D1
000015A2  E268                     877          Lsr     D1, D0
000015A4                           878          
000015A4  4E75                     879          Rts
000015A6                           880          
000015A6                           881  GETBIT5
000015A6  4280                     882          Clr.L   D0
000015A8  3004                     883          Move.W  D4, D0
000015AA                           884          
000015AA  123C 000A                885          Move.B  #10, D1
000015AE  E368                     886          Lsl     D1, D0
000015B0                           887          
000015B0  123C 000F                888          Move.B  #15, D1
000015B4  E268                     889          Lsr     D1, D0
000015B6                           890          
000015B6  4E75                     891          Rts
000015B8                           892  
000015B8                           893  
000015B8                           894      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_TEST1          5E09
ADDQ_TEST2          5009
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
BTST_TEST1          F07
BTST_TEST2          F3C
BTST_TEST3          807
DN_MODE             0
EA_0TO5             14D4
EA_ADD              109C
EA_ADDA             10D0
EA_ADDQ             1152
EA_ADDQ_CHECK_8     1162
EA_ADDQ_DEST        1186
EA_ADDQ_IMMEDIATE   117A
EA_ADD_ADDRESS      1112
EA_ADD_OPMODE_DEST  10FC
EA_ADD_OPMODE_SOURCE  10E6
EA_ADD_SIZE         1122
EA_AN               12D6
EA_AND              1198
EA_AN_DEC           130E
EA_AN_INC           12F6
EA_AN_PNTR          12E2
EA_BIT_SHIFT        11AA
EA_BTST             1282
EA_BTST_ADDRESS     12B6
EA_BTST_DN          1296
EA_BTST_IMM         12A8
EA_BYTE_TO_STRING   147C
EA_CMP              1190
EA_DIVS             127E
EA_DN               12CA
EA_EOR              119C
EA_IMMEDIATE        1222
EA_IMMEDIATE_DEST   1252
EA_IMMEDIATE_SIZE   1232
EA_IMM_BYTE         14A4
EA_IMM_LONG         14C4
EA_IMM_WORD         14B4
EA_LEA              1194
EA_LONG_ADDR        13C2
EA_LONG_TO_STRING   13D0
EA_MOVE             1014
EA_MOVE_DEST        1034
EA_MOVE_SIZE        107C
EA_MOVE_SOURCE      1024
EA_MULS             1258
EA_MULS_ADDRESS     126E
EA_NEG              11A0
EA_NOT              11A6
EA_SHIFT_CHECK_8    11D8
EA_SHIFT_COMMA      1212
EA_SHIFT_DN         1200
EA_SHIFT_IMMEDIATE  11F0
EA_SHIFT_MEMORY     11BE
EA_SHIFT_REGISTER   11C4
EA_SIGN_EXT_16      133E
EA_SIGN_EXT_32      1356
EA_SUB              118C
EA_WORD_ADDR        1326
EA_WORD_TO_STRING   136E
GET0TO2             1570
GET12TO13           1528
GET12TO15           151C
GET3TO5             155E
GET6TO7             1594
GET6TO8             154C
GET9TO11            153A
GETBIT5             15A6
GETBIT8             1582
IMM_MODE            7
IMM_REG             4
IMM_TEST1           41F
IMM_TEST2           479
LONG_MODE           7
LONG_REG            1
MULS_TEST1          CFFC
MULS_TEST2          CFD2
SHIFT_TEST1         E1D7
SHIFT_TEST2         E1F8
SHIFT_TEST3         EF21
SHIFT_TEST4         E507
SHIFT_TEST5         E104
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
