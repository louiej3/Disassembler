00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.12.29
Created On: 11/24/2014 1:23:28 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L #$Imm,A7
00000000                            39          
00001000                            40      ORG    $1000
00001000                            41      
00001000                            42  START:                  ; first instruction of program
00001000  267C 00000400             43          Move.L  #$0000400, A3
00001006                            44  
00001006                            45          ;Move.W  #$4030, (A3)
00001006  26BC 12345678             46          Move.L  #$12345678, (A3)
0000100C                            47          ;Move.L  #$12349999, (A3)
0000100C                            48          ;Move.W  #$11, (A3)
0000100C                            49          
0000100C                            50          ;Move.W  #Test_Move1, D4
0000100C                            51          ;Move.W  #Test_Move2, D4
0000100C                            52          ;Move.W  #Test_Move3, D4
0000100C                            53          ;Move.W  #Test_Move4, D4
0000100C                            54          ;Move.W  #Test_Move5, D4
0000100C                            55          ;Move.W  #Test_Move6, D4        
0000100C                            56          ;Move.W  #Test_Move7, D4        
0000100C                            57          ;Move.W  #Test_Move8, D4
0000100C                            58          
0000100C                            59          ;Move.W  #Add_Test1, D4
0000100C                            60          ;Move.W  #Add_Test2, D4
0000100C                            61          ;Move.W  #Add_Test3, D4
0000100C  383C DFF9                 62          Move.W  #Add_Test4, D4
00001010                            63  
00001010                            64                  
00001010                            65          ;Jmp     EA_MOVE     ; Branch to EA function for Move
00001010  4EF9 000010DE             66          Jmp     EA_ADD
00001016                            67  
00001016                            68  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
00001016                            69  ;-------------------- Effective Address Sub Routines --------------------;
00001016                            70  ; These subroutines look for the correct effective address
00001016                            71  ; in each OP code.
00001016                            72  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
00001016                            73  
00001016                            74  ;=============================================;
00001016                            75  ;--------------- EA Move/MoveA ---------------;
00001016                            76  ;=============================================;
00001016                            77  EA_MOVE
00001016  4EB9 00001026             78          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
0000101C  1CFC 002C                 79          Move.B  #',', (A6)+             ; Add a comma
00001020  4EB9 00001076             80          Jsr     EA_MOVE_DEST            ; Add the EA for destination
00001026                            81                  
00001026                            82  EA_MOVE_SOURCE  ; Find out Move's source
00001026  4EB9 00001458             83          Jsr     GET3TO5                 ; Get source mode
0000102C  1A00                      84          Move.B  D0, D5                  ; Move source mode to D5
0000102E  4EB9 0000146A             85          Jsr     Get0TO2                 ; Get source register
00001034                            86          
00001034                            87          ; List of valid effective addresses
00001034  BA3C 0000                 88          Cmp.B   #Dn_Mode, D5            ; Dn
00001038  6700 01D2                 89          Beq     EA_DN
0000103C                            90          
0000103C  BA3C 0001                 91          Cmp.B   #An_Mode, D5            ; An
00001040  6700 01D6                 92          Beq     EA_AN
00001044                            93          
00001044  BA3C 0002                 94          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001048  6700 01DA                 95          Beq     EA_AN_PNTR
0000104C                            96          
0000104C  BA3C 0003                 97          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001050  6700 01E6                 98          Beq     EA_AN_INC
00001054                            99          
00001054  BA3C 0004                100          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001058  6700 01F6                101          Beq     EA_AN_DEC
0000105C                           102          
0000105C                           103          ; Comparing registers at this point because modes are the same
0000105C  B03C 0000                104          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001060  6700 0206                105          Beq     EA_WORD_ADDR
00001064                           106          
00001064  B03C 0001                107          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001068  6700 029A                108          Beq     EA_LONG_ADDR
0000106C                           109          
0000106C  B03C 0004                110          Cmp.B   #Imm_Reg, D0            ; #<data>
00001070  6700 004C                111          Beq     EA_MOVE_SIZE
00001074                           112          
00001074  4E75                     113          Rts
00001076                           114          
00001076                           115  EA_MOVE_DEST    ; Find out Move's destination
00001076  4EB9 00001446            116          Jsr     GET6TO8                 ; Get destination mode
0000107C  1A00                     117          Move.B  D0, D5                  ; Move destination mode to D5
0000107E  4EB9 00001434            118          Jsr     GET9TO11                ; Get destination register
00001084                           119          
00001084                           120          ; List of valid effective addresses
00001084  BA3C 0000                121          Cmp.B   #Dn_Mode, D5            ; Dn
00001088  6700 0182                122          Beq     EA_DN
0000108C                           123          
0000108C  BA3C 0001                124          Cmp.B   #An_Mode, D5            ; An
00001090  6700 0186                125          Beq     EA_AN
00001094                           126          
00001094  BA3C 0002                127          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001098  6700 018A                128          Beq     EA_AN_PNTR
0000109C                           129          
0000109C  BA3C 0003                130          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000010A0  6700 0196                131          Beq     EA_AN_INC
000010A4                           132          
000010A4  BA3C 0004                133          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000010A8  6700 01A6                134          Beq     EA_AN_DEC
000010AC                           135          
000010AC                           136          ; Comparing registers at this point because modes are the same
000010AC  B03C 0000                137          Cmp.B   #Word_Reg, D0           ; (xxx).W
000010B0  6700 01B6                138          Beq     EA_WORD_ADDR
000010B4                           139          
000010B4  B03C 0001                140          Cmp.B   #Long_Reg, D0           ; (xxx).L
000010B8  6700 024A                141          Beq     EA_LONG_ADDR
000010BC                           142          
000010BC  4E75                     143          Rts
000010BE                           144          
000010BE                           145  EA_MOVE_SIZE    ; Find the size of immediate data being moved
000010BE  4EB9 00001422            146          Jsr     GET12TO13               ; Get Move size
000010C4                           147  
000010C4  B03C 0001                148          Cmp.B   #%01, D0                ; Byte
000010C8  6700 031C                149          Beq     EA_IMM_BYTE
000010CC                           150  
000010CC  B03C 0003                151          Cmp.B   #%11, D0                ; Word
000010D0  6700 0324                152          Beq     EA_IMM_WORD
000010D4                           153          
000010D4  B03C 0002                154          Cmp.B   #%10, D0                ; Long
000010D8  6700 032C                155          Beq     EA_IMM_LONG
000010DC                           156          
000010DC  4E75                     157          Rts
000010DE                           158  
000010DE                           159  ;===========================================;        
000010DE                           160  ;--------------- EA Add/AddA ---------------;
000010DE                           161  ;===========================================;
000010DE                           162  EA_ADD        
000010DE  4EB9 00001446            163          Jsr     GET6TO8
000010E4                           164          
000010E4  B03C 0003                165          Cmp.B   #%011, D0
000010E8  6700 0028                166          Beq     EA_ADDA
000010EC                           167          
000010EC  B03C 0007                168          Cmp.B   #%111, D0
000010F0  6700 0020                169          Beq     EA_ADDA
000010F4                           170  
000010F4  B03C 0000                171          Cmp.B   #%000, D0
000010F8  6700 002E                172          Beq     EA_ADD_OPMODE_SOURCE
000010FC                           173          
000010FC  B03C 0001                174          Cmp.B   #%001, D0
00001100  6700 0026                175          Beq     EA_ADD_OPMODE_SOURCE
00001104                           176          
00001104  B03C 0002                177          Cmp.B   #%010, D0
00001108  6700 001E                178          Beq     EA_ADD_OPMODE_SOURCE
0000110C                           179          
0000110C  4EF9 0000113E            180          Jmp     EA_ADD_OPMODE_DEST
00001112                           181          
00001112                           182  EA_ADDA
00001112  4EB9 00001154            183          Jsr     EA_ADD_SOURCE
00001118  1CFC 002C                184          Move.B  #',', (A6)+             ; Add a comma
0000111C  4EB9 00001434            185          Jsr     GET9TO11
00001122  4EB9 00001218            186          Jsr     EA_AN
00001128                           187          
00001128                           188  EA_ADD_OPMODE_SOURCE
00001128  4EB9 00001154            189          Jsr     EA_ADD_SOURCE
0000112E  1CFC 002C                190          Move.B  #',', (A6)+             ; Add a comma
00001132  4EB9 00001434            191          Jsr     GET9TO11
00001138  4EB9 0000120C            192          Jsr     EA_DN
0000113E                           193          
0000113E                           194  EA_ADD_OPMODE_DEST
0000113E  4EB9 00001434            195          Jsr     GET9TO11
00001144  4EB9 0000120C            196          Jsr     EA_DN
0000114A  1CFC 002C                197          Move.B  #',', (A6)+             ; Add a comma
0000114E  4EB9 000011A4            198          Jsr     EA_ADD_DEST
00001154                           199          
00001154                           200  EA_ADD_SOURCE   ; Find out Add's source
00001154  4EB9 00001458            201          Jsr     GET3TO5                 ; Get source mode
0000115A  1A00                     202          Move.B  D0, D5                  ; Move source mode to D5
0000115C  4EB9 0000146A            203          Jsr     Get0TO2                 ; Get source register
00001162                           204          
00001162                           205          ; List of valid effective addresses
00001162  BA3C 0000                206          Cmp.B   #Dn_Mode, D5            ; Dn
00001166  6700 00A4                207          Beq     EA_DN
0000116A                           208          
0000116A  BA3C 0001                209          Cmp.B   #An_Mode, D5            ; An
0000116E  6700 00A8                210          Beq     EA_AN
00001172                           211          
00001172  BA3C 0002                212          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001176  6700 00AC                213          Beq     EA_AN_PNTR
0000117A                           214          
0000117A  BA3C 0003                215          Cmp.B   #An_Inc_Mode, D5        ; (An)+
0000117E  6700 00B8                216          Beq     EA_AN_INC
00001182                           217          
00001182  BA3C 0004                218          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001186  6700 00C8                219          Beq     EA_AN_DEC
0000118A                           220          
0000118A                           221          ; Comparing registers at this point because modes are the same
0000118A  B03C 0000                222          Cmp.B   #Word_Reg, D0           ; (xxx).W
0000118E  6700 00D8                223          Beq     EA_WORD_ADDR
00001192                           224          
00001192  B03C 0001                225          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001196  6700 016C                226          Beq     EA_LONG_ADDR
0000119A                           227          
0000119A  B03C 0004                228          Cmp.B   #Imm_Reg, D0            ; #<data>
0000119E  6700 003C                229          Beq     EA_ADD_SIZE
000011A2                           230          
000011A2  4E75                     231          Rts
000011A4                           232          
000011A4                           233  EA_ADD_DEST ; Find out Add's destination
000011A4  4EB9 00001458            234          Jsr     GET3TO5                 ; Get destination mode
000011AA  1A00                     235          Move.B  D0, D5                  ; Move destination mode to D5
000011AC  4EB9 0000146A            236          Jsr     Get0TO2                 ; Get destination register
000011B2                           237          
000011B2                           238          ; List of valid effective addresses
000011B2  BA3C 0002                239          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000011B6  6700 006C                240          Beq     EA_AN_PNTR
000011BA                           241          
000011BA  BA3C 0003                242          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000011BE  6700 0078                243          Beq     EA_AN_INC
000011C2                           244          
000011C2  BA3C 0004                245          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000011C6  6700 0088                246          Beq     EA_AN_DEC
000011CA                           247          
000011CA                           248          ; Comparing registers at this point because modes are the same
000011CA  B03C 0000                249          Cmp.B   #Word_Reg, D0           ; (xxx).W
000011CE  6700 0098                250          Beq     EA_WORD_ADDR
000011D2                           251          
000011D2  B03C 0001                252          Cmp.B   #Long_Reg, D0           ; (xxx).L
000011D6  6700 012C                253          Beq     EA_LONG_ADDR
000011DA                           254                  
000011DA  4E75                     255          Rts
000011DC                           256          
000011DC                           257  EA_ADD_SIZE ; Find the size of immediate data being moved
000011DC  4EB9 00001446            258          Jsr     GET6TO8                 ; Get Move size
000011E2                           259  
000011E2  B03C 0000                260          Cmp.B   #%000, D0               ; Byte
000011E6  6700 01FE                261          Beq     EA_IMM_BYTE
000011EA                           262  
000011EA  B03C 0001                263          Cmp.B   #%001, D0               ; Word
000011EE  6700 0206                264          Beq     EA_IMM_WORD
000011F2                           265          
000011F2  B03C 0002                266          Cmp.B   #%010, D0               ; Long
000011F6  6700 020E                267          Beq     EA_IMM_LONG
000011FA                           268          
000011FA  B03C 0003                269          Cmp.B   #%011, D0               ; AddA Word
000011FE  6700 01F6                270          Beq     EA_IMM_WORD
00001202                           271     
00001202  B03C 0007                272          Cmp.B   #%111, D0               ; AddA Long
00001206  6700 01FE                273          Beq     EA_IMM_LONG
0000120A                           274          
0000120A  4E75                     275          Rts
0000120C                           276          
0000120C                           277  ;==========================================;        
0000120C                           278  ;---------- General EA functions ----------;
0000120C                           279  ;==========================================;
0000120C                           280  EA_DN   ; Adds Dn EA to string
0000120C  1CFC 0044                281          Move.B  #'D', (A6)+             
00001210  0600 0030                282          Add.B   #$30, D0        
00001214  1CC0                     283          Move.B  D0, (A6)+               
00001216                           284                  
00001216  4E75                     285          Rts
00001218                           286  
00001218                           287  EA_AN   ; Adds An EA to string
00001218  1CFC 0041                288          Move.B  #'A', (A6)+
0000121C  0600 0030                289          Add.B   #$30, D0    
00001220  1CC0                     290          Move.B  D0, (A6)+               
00001222                           291                  
00001222  4E75                     292          Rts
00001224                           293  
00001224                           294  EA_AN_PNTR  ; Adds (An) EA to string
00001224  1CFC 0028                295          Move.B  #'(', (A6)+
00001228  1CFC 0041                296          Move.B  #'A', (A6)+
0000122C  0600 0030                297          Add.B   #$30, D0
00001230  1CC0                     298          Move.B  D0, (A6)+
00001232  1CFC 0029                299          Move.B  #')', (A6)+
00001236                           300                  
00001236  4E75                     301          Rts
00001238                           302          
00001238                           303  EA_AN_INC   ; Adds (An)+ EA to string
00001238  1CFC 0028                304          Move.B  #'(', (A6)+
0000123C  1CFC 0041                305          Move.B  #'A', (A6)+
00001240  0600 0030                306          Add.B   #$30, D0
00001244  1CC0                     307          Move.B  D0, (A6)+
00001246  1CFC 0029                308          Move.B  #')', (A6)+
0000124A  1CFC 002B                309          Move.B  #'+', (A6)+
0000124E                           310                  
0000124E  4E75                     311          Rts 
00001250                           312          
00001250                           313  EA_AN_DEC   ; Adds -(An) EA to string
00001250  1CFC 002D                314          Move.B  #'-', (A6)+
00001254  1CFC 0028                315          Move.B  #'(', (A6)+
00001258  1CFC 0041                316          Move.B  #'A', (A6)+
0000125C  0600 0030                317          Add.B   #$30, D0
00001260  1CC0                     318          Move.B  D0, (A6)+
00001262  1CFC 0029                319          Move.B  #')', (A6)+
00001266                           320                  
00001266  4E75                     321          Rts 
00001268                           322  
00001268                           323  EA_WORD_ADDR    ; Adds $Word to string
00001268  3C1B                     324          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
0000126A                           325          
0000126A  1CFC 0024                326          Move.B  #'$', (A6)+
0000126E                           327          
0000126E  BC7C 8000                328          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001272  6E00 000C                329          Bgt     EA_SIGN_EXT_16
00001276                           330          
00001276  BC7C 8000                331          Cmp.W   #$8000, D6          ; Word address is greater than 8000
0000127A  6F00 001C                332          Ble     EA_SIGN_EXT_32
0000127E                           333          
0000127E  4E75                     334          Rts
00001280                           335                  
00001280                           336  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
00001280  1CFC 0030                337          Move.B  #'0', (A6)+
00001284  1CFC 0030                338          Move.B  #'0', (A6)+
00001288  1CFC 0030                339          Move.B  #'0', (A6)+
0000128C  1CFC 0030                340          Move.B  #'0', (A6)+
00001290                           341          
00001290  4EB9 000012B0            342          Jsr     EA_WORD_TO_STRING       
00001296                           343          
00001296  4E75                     344          Rts
00001298                           345  
00001298                           346  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
00001298  1CFC 0046                347          Move.B  #'F', (A6)+
0000129C  1CFC 0046                348          Move.B  #'F', (A6)+
000012A0  1CFC 0046                349          Move.B  #'F', (A6)+
000012A4  1CFC 0046                350          Move.B  #'F', (A6)+
000012A8                           351          
000012A8  4EB9 000012B0            352          Jsr     EA_WORD_TO_STRING   
000012AE                           353          
000012AE  4E75                     354          Rts
000012B0                           355          
000012B0                           356  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
000012B0  4280                     357          Clr.L   D0              ; Clear D0
000012B2  3006                     358          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
000012B4                           359  
000012B4  123C 000C                360          Move.B  #12, D1         ; Grab bits 12 to 15
000012B8  E268                     361          Lsr     D1, D0
000012BA  0600 0030                362          Add.B   #$30, D0
000012BE  1CC0                     363          Move.B  D0, (A6)+
000012C0                           364          
000012C0  4280                     365          Clr.L   D0
000012C2  3006                     366          Move.W  D6, D0
000012C4                           367          
000012C4  123C 0004                368          Move.B  #4, D1          ; Grab bits 8 to 11
000012C8  E368                     369          Lsl     D1, D0
000012CA  123C 000C                370          Move.B  #12, D1
000012CE  E268                     371          Lsr     D1, D0  
000012D0  0600 0030                372          Add.B   #$30, D0
000012D4  1CC0                     373          Move.B  D0, (A6)+
000012D6                           374          
000012D6  4280                     375          Clr.L   D0
000012D8  3006                     376          Move.W  D6, D0
000012DA                           377          
000012DA  123C 0008                378          Move.B  #8, D1          ; Grab bits 4 to 7
000012DE  E368                     379          Lsl     D1, D0
000012E0  123C 000C                380          Move.B  #12, D1
000012E4  E268                     381          Lsr     D1, D0
000012E6  0600 0030                382          Add.B   #$30, D0
000012EA  1CC0                     383          Move.B  D0, (A6)+
000012EC                           384          
000012EC  4280                     385          Clr.L   D0
000012EE  3006                     386          Move.W  D6, D0
000012F0                           387          
000012F0  123C 000C                388          Move.B  #12, D1         ; Grab bits 0 to 3
000012F4  E368                     389          Lsl     D1, D0
000012F6  123C 000C                390          Move.B  #12, D1
000012FA  E268                     391          Lsr     D1, D0
000012FC  0600 0030                392          Add.B   #$30, D0
00001300  1CC0                     393          Move.B  D0, (A6)+
00001302                           394          
00001302  4E75                     395          Rts
00001304                           396          
00001304                           397  EA_LONG_ADDR    ; Adds $Long to string
00001304  2C1B                     398          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
00001306                           399          
00001306  1CFC 0024                400          Move.B  #'$', (A6)+
0000130A                           401          
0000130A  4EB9 00001312            402          Jsr     EA_LONG_TO_STRING
00001310                           403  
00001310  4E75                     404          Rts
00001312                           405                  
00001312                           406  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
00001312  4280                     407          Clr.L   D0              ; Clear D0
00001314  2006                     408          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
00001316                           409  
00001316  123C 001C                410          Move.B  #28, D1         ; Grab bits 28 to 31
0000131A  E2A8                     411          Lsr.L   D1, D0
0000131C  0600 0030                412          Add.B   #$30, D0
00001320  1CC0                     413          Move.B  D0, (A6)+
00001322                           414          
00001322  4280                     415          Clr.L   D0             
00001324  2006                     416          Move.L  D6, D0          
00001326                           417          
00001326  123C 0004                418          Move.B  #4, D1          ; Grab bits 24 to 27
0000132A  E3A8                     419          Lsl.L   D1, D0
0000132C  123C 001C                420          Move.B  #28, D1
00001330  E2A8                     421          Lsr.L   D1, D0
00001332  0600 0030                422          Add.B   #$30, D0
00001336  1CC0                     423          Move.B  D0, (A6)+
00001338                           424          
00001338  4280                     425          Clr.L   D0             
0000133A  2006                     426          Move.L  D6, D0
0000133C                           427  
0000133C  123C 0008                428          Move.B  #8, D1          ; Grab bits 20 to 23
00001340  E3A8                     429          Lsl.L   D1, D0
00001342  123C 001C                430          Move.B  #28, D1
00001346  E2A8                     431          Lsr.L   D1, D0
00001348  0600 0030                432          Add.B   #$30, D0
0000134C  1CC0                     433          Move.B  D0, (A6)+
0000134E                           434          
0000134E  4280                     435          Clr.L   D0             
00001350  2006                     436          Move.L  D6, D0
00001352                           437  
00001352  123C 000C                438          Move.B  #12, D1         ; Grab bits 16 to 19
00001356  E3A8                     439          Lsl.L   D1, D0
00001358  123C 001C                440          Move.B  #28, D1
0000135C  E2A8                     441          Lsr.L   D1, D0
0000135E  0600 0030                442          Add.B   #$30, D0
00001362  1CC0                     443          Move.B  D0, (A6)+
00001364                           444          
00001364  4280                     445          Clr.L   D0             
00001366  2006                     446          Move.L  D6, D0
00001368                           447  
00001368  123C 0010                448          Move.B  #16, D1         ; Grab bits 12 to 15
0000136C  E3A8                     449          Lsl.L   D1, D0
0000136E  123C 001C                450          Move.B  #28, D1
00001372  E2A8                     451          Lsr.L   D1, D0
00001374  0600 0030                452          Add.B   #$30, D0
00001378  1CC0                     453          Move.B  D0, (A6)+
0000137A                           454          
0000137A  4280                     455          Clr.L   D0             
0000137C  2006                     456          Move.L  D6, D0
0000137E                           457          
0000137E  123C 0014                458          Move.B  #20, D1         ; Grab bits 8 to 11
00001382  E3A8                     459          Lsl.L   D1, D0
00001384  123C 001C                460          Move.B  #28, D1
00001388  E2A8                     461          Lsr.L   D1, D0
0000138A  0600 0030                462          Add.B   #$30, D0
0000138E  1CC0                     463          Move.B  D0, (A6)+
00001390                           464          
00001390  4280                     465          Clr.L   D0             
00001392  2006                     466          Move.L  D6, D0
00001394                           467  
00001394  123C 0018                468          Move.B  #24, D1         ; Grab bits 4 to 7
00001398  E3A8                     469          Lsl.L   D1, D0
0000139A  123C 001C                470          Move.B  #28, D1
0000139E  E2A8                     471          Lsr.L   D1, D0
000013A0  0600 0030                472          Add.B   #$30, D0
000013A4  1CC0                     473          Move.B  D0, (A6)+
000013A6                           474          
000013A6  4280                     475          Clr.L   D0             
000013A8  2006                     476          Move.L  D6, D0
000013AA                           477  
000013AA  123C 001C                478          Move.B  #28, D1         ; Grab bits 0 to 3
000013AE  E3A8                     479          Lsl.L   D1, D0
000013B0  123C 001C                480          Move.B  #28, D1
000013B4  E2A8                     481          Lsr.L   D1, D0
000013B6  0600 0030                482          Add.B   #$30, D0
000013BA  1CC0                     483          Move.B  D0, (A6)+
000013BC                           484          
000013BC  4E75                     485          Rts
000013BE                           486          
000013BE                           487  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
000013BE  4280                     488          Clr.L   D0              ; Clear D0
000013C0  2006                     489          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
000013C2                           490  
000013C2  123C 0004                491          Move.B  #4, D1         ; Grab bits 4 to 7
000013C6  E2A8                     492          Lsr.L   D1, D0
000013C8  0600 0030                493          Add.B   #$30, D0
000013CC  1CC0                     494          Move.B  D0, (A6)+
000013CE                           495          
000013CE  4280                     496          Clr.L   D0             
000013D0  2006                     497          Move.L  D6, D0          
000013D2                           498          
000013D2  123C 0004                499          Move.B  #4, D1          ; Grab bits 0 to 3
000013D6  E3A8                     500          Lsl.L   D1, D0
000013D8  123C 0004                501          Move.B  #4, D1
000013DC  E2A8                     502          Lsr.L   D1, D0
000013DE  0600 0030                503          Add.B   #$30, D0
000013E2  1CC0                     504          Move.B  D0, (A6)+
000013E4                           505          
000013E4  4E75                     506          Rts
000013E6                           507  
000013E6                           508  EA_IMM_BYTE ; Finds the immediate byte data
000013E6  1C1B                     509          Move.B (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
000013E8                           510          
000013E8  1CFC 0023                511          Move.B  #'#', (A6)+         
000013EC  1CFC 0024                512          Move.B  #'$', (A6)+         
000013F0                           513          
000013F0  4EB8 13BE                514          Jsr     EA_BYTE_TO_STRING    
000013F4                           515          
000013F4  4E75                     516          Rts
000013F6                           517                  
000013F6                           518  EA_IMM_WORD ; Finds the immediate word data
000013F6  3C1B                     519          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
000013F8                           520          
000013F8  1CFC 0023                521          Move.B  #'#', (A6)+         
000013FC  1CFC 0024                522          Move.B  #'$', (A6)+         
00001400                           523          
00001400  4EB8 12B0                524          Jsr     EA_WORD_TO_STRING   ; Add the word to the string
00001404                           525          
00001404  4E75                     526          Rts
00001406                           527          
00001406                           528  EA_IMM_LONG ; Finds the immediate long data
00001406  2C1B                     529          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
00001408                           530          
00001408  1CFC 0023                531          Move.B  #'#', (A6)+
0000140C  1CFC 0024                532          Move.B  #'$', (A6)+
00001410                           533          
00001410  4EB8 1312                534          Jsr     EA_LONG_TO_STRING
00001414                           535          
00001414  4E75                     536          Rts
00001416                           537  
00001416                           538  ;===========================================================;       
00001416                           539  ;---------------- Bit Chopping Sub Routines ----------------;
00001416                           540  ; These Sub Routines Chop a WORD size piece of data from
00001416                           541  ; Data register 4 into a smaller piece, leaving just the
00001416                           542  ; Piece in register 0 while leaving the original piece
00001416                           543  ; of data intact.
00001416                           544  ;===========================================================;
00001416                           545  GET12TO15
00001416  4280                     546          CLR.L   D0
00001418  3004                     547          Move.W  D4, D0
0000141A                           548                  
0000141A  123C 000C                549          Move.B  #12, D1
0000141E  E268                     550          LSR     D1, D0
00001420                           551                  
00001420  4E75                     552          RTS
00001422                           553  
00001422                           554  GET12TO13
00001422  4280                     555          CLR.L   D0
00001424  3004                     556          Move.W  D4, D0
00001426                           557          
00001426  123C 0002                558          Move.B  #2, D1
0000142A  E368                     559          LSL     D1, D0
0000142C                           560          
0000142C  123C 000E                561          Move.B  #14, D1
00001430  E268                     562          LSR     D1, D0
00001432                           563          
00001432  4E75                     564          RTS
00001434                           565                  
00001434                           566  GET9TO11        
00001434  4280                     567          CLR.L   D0
00001436  3004                     568          Move.W  D4, D0
00001438                           569                  
00001438  123C 0004                570          Move.B  #4, D1
0000143C  E368                     571          LSL     D1, D0
0000143E                           572                  
0000143E  123C 000D                573          Move.B  #13, D1
00001442  E268                     574          LSR     D1, D0
00001444                           575                  
00001444  4E75                     576          RTS
00001446                           577                  
00001446                           578  GET6TO8 
00001446  4280                     579          CLR.L   D0
00001448  3004                     580          Move.W  D4, D0
0000144A                           581                  
0000144A  123C 0007                582          Move.B  #7, D1
0000144E  E368                     583          LSL     D1, D0
00001450                           584                  
00001450  123C 000D                585          Move.B  #13, D1
00001454  E268                     586          LSR     D1, D0
00001456                           587                  
00001456  4E75                     588          RTS
00001458                           589                  
00001458                           590  GET3TO5 
00001458  4280                     591          CLR.L   D0
0000145A  3004                     592          Move.W  D4, D0
0000145C                           593                  
0000145C  123C 000A                594          Move.B  #10, D1
00001460  E368                     595          LSL     D1, D0
00001462                           596                  
00001462  123C 000D                597          Move.B  #13, D1
00001466  E268                     598          LSR     D1, D0
00001468                           599                  
00001468  4E75                     600          RTS
0000146A                           601  GET0TO2 
0000146A  4280                     602          CLR.L   D0
0000146C  3004                     603          Move.W  D4, D0
0000146E                           604                  
0000146E  123C 000D                605          Move.B  #13, D1
00001472  E368                     606          LSL     D1, D0
00001474                           607                  
00001474  123C 000D                608          Move.B  #13, D1
00001478  E268                     609          LSR     D1, D0
0000147A                           610                  
0000147A  4E75                     611          RTS
0000147C                           612  GETBIT8
0000147C  4280                     613          CLR.L   D0
0000147E  3004                     614          Move.W  D4, D0
00001480                           615                  
00001480  123C 0007                616          Move.B  #7, D1
00001484  E368                     617          LSL     D1, D0
00001486                           618                  
00001486  123C 000F                619          Move.B  #15, D1
0000148A  E268                     620          LSR     D1, D0
0000148C                           621                  
0000148C  4E75                     622          RTS 
0000148E                           623  
0000148E                           624      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_ADD              10DE
EA_ADDA             1112
EA_ADD_DEST         11A4
EA_ADD_OPMODE_DEST  113E
EA_ADD_OPMODE_SOURCE  1128
EA_ADD_SIZE         11DC
EA_ADD_SOURCE       1154
EA_AN               1218
EA_AN_DEC           1250
EA_AN_INC           1238
EA_AN_PNTR          1224
EA_BYTE_TO_STRING   13BE
EA_DN               120C
EA_IMM_BYTE         13E6
EA_IMM_LONG         1406
EA_IMM_WORD         13F6
EA_LONG_ADDR        1304
EA_LONG_TO_STRING   1312
EA_MOVE             1016
EA_MOVE_DEST        1076
EA_MOVE_SIZE        10BE
EA_MOVE_SOURCE      1026
EA_SIGN_EXT_16      1280
EA_SIGN_EXT_32      1298
EA_WORD_ADDR        1268
EA_WORD_TO_STRING   12B0
GET0TO2             146A
GET12TO13           1422
GET12TO15           1416
GET3TO5             1458
GET6TO8             1446
GET9TO11            1434
GETBIT8             147C
IMM_MODE            7
IMM_REG             4
LONG_MODE           7
LONG_REG            1
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
