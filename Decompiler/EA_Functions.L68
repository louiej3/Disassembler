00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/26/2014 12:09:39 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L #$Imm,A7
00000000                            39  
00000000  =0000E1D7                 40  Shift_Test1         EQU     %1110000111010111   ; Asl (A7)
00000000  =0000E1F8                 41  Shift_Test2         EQU     %1110000111111000   ; Asl $Word
00000000  =0000EF21                 42  Shift_Test3         EQU     %1110111100100001   ; Asl.B D7,D1
00000000  =0000E507                 43  Shift_Test4         EQU     %1110010100000111   ; Asl.B #2,D7
00000000  =0000E104                 44  Shift_Test5         EQU     %1110000100000100   ; Asl.B #8,D4
00000000                            45  
00000000  =0000041F                 46  Imm_Test1           EQU     %0000010000011111   ; SubI.B #$Imm,(A7)+
00000000  =00000479                 47  Imm_Test2           EQU     %0000010001111001   ; SubI.W #$Imm,$Long
00000000                            48  
00000000  =00005E09                 49  AddQ_Test1          EQU     %0101111000001001   ; AddQ.B #7,A1
00000000  =00005009                 50  AddQ_Test2          EQU     %0101000000001001   ; AddQ.B #8,A1
00000000                            51          
00001000                            52      ORG    $1000
00001000                            53      
00001000                            54  START:                  ; first instruction of program
00001000  267C 00000400             55          Move.L  #$0000400, A3
00001006                            56          
00001006                            57          ;Move.W  #$0034, (A3)
00001006  36FC 4030                 58          Move.W  #$4030, (A3)+
0000100A  26BC 12345678             59          Move.L  #$12345678, (A3)
00001010  554B                      60          Sub.W   #2, A3
00001012                            61          ;Move.L  #$12349999, (A3)
00001012                            62          ;Move.W  #$11, (A3)
00001012                            63          
00001012                            64          ;Move.W  #Test_Move1, D4
00001012                            65          ;Move.W  #Test_Move2, D4
00001012                            66          ;Move.W  #Test_Move3, D4
00001012                            67          ;Move.W  #Test_Move4, D4
00001012                            68          ;Move.W  #Test_Move5, D4
00001012                            69          ;Move.W  #Test_Move6, D4        
00001012                            70          ;Move.W  #Test_Move7, D4        
00001012                            71          ;Move.W  #Test_Move8, D4
00001012                            72          
00001012                            73          ;Move.W  #Add_Test1, D4
00001012                            74          ;Move.W  #Add_Test2, D4
00001012                            75          ;Move.W  #Add_Test3, D4
00001012                            76          ;Move.W  #Add_Test4, D4
00001012                            77          
00001012                            78          ;Move.W  #Shift_Test1, D4
00001012                            79          ;Move.W  #Shift_Test2, D4
00001012                            80          ;Move.W  #Shift_Test3, D4
00001012                            81          ;Move.W  #Shift_Test4, D4
00001012                            82          ;Move.W  #Shift_Test5, D4
00001012                            83          
00001012                            84          ;Move.W  #Imm_Test1, D4
00001012                            85          ;Move.W  #Imm_Test2, D4
00001012                            86          
00001012                            87          ;Move.W  #AddQ_Test1, D4
00001012  383C 5009                 88          Move.W  #AddQ_Test2, D4
00001016                            89                  
00001016                            90          ;Jmp     EA_MOVE     ; Branch to EA function for Move
00001016                            91          ;Jmp     EA_ADD
00001016                            92          ;Jmp     EA_BIT_SHIFT
00001016                            93          ;Jmp     EA_IMMEDIATE
00001016  4EF9 00001212             94          Jmp     EA_ADDQ
0000101C                            95  
0000101C                            96  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
0000101C                            97  ;-------------------- Effective Address Sub Routines --------------------;
0000101C                            98  ; These subroutines look for the correct effective address
0000101C                            99  ; in each OP code.
0000101C                           100  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
0000101C                           101  
0000101C                           102  ;=============================================;
0000101C                           103  ;--------------- EA Move/MoveA ---------------;
0000101C                           104  ;=============================================;
0000101C                           105  EA_MOVE
0000101C  4EB9 0000102C            106          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
00001022  1CFC 002C                107          Move.B  #',', (A6)+             ; Add a comma
00001026  4EB9 0000107C            108          Jsr     EA_MOVE_DEST            ; Add the EA for destination
0000102C                           109          
0000102C                           110          ; <Next instruction>
0000102C                           111                  
0000102C                           112  EA_MOVE_SOURCE  ; Find out Move's source
0000102C  4EB9 00001600            113          Jsr     GET3TO5                 ; Get source mode
00001032  1A00                     114          Move.B  D0, D5                  ; Move source mode to D5
00001034  4EB9 00001612            115          Jsr     Get0TO2                 ; Get source register
0000103A                           116          
0000103A                           117          ; List of valid effective addresses
0000103A  BA3C 0000                118          Cmp.B   #Dn_Mode, D5            ; Dn
0000103E  6700 0374                119          Beq     EA_DN
00001042                           120          
00001042  BA3C 0001                121          Cmp.B   #An_Mode, D5            ; An
00001046  6700 0378                122          Beq     EA_AN
0000104A                           123          
0000104A  BA3C 0002                124          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000104E  6700 037C                125          Beq     EA_AN_PNTR
00001052                           126          
00001052  BA3C 0003                127          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001056  6700 0388                128          Beq     EA_AN_INC
0000105A                           129          
0000105A  BA3C 0004                130          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000105E  6700 0398                131          Beq     EA_AN_DEC
00001062                           132          
00001062                           133          ; Comparing registers at this point because modes are the same
00001062  B03C 0000                134          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001066  6700 03A8                135          Beq     EA_WORD_ADDR
0000106A                           136          
0000106A  B03C 0001                137          Cmp.B   #Long_Reg, D0           ; (xxx).L
0000106E  6700 043C                138          Beq     EA_LONG_ADDR
00001072                           139          
00001072  B03C 0004                140          Cmp.B   #Imm_Reg, D0            ; #<data>
00001076  6700 004C                141          Beq     EA_MOVE_SIZE
0000107A                           142          
0000107A  4E75                     143          Rts
0000107C                           144          
0000107C                           145  EA_MOVE_DEST    ; Find out Move's destination
0000107C  4EB9 000015EE            146          Jsr     GET6TO8                 ; Get destination mode
00001082  1A00                     147          Move.B  D0, D5                  ; Move destination mode to D5
00001084  4EB9 000015DC            148          Jsr     GET9TO11                ; Get destination register
0000108A                           149          
0000108A                           150          ; List of valid effective addresses
0000108A  BA3C 0000                151          Cmp.B   #Dn_Mode, D5            ; Dn
0000108E  6700 0324                152          Beq     EA_DN
00001092                           153          
00001092  BA3C 0001                154          Cmp.B   #An_Mode, D5            ; An
00001096  6700 0328                155          Beq     EA_AN
0000109A                           156          
0000109A  BA3C 0002                157          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000109E  6700 032C                158          Beq     EA_AN_PNTR
000010A2                           159          
000010A2  BA3C 0003                160          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000010A6  6700 0338                161          Beq     EA_AN_INC
000010AA                           162          
000010AA  BA3C 0004                163          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000010AE  6700 0348                164          Beq     EA_AN_DEC
000010B2                           165          
000010B2                           166          ; Comparing registers at this point because modes are the same
000010B2  B03C 0000                167          Cmp.B   #Word_Reg, D0           ; (xxx).W
000010B6  6700 0358                168          Beq     EA_WORD_ADDR
000010BA                           169          
000010BA  B03C 0001                170          Cmp.B   #Long_Reg, D0           ; (xxx).L
000010BE  6700 03EC                171          Beq     EA_LONG_ADDR
000010C2                           172          
000010C2  4E75                     173          Rts
000010C4                           174          
000010C4                           175  EA_MOVE_SIZE    ; Find the size of immediate data being moved
000010C4  4EB9 000015CA            176          Jsr     GET12TO13               ; Get Move size
000010CA                           177  
000010CA  B03C 0001                178          Cmp.B   #%01, D0                ; Byte
000010CE  6700 04BE                179          Beq     EA_IMM_BYTE
000010D2                           180  
000010D2  B03C 0003                181          Cmp.B   #%11, D0                ; Word
000010D6  6700 04C6                182          Beq     EA_IMM_WORD
000010DA                           183          
000010DA  B03C 0002                184          Cmp.B   #%10, D0                ; Long
000010DE  6700 04CE                185          Beq     EA_IMM_LONG
000010E2                           186          
000010E2  4E75                     187          Rts
000010E4                           188  
000010E4                           189  ;===========================================;        
000010E4                           190  ;--------------- EA Add/AddA ---------------;
000010E4                           191  ;===========================================;       
000010E4                           192  EA_ADD  ; Figures out the EA for Add        
000010E4  4EB9 000015EE            193          Jsr     GET6TO8                 ; Isolate the Op mode
000010EA                           194          
000010EA  B03C 0003                195          Cmp.B   #%011, D0               ; Compare to AddA word
000010EE  6700 0028                196          Beq     EA_ADDA
000010F2                           197          
000010F2  B03C 0007                198          Cmp.B   #%111, D0               ; Compare to AddA long
000010F6  6700 0020                199          Beq     EA_ADDA
000010FA                           200  
000010FA  B03C 0000                201          Cmp.B   #%000, D0               ; Compare to Add source byte
000010FE  6700 002E                202          Beq     EA_ADD_OPMODE_SOURCE
00001102                           203          
00001102  B03C 0001                204          Cmp.B   #%001, D0               ; Compare to Add source word
00001106  6700 0026                205          Beq     EA_ADD_OPMODE_SOURCE
0000110A                           206          
0000110A  B03C 0002                207          Cmp.B   #%010, D0               ; Compare to Add source Long
0000110E  6700 001E                208          Beq     EA_ADD_OPMODE_SOURCE
00001112                           209          
00001112  4EF9 00001144            210          Jmp     EA_ADD_OPMODE_DEST      ; Must be an Add destination if none of the above
00001118                           211          
00001118                           212  EA_ADDA ; Figures out the EA for AddA
00001118  4EB9 0000115A            213          Jsr     EA_ADD_SOURCE           ; Get the source EA
0000111E  1CFC 002C                214          Move.B  #',', (A6)+             ; Add a comma
00001122  4EB9 000015DC            215          Jsr     GET9TO11                ; Get the register
00001128  4EB9 000013C0            216          Jsr     EA_AN                   ; Add An
0000112E                           217          
0000112E                           218          ; <Next instruction>
0000112E                           219          
0000112E                           220  EA_ADD_OPMODE_SOURCE    ; Finds the EA for Add if it is for the source
0000112E  4EB9 0000115A            221          Jsr     EA_ADD_SOURCE           ; Get the source EA
00001134  1CFC 002C                222          Move.B  #',', (A6)+             ; Add a comma
00001138  4EB9 000015DC            223          Jsr     GET9TO11                ; Get the register
0000113E  4EB9 000013B4            224          Jsr     EA_DN                   ; Add Dn
00001144                           225          
00001144                           226          ; <Next instruction>
00001144                           227          
00001144                           228  EA_ADD_OPMODE_DEST      ; Finds the EA for Add if it is for the destination
00001144  4EB9 000015DC            229          Jsr     GET9TO11                ; Get the register
0000114A  4EB9 000013B4            230          Jsr     EA_DN                   ; Add Dn
00001150  1CFC 002C                231          Move.B  #',', (A6)+             ; Add a comma
00001154  4EB9 000011AA            232          Jsr     EA_ADD_DEST             ; Get the destination EA 
0000115A                           233          
0000115A                           234          ; <Next instruction>
0000115A                           235  
0000115A                           236  EA_ADD_SOURCE   ; Find out Add source
0000115A  4EB9 00001600            237          Jsr     GET3TO5                 ; Get source mode
00001160  1A00                     238          Move.B  D0, D5                  ; Move source mode to D5
00001162  4EB9 00001612            239          Jsr     Get0TO2                 ; Get source register
00001168                           240          
00001168                           241          ; List of valid effective addresses
00001168  BA3C 0000                242          Cmp.B   #Dn_Mode, D5            ; Dn
0000116C  6700 0246                243          Beq     EA_DN
00001170                           244          
00001170  BA3C 0001                245          Cmp.B   #An_Mode, D5            ; An
00001174  6700 024A                246          Beq     EA_AN
00001178                           247          
00001178  BA3C 0002                248          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000117C  6700 024E                249          Beq     EA_AN_PNTR
00001180                           250          
00001180  BA3C 0003                251          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001184  6700 025A                252          Beq     EA_AN_INC
00001188                           253          
00001188  BA3C 0004                254          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000118C  6700 026A                255          Beq     EA_AN_DEC
00001190                           256          
00001190                           257          ; Comparing registers at this point because modes are the same
00001190  B03C 0000                258          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001194  6700 027A                259          Beq     EA_WORD_ADDR
00001198                           260          
00001198  B03C 0001                261          Cmp.B   #Long_Reg, D0           ; (xxx).L
0000119C  6700 030E                262          Beq     EA_LONG_ADDR
000011A0                           263          
000011A0  B03C 0004                264          Cmp.B   #Imm_Reg, D0            ; #<data>
000011A4  6700 003C                265          Beq     EA_ADD_SIZE
000011A8                           266          
000011A8  4E75                     267          Rts
000011AA                           268          
000011AA                           269  EA_ADD_DEST ; Find out Add destination
000011AA  4EB9 00001600            270          Jsr     GET3TO5                 ; Get destination mode
000011B0  1A00                     271          Move.B  D0, D5                  ; Move destination mode to D5
000011B2  4EB9 00001612            272          Jsr     Get0TO2                 ; Get destination register
000011B8                           273          
000011B8                           274          ; List of valid effective addresses
000011B8  BA3C 0002                275          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000011BC  6700 020E                276          Beq     EA_AN_PNTR
000011C0                           277          
000011C0  BA3C 0003                278          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000011C4  6700 021A                279          Beq     EA_AN_INC
000011C8                           280          
000011C8  BA3C 0004                281          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000011CC  6700 022A                282          Beq     EA_AN_DEC
000011D0                           283          
000011D0                           284          ; Comparing registers at this point because modes are the same
000011D0  B03C 0000                285          Cmp.B   #Word_Reg, D0           ; (xxx).W
000011D4  6700 023A                286          Beq     EA_WORD_ADDR
000011D8                           287          
000011D8  B03C 0001                288          Cmp.B   #Long_Reg, D0           ; (xxx).L
000011DC  6700 02CE                289          Beq     EA_LONG_ADDR
000011E0                           290                  
000011E0  4E75                     291          Rts
000011E2                           292          
000011E2                           293  EA_ADD_SIZE ; Find the size of immediate data being moved
000011E2  4EB9 000015EE            294          Jsr     GET6TO8                 ; Get Move size
000011E8                           295  
000011E8  B03C 0000                296          Cmp.B   #%000, D0               ; Byte
000011EC  6700 03A0                297          Beq     EA_IMM_BYTE
000011F0                           298  
000011F0  B03C 0001                299          Cmp.B   #%001, D0               ; Word
000011F4  6700 03A8                300          Beq     EA_IMM_WORD
000011F8                           301          
000011F8  B03C 0002                302          Cmp.B   #%010, D0               ; Long
000011FC  6700 03B0                303          Beq     EA_IMM_LONG
00001200                           304          
00001200  B03C 0003                305          Cmp.B   #%011, D0               ; AddA Word
00001204  6700 0398                306          Beq     EA_IMM_WORD
00001208                           307     
00001208  B03C 0007                308          Cmp.B   #%111, D0               ; AddA Long
0000120C  6700 03A0                309          Beq     EA_IMM_LONG
00001210                           310          
00001210  4E75                     311          Rts
00001212                           312          
00001212                           313  ;=================================================;        
00001212                           314  ;-------------------- EA AddQ --------------------;
00001212                           315  ;=================================================;
00001212                           316  EA_ADDQ ; Figures out the EA for AddQ
00001212  4EB9 00001222            317          Jsr     EA_ADDQ_CHECK_8         ; Get the immediate value
00001218  1CFC 002C                318          Move.B  #',', (A6)+             ; Add a comma
0000121C  4EB9 00001246            319          Jsr     EA_ADDQ_DEST            ; Add the destination
00001222                           320  
00001222                           321  EA_ADDQ_CHECK_8 ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001222  4EB9 000015DC            322          Jsr     GET9TO11                ; Isolate the count/register bits
00001228                           323          
00001228  B03C 0000                324          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
0000122C  6E00 000C                325          Bgt     EA_ADDQ_IMMEDIATE
00001230                           326          
00001230  103C 0008                327          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001234                           328          
00001234  4EF9 0000123A            329          Jmp     EA_ADDQ_IMMEDIATE
0000123A                           330          
0000123A                           331  EA_ADDQ_IMMEDIATE   ; Adds an immediate value before the comma
0000123A  1CFC 0023                332          Move.B  #'#', (A6)+
0000123E  0600 0030                333          Add.B   #$30, D0
00001242  1CC0                     334          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001244                           335          
00001244  4E75                     336          Rts
00001246                           337          
00001246                           338  EA_ADDQ_DEST    ; Determines the destination       
00001246  4EB9 00001600            339          Jsr     GET3TO5                 ; Get source mode
0000124C  1A00                     340          Move.B  D0, D5                  ; Move source mode to D5
0000124E  4EB9 00001612            341          Jsr     Get0TO2                 ; Get source register
00001254                           342          
00001254                           343          ; List of valid effective addresses
00001254  BA3C 0000                344          Cmp.B   #Dn_Mode, D5            ; Dn
00001258  6700 015A                345          Beq     EA_DN
0000125C                           346          
0000125C  BA3C 0001                347          Cmp.B   #An_Mode, D5            ; An
00001260  6700 015E                348          Beq     EA_AN
00001264                           349          
00001264  BA3C 0002                350          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001268  6700 0162                351          Beq     EA_AN_PNTR
0000126C                           352          
0000126C  BA3C 0003                353          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001270  6700 016E                354          Beq     EA_AN_INC
00001274                           355          
00001274  BA3C 0004                356          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001278  6700 017E                357          Beq     EA_AN_DEC
0000127C                           358          
0000127C                           359          ; Comparing registers at this point because modes are the same
0000127C  B03C 0000                360          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001280  6700 018E                361          Beq     EA_WORD_ADDR
00001284                           362          
00001284  B03C 0001                363          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001288  6700 0222                364          Beq     EA_LONG_ADDR
0000128C                           365          
0000128C                           366  ;=========================================================;        
0000128C                           367  ;---------------------- EA Sub/SubA ----------------------;
0000128C                           368  ; Jumps straight to EA_ADD because the EA for Add/AddA and
0000128C                           369  ; Sub/SubA are exactly the same.
0000128C                           370  ;=========================================================;
0000128C                           371  EA_SUB
0000128C  4EF8 10E4                372          Jmp     EA_ADD
00001290                           373  
00001290                           374  ;=========================================================;        
00001290                           375  ;---------------------- EA Cmp/CmpA ----------------------;
00001290                           376  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001290                           377  ; Cmp/CmpA are exactly the same.
00001290                           378  ;=========================================================;
00001290                           379  EA_CMP       
00001290  4EF8 10E4                380          Jmp     EA_ADD
00001294                           381          
00001294                           382  ;=========================================================;        
00001294                           383  ;------------------------ EA Lea -------------------------;
00001294                           384  ; Jumps straight to EA_ADD because the EA for AddA and Lea
00001294                           385  ; are exactly the same.
00001294                           386  ;=========================================================;
00001294                           387  EA_LEA
00001294  4EF8 10E4                388          Jmp     EA_ADD
00001298                           389          
00001298                           390  ;=========================================================;        
00001298                           391  ;------------------------ EA And -------------------------;
00001298                           392  ; Jumps straight to EA_ADD because the EA for Add and And
00001298                           393  ; are exactly the same.
00001298                           394  ;=========================================================;
00001298                           395  EA_AND
00001298  4EF8 10E4                396          Jmp     EA_ADD
0000129C                           397  
0000129C                           398  ;=========================================================;
0000129C                           399  ;--------------------- EA Bit Shift ----------------------;
0000129C                           400  ; Finds the EA for ASd, LSd, ROd. All of these OP codes
0000129C                           401  ; are combined because the EA for each code is exactly the
0000129C                           402  ; same.
0000129C                           403  ;=========================================================;
0000129C                           404  EA_BIT_SHIFT    ; Figures out the EA for bit shift functions
0000129C  4EB9 00001636            405          Jsr     GET6TO7
000012A2                           406          
000012A2  B03C 0003                407          Cmp.B   #%11, D0                ; If bits 6 and 7 are not %11, then we are shifting a register
000012A6  6600 0040                408          Bne     EA_SHIFT_REGISTER
000012AA                           409          
000012AA  4EB9 000012B0            410          Jsr     EA_SHIFT_MEMORY         ; If bits 6 and 7 are %11, then we are shifting memory
000012B0                           411          
000012B0                           412          ; <Next instruction>
000012B0                           413                  
000012B0                           414  EA_SHIFT_MEMORY ; Adds the correct EA for a memory shift
000012B0  4EB9 00001600            415          Jsr     GET3TO5                 ; Get source mode
000012B6  1A00                     416          Move.B  D0, D5                  ; Move source mode to D5
000012B8  4EB9 00001612            417          Jsr     Get0TO2                 ; Get source register
000012BE                           418          
000012BE                           419          ; List of valid effective addresses        
000012BE  BA3C 0002                420          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000012C2  6700 0108                421          Beq     EA_AN_PNTR
000012C6                           422          
000012C6  BA3C 0003                423          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000012CA  6700 0114                424          Beq     EA_AN_INC
000012CE                           425          
000012CE  BA3C 0004                426          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000012D2  6700 0124                427          Beq     EA_AN_DEC
000012D6                           428          
000012D6                           429          ; Comparing registers at this point because modes are the same
000012D6  B03C 0000                430          Cmp.B   #Word_Reg, D0           ; (xxx).W
000012DA  6700 0134                431          Beq     EA_WORD_ADDR
000012DE                           432          
000012DE  B03C 0001                433          Cmp.B   #Long_Reg, D0           ; (xxx).L
000012E2  6700 01C8                434          Beq     EA_LONG_ADDR
000012E6                           435          
000012E6  4E75                     436          Rts
000012E8                           437          
000012E8                           438  EA_SHIFT_REGISTER   ; Figure out if we are shifting by #<data> or by the value in a data register
000012E8  4EB9 00001648            439          Jsr     GETBIT5
000012EE                           440          
000012EE  B03C 0000                441          Cmp.B   #0, D0                  ; Check if bit 5 is %0
000012F2  6700 0008                442          Beq     EA_SHIFT_CHECK_8
000012F6                           443          
000012F6  4EF9 00001324            444          Jmp     EA_SHIFT_DN             ; If it's not, we are shifting from a data register
000012FC                           445          
000012FC                           446  EA_SHIFT_CHECK_8    ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
000012FC  4EB9 000015DC            447          Jsr     GET9TO11                ; Isolate the count/register bits
00001302                           448          
00001302  B03C 0000                449          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
00001306  6E00 000C                450          Bgt     EA_SHIFT_IMMEDIATE
0000130A                           451          
0000130A  103C 0008                452          Move.B  #8, D0                  ; Else, use 8 as the immediate value
0000130E                           453                  
0000130E  4EF9 00001314            454          Jmp     EA_SHIFT_IMMEDIATE
00001314                           455          
00001314                           456  EA_SHIFT_IMMEDIATE  ; Adds an immediate value before the comma
00001314  1CFC 0023                457          Move.B  #'#', (A6)+
00001318  0600 0030                458          Add.B   #$30, D0
0000131C  1CC0                     459          Move.B  D0, (A6)+               ; Add the immediate value to the string
0000131E                           460  
0000131E  4EF9 00001336            461          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it
00001324                           462          
00001324                           463  EA_SHIFT_DN ; Adds a data register before the comma
00001324  4EB9 000015DC            464          Jsr     GET9TO11                ; Isolate the data register bits
0000132A                           465          
0000132A  4EB9 000013B4            466          Jsr     EA_DN                   ; Add the data register to the string
00001330                           467          
00001330  4EF9 00001336            468          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it 
00001336                           469          
00001336                           470  EA_SHIFT_COMMA  ; Adds the comma and everything after it to the string
00001336  1CFC 002C                471          Move.B  #',', (A6)+
0000133A                           472          
0000133A  4EB9 00001612            473          Jsr     GET0TO2                 ; Get the register number
00001340                           474          
00001340  4EB9 000013B4            475          Jsr     EA_DN                   ; Add the register
00001346                           476          
00001346                           477          ; <Next instruction>
00001346                           478  
00001346                           479  ;============================================;        
00001346                           480  ;--------------- EA Immediate ---------------;
00001346                           481  ;============================================;
00001346                           482  EA_IMMEDIATE    ; Figures out the EA for immediate data OP codes
00001346  4EB9 00001356            483          Jsr     EA_IMMEDIATE_SIZE       ; Get the size of the immediate data and add to string
0000134C  1CFC 002C                484          Move.B  #',', (A6)+             ; Add a comma
00001350  4EB9 00001376            485          Jsr     EA_IMMEDIATE_DEST       ; Add the destination EA
00001356                           486          
00001356                           487          ; <Next instruction>
00001356                           488          
00001356                           489  EA_IMMEDIATE_SIZE   ; Determines the size of the immediate data and adds it
00001356  4EB9 00001636            490          Jsr     GET6TO7                 ; Isolate the size bits
0000135C                           491                  
0000135C  B03C 0001                492          Cmp.B   #%01, D0                ; Immediate word
00001360  6700 023C                493          Beq     EA_IMM_WORD
00001364                           494          
00001364  B03C 0002                495          Cmp.B   #%10, D0                ; Immediate long
00001368  6700 0244                496          Beq     EA_IMM_LONG
0000136C                           497          
0000136C  524B                     498          AddA.W  #1, A3                  ; Else, move the pointer forward by a byte get the next byte
0000136E  4EF9 0000158E            499          Jmp     EA_IMM_BYTE
00001374                           500          
00001374  4E75                     501          Rts
00001376                           502          
00001376                           503  EA_IMMEDIATE_DEST   ; Determines the destination EA
00001376  4EB9 00001600            504          Jsr     GET3TO5                 ; Get source mode
0000137C  1A00                     505          Move.B  D0, D5                  ; Move source mode to D5
0000137E  4EB9 00001612            506          Jsr     Get0TO2                 ; Get source register
00001384                           507       
00001384                           508          ; List of valid effective addresses
00001384  BA3C 0000                509          Cmp.B   #Dn_Mode, D5            ; Dn
00001388  6700 002A                510          Beq     EA_DN
0000138C                           511          
0000138C  BA3C 0002                512          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001390  6700 003A                513          Beq     EA_AN_PNTR
00001394                           514          
00001394  BA3C 0003                515          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001398  6700 0046                516          Beq     EA_AN_INC
0000139C                           517          
0000139C  BA3C 0004                518          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000013A0  6700 0056                519          Beq     EA_AN_DEC
000013A4                           520          
000013A4                           521          ; Comparing registers at this point because modes are the same
000013A4  B03C 0000                522          Cmp.B   #Word_Reg, D0           ; (xxx).W
000013A8  6700 0066                523          Beq     EA_WORD_ADDR
000013AC                           524          
000013AC  B03C 0001                525          Cmp.B   #Long_Reg, D0           ; (xxx).L
000013B0  6700 00FA                526          Beq     EA_LONG_ADDR
000013B4                           527                 
000013B4                           528  ;==========================================;        
000013B4                           529  ;---------- General EA functions ----------;
000013B4                           530  ;==========================================;
000013B4                           531  EA_DN   ; Adds Dn EA to string
000013B4  1CFC 0044                532          Move.B  #'D', (A6)+             
000013B8  0600 0030                533          Add.B   #$30, D0        
000013BC  1CC0                     534          Move.B  D0, (A6)+               
000013BE                           535                  
000013BE  4E75                     536          Rts
000013C0                           537  
000013C0                           538  EA_AN   ; Adds An EA to string
000013C0  1CFC 0041                539          Move.B  #'A', (A6)+
000013C4  0600 0030                540          Add.B   #$30, D0    
000013C8  1CC0                     541          Move.B  D0, (A6)+               
000013CA                           542                  
000013CA  4E75                     543          Rts
000013CC                           544  
000013CC                           545  EA_AN_PNTR  ; Adds (An) EA to string
000013CC  1CFC 0028                546          Move.B  #'(', (A6)+
000013D0  1CFC 0041                547          Move.B  #'A', (A6)+
000013D4  0600 0030                548          Add.B   #$30, D0
000013D8  1CC0                     549          Move.B  D0, (A6)+
000013DA  1CFC 0029                550          Move.B  #')', (A6)+
000013DE                           551                  
000013DE  4E75                     552          Rts
000013E0                           553          
000013E0                           554  EA_AN_INC   ; Adds (An)+ EA to string
000013E0  1CFC 0028                555          Move.B  #'(', (A6)+
000013E4  1CFC 0041                556          Move.B  #'A', (A6)+
000013E8  0600 0030                557          Add.B   #$30, D0
000013EC  1CC0                     558          Move.B  D0, (A6)+
000013EE  1CFC 0029                559          Move.B  #')', (A6)+
000013F2  1CFC 002B                560          Move.B  #'+', (A6)+
000013F6                           561                  
000013F6  4E75                     562          Rts 
000013F8                           563          
000013F8                           564  EA_AN_DEC   ; Adds -(An) EA to string
000013F8  1CFC 002D                565          Move.B  #'-', (A6)+
000013FC  1CFC 0028                566          Move.B  #'(', (A6)+
00001400  1CFC 0041                567          Move.B  #'A', (A6)+
00001404  0600 0030                568          Add.B   #$30, D0
00001408  1CC0                     569          Move.B  D0, (A6)+
0000140A  1CFC 0029                570          Move.B  #')', (A6)+
0000140E                           571                  
0000140E  4E75                     572          Rts 
00001410                           573  
00001410                           574  EA_WORD_ADDR    ; Adds $Word to string
00001410  3C1B                     575          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
00001412                           576          
00001412  1CFC 0024                577          Move.B  #'$', (A6)+
00001416                           578          
00001416  BC7C 8000                579          Cmp.W   #$8000, D6          ; Word address is less than 8000
0000141A  6E00 000C                580          Bgt     EA_SIGN_EXT_16
0000141E                           581          
0000141E  BC7C 8000                582          Cmp.W   #$8000, D6          ; Word address is greater than 8000
00001422  6F00 001C                583          Ble     EA_SIGN_EXT_32
00001426                           584          
00001426  4E75                     585          Rts
00001428                           586                  
00001428                           587  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
00001428  1CFC 0030                588          Move.B  #'0', (A6)+
0000142C  1CFC 0030                589          Move.B  #'0', (A6)+
00001430  1CFC 0030                590          Move.B  #'0', (A6)+
00001434  1CFC 0030                591          Move.B  #'0', (A6)+
00001438                           592          
00001438  4EB9 00001458            593          Jsr     EA_WORD_TO_STRING       
0000143E                           594          
0000143E  4E75                     595          Rts
00001440                           596  
00001440                           597  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
00001440  1CFC 0046                598          Move.B  #'F', (A6)+
00001444  1CFC 0046                599          Move.B  #'F', (A6)+
00001448  1CFC 0046                600          Move.B  #'F', (A6)+
0000144C  1CFC 0046                601          Move.B  #'F', (A6)+
00001450                           602          
00001450  4EB9 00001458            603          Jsr     EA_WORD_TO_STRING   
00001456                           604          
00001456  4E75                     605          Rts
00001458                           606          
00001458                           607  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
00001458  4280                     608          Clr.L   D0              ; Clear D0
0000145A  3006                     609          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
0000145C                           610  
0000145C  123C 000C                611          Move.B  #12, D1         ; Grab bits 12 to 15
00001460  E268                     612          Lsr     D1, D0
00001462  0600 0030                613          Add.B   #$30, D0
00001466  1CC0                     614          Move.B  D0, (A6)+
00001468                           615          
00001468  4280                     616          Clr.L   D0
0000146A  3006                     617          Move.W  D6, D0
0000146C                           618          
0000146C  123C 0004                619          Move.B  #4, D1          ; Grab bits 8 to 11
00001470  E368                     620          Lsl     D1, D0
00001472  123C 000C                621          Move.B  #12, D1
00001476  E268                     622          Lsr     D1, D0  
00001478  0600 0030                623          Add.B   #$30, D0
0000147C  1CC0                     624          Move.B  D0, (A6)+
0000147E                           625          
0000147E  4280                     626          Clr.L   D0
00001480  3006                     627          Move.W  D6, D0
00001482                           628          
00001482  123C 0008                629          Move.B  #8, D1          ; Grab bits 4 to 7
00001486  E368                     630          Lsl     D1, D0
00001488  123C 000C                631          Move.B  #12, D1
0000148C  E268                     632          Lsr     D1, D0
0000148E  0600 0030                633          Add.B   #$30, D0
00001492  1CC0                     634          Move.B  D0, (A6)+
00001494                           635          
00001494  4280                     636          Clr.L   D0
00001496  3006                     637          Move.W  D6, D0
00001498                           638          
00001498  123C 000C                639          Move.B  #12, D1         ; Grab bits 0 to 3
0000149C  E368                     640          Lsl     D1, D0
0000149E  123C 000C                641          Move.B  #12, D1
000014A2  E268                     642          Lsr     D1, D0
000014A4  0600 0030                643          Add.B   #$30, D0
000014A8  1CC0                     644          Move.B  D0, (A6)+
000014AA                           645          
000014AA  4E75                     646          Rts
000014AC                           647          
000014AC                           648  EA_LONG_ADDR    ; Adds $Long to string
000014AC  2C1B                     649          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000014AE                           650          
000014AE  1CFC 0024                651          Move.B  #'$', (A6)+
000014B2                           652          
000014B2  4EB9 000014BA            653          Jsr     EA_LONG_TO_STRING
000014B8                           654  
000014B8  4E75                     655          Rts
000014BA                           656                  
000014BA                           657  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
000014BA  4280                     658          Clr.L   D0              ; Clear D0
000014BC  2006                     659          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
000014BE                           660  
000014BE  123C 001C                661          Move.B  #28, D1         ; Grab bits 28 to 31
000014C2  E2A8                     662          Lsr.L   D1, D0
000014C4  0600 0030                663          Add.B   #$30, D0
000014C8  1CC0                     664          Move.B  D0, (A6)+
000014CA                           665          
000014CA  4280                     666          Clr.L   D0             
000014CC  2006                     667          Move.L  D6, D0          
000014CE                           668          
000014CE  123C 0004                669          Move.B  #4, D1          ; Grab bits 24 to 27
000014D2  E3A8                     670          Lsl.L   D1, D0
000014D4  123C 001C                671          Move.B  #28, D1
000014D8  E2A8                     672          Lsr.L   D1, D0
000014DA  0600 0030                673          Add.B   #$30, D0
000014DE  1CC0                     674          Move.B  D0, (A6)+
000014E0                           675          
000014E0  4280                     676          Clr.L   D0             
000014E2  2006                     677          Move.L  D6, D0
000014E4                           678  
000014E4  123C 0008                679          Move.B  #8, D1          ; Grab bits 20 to 23
000014E8  E3A8                     680          Lsl.L   D1, D0
000014EA  123C 001C                681          Move.B  #28, D1
000014EE  E2A8                     682          Lsr.L   D1, D0
000014F0  0600 0030                683          Add.B   #$30, D0
000014F4  1CC0                     684          Move.B  D0, (A6)+
000014F6                           685          
000014F6  4280                     686          Clr.L   D0             
000014F8  2006                     687          Move.L  D6, D0
000014FA                           688  
000014FA  123C 000C                689          Move.B  #12, D1         ; Grab bits 16 to 19
000014FE  E3A8                     690          Lsl.L   D1, D0
00001500  123C 001C                691          Move.B  #28, D1
00001504  E2A8                     692          Lsr.L   D1, D0
00001506  0600 0030                693          Add.B   #$30, D0
0000150A  1CC0                     694          Move.B  D0, (A6)+
0000150C                           695          
0000150C  4280                     696          Clr.L   D0             
0000150E  2006                     697          Move.L  D6, D0
00001510                           698  
00001510  123C 0010                699          Move.B  #16, D1         ; Grab bits 12 to 15
00001514  E3A8                     700          Lsl.L   D1, D0
00001516  123C 001C                701          Move.B  #28, D1
0000151A  E2A8                     702          Lsr.L   D1, D0
0000151C  0600 0030                703          Add.B   #$30, D0
00001520  1CC0                     704          Move.B  D0, (A6)+
00001522                           705          
00001522  4280                     706          Clr.L   D0             
00001524  2006                     707          Move.L  D6, D0
00001526                           708          
00001526  123C 0014                709          Move.B  #20, D1         ; Grab bits 8 to 11
0000152A  E3A8                     710          Lsl.L   D1, D0
0000152C  123C 001C                711          Move.B  #28, D1
00001530  E2A8                     712          Lsr.L   D1, D0
00001532  0600 0030                713          Add.B   #$30, D0
00001536  1CC0                     714          Move.B  D0, (A6)+
00001538                           715          
00001538  4280                     716          Clr.L   D0             
0000153A  2006                     717          Move.L  D6, D0
0000153C                           718  
0000153C  123C 0018                719          Move.B  #24, D1         ; Grab bits 4 to 7
00001540  E3A8                     720          Lsl.L   D1, D0
00001542  123C 001C                721          Move.B  #28, D1
00001546  E2A8                     722          Lsr.L   D1, D0
00001548  0600 0030                723          Add.B   #$30, D0
0000154C  1CC0                     724          Move.B  D0, (A6)+
0000154E                           725          
0000154E  4280                     726          Clr.L   D0             
00001550  2006                     727          Move.L  D6, D0
00001552                           728  
00001552  123C 001C                729          Move.B  #28, D1         ; Grab bits 0 to 3
00001556  E3A8                     730          Lsl.L   D1, D0
00001558  123C 001C                731          Move.B  #28, D1
0000155C  E2A8                     732          Lsr.L   D1, D0
0000155E  0600 0030                733          Add.B   #$30, D0
00001562  1CC0                     734          Move.B  D0, (A6)+
00001564                           735          
00001564  4E75                     736          Rts
00001566                           737          
00001566                           738  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
00001566  4280                     739          Clr.L   D0              ; Clear D0
00001568  2006                     740          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
0000156A                           741  
0000156A  123C 0004                742          Move.B  #4, D1          ; Grab bits 4 to 7
0000156E  E228                     743          Lsr.B   D1, D0
00001570  0600 0030                744          Add.B   #$30, D0
00001574  1CC0                     745          Move.B  D0, (A6)+
00001576                           746          
00001576  4280                     747          Clr.L   D0             
00001578  2006                     748          Move.L  D6, D0          
0000157A                           749          
0000157A  123C 0004                750          Move.B  #4, D1          ; Grab bits 0 to 3
0000157E  E328                     751          Lsl.B   D1, D0
00001580  123C 0004                752          Move.B  #4, D1
00001584  E228                     753          Lsr.B   D1, D0
00001586  0600 0030                754          Add.B   #$30, D0
0000158A  1CC0                     755          Move.B  D0, (A6)+
0000158C                           756          
0000158C  4E75                     757          Rts
0000158E                           758  
0000158E                           759  EA_IMM_BYTE ; Finds the immediate byte data
0000158E  1C1B                     760          Move.B  (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
00001590                           761          
00001590  1CFC 0023                762          Move.B  #'#', (A6)+         
00001594  1CFC 0024                763          Move.B  #'$', (A6)+         
00001598                           764          
00001598  4EB8 1566                765          Jsr     EA_BYTE_TO_STRING    ; Add the byte to the string
0000159C                           766          
0000159C  4E75                     767          Rts
0000159E                           768                  
0000159E                           769  EA_IMM_WORD ; Finds the immediate word data
0000159E  3C1B                     770          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
000015A0                           771          
000015A0  1CFC 0023                772          Move.B  #'#', (A6)+         
000015A4  1CFC 0024                773          Move.B  #'$', (A6)+         
000015A8                           774          
000015A8  4EB8 1458                775          Jsr     EA_WORD_TO_STRING    ; Add the word to the string
000015AC                           776          
000015AC  4E75                     777          Rts
000015AE                           778          
000015AE                           779  EA_IMM_LONG ; Finds the immediate long data
000015AE  2C1B                     780          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
000015B0                           781          
000015B0  1CFC 0023                782          Move.B  #'#', (A6)+
000015B4  1CFC 0024                783          Move.B  #'$', (A6)+
000015B8                           784          
000015B8  4EB8 14BA                785          Jsr     EA_LONG_TO_STRING    ; Add the long to the string
000015BC                           786          
000015BC  4E75                     787          Rts
000015BE                           788  
000015BE                           789  ;===========================================================;       
000015BE                           790  ;---------------- Bit Chopping Sub Routines ----------------;
000015BE                           791  ; These Sub Routines Chop a WORD size piece of data from
000015BE                           792  ; Data register 4 into a smaller piece, leaving just the
000015BE                           793  ; Piece in register 0 while leaving the original piece
000015BE                           794  ; of data intact.
000015BE                           795  ;===========================================================;
000015BE                           796  GET12TO15
000015BE  4280                     797          CLR.L   D0
000015C0  3004                     798          Move.W  D4, D0
000015C2                           799                  
000015C2  123C 000C                800          Move.B  #12, D1
000015C6  E268                     801          LSR     D1, D0
000015C8                           802                  
000015C8  4E75                     803          RTS
000015CA                           804  
000015CA                           805  GET12TO13
000015CA  4280                     806          CLR.L   D0
000015CC  3004                     807          Move.W  D4, D0
000015CE                           808          
000015CE  123C 0002                809          Move.B  #2, D1
000015D2  E368                     810          LSL     D1, D0
000015D4                           811          
000015D4  123C 000E                812          Move.B  #14, D1
000015D8  E268                     813          LSR     D1, D0
000015DA                           814          
000015DA  4E75                     815          RTS
000015DC                           816                  
000015DC                           817  GET9TO11        
000015DC  4280                     818          CLR.L   D0
000015DE  3004                     819          Move.W  D4, D0
000015E0                           820                  
000015E0  123C 0004                821          Move.B  #4, D1
000015E4  E368                     822          LSL     D1, D0
000015E6                           823                  
000015E6  123C 000D                824          Move.B  #13, D1
000015EA  E268                     825          LSR     D1, D0
000015EC                           826                  
000015EC  4E75                     827          RTS
000015EE                           828                  
000015EE                           829  GET6TO8 
000015EE  4280                     830          CLR.L   D0
000015F0  3004                     831          Move.W  D4, D0
000015F2                           832                  
000015F2  123C 0007                833          Move.B  #7, D1
000015F6  E368                     834          LSL     D1, D0
000015F8                           835                  
000015F8  123C 000D                836          Move.B  #13, D1
000015FC  E268                     837          LSR     D1, D0
000015FE                           838                  
000015FE  4E75                     839          RTS
00001600                           840                  
00001600                           841  GET3TO5 
00001600  4280                     842          CLR.L   D0
00001602  3004                     843          Move.W  D4, D0
00001604                           844                  
00001604  123C 000A                845          Move.B  #10, D1
00001608  E368                     846          LSL     D1, D0
0000160A                           847                  
0000160A  123C 000D                848          Move.B  #13, D1
0000160E  E268                     849          LSR     D1, D0
00001610                           850                  
00001610  4E75                     851          RTS
00001612                           852  GET0TO2 
00001612  4280                     853          CLR.L   D0
00001614  3004                     854          Move.W  D4, D0
00001616                           855                  
00001616  123C 000D                856          Move.B  #13, D1
0000161A  E368                     857          LSL     D1, D0
0000161C                           858                  
0000161C  123C 000D                859          Move.B  #13, D1
00001620  E268                     860          LSR     D1, D0
00001622                           861                  
00001622  4E75                     862          RTS
00001624                           863  GETBIT8
00001624  4280                     864          CLR.L   D0
00001626  3004                     865          Move.W  D4, D0
00001628                           866                  
00001628  123C 0007                867          Move.B  #7, D1
0000162C  E368                     868          LSL     D1, D0
0000162E                           869                  
0000162E  123C 000F                870          Move.B  #15, D1
00001632  E268                     871          LSR     D1, D0
00001634                           872                  
00001634  4E75                     873          RTS 
00001636                           874          
00001636                           875  GET6TO7
00001636  4280                     876          Clr.L   D0
00001638  3004                     877          Move.W  D4, D0
0000163A                           878          
0000163A  123C 0008                879          Move.B  #8, D1
0000163E  E368                     880          Lsl     D1, D0
00001640                           881          
00001640  123C 000E                882          Move.B  #14, D1
00001644  E268                     883          Lsr     D1, D0
00001646                           884          
00001646  4E75                     885          Rts
00001648                           886          
00001648                           887  GETBIT5
00001648  4280                     888          Clr.L   D0
0000164A  3004                     889          Move.W  D4, D0
0000164C                           890          
0000164C  123C 000A                891          Move.B  #10, D1
00001650  E368                     892          Lsl     D1, D0
00001652                           893          
00001652  123C 000F                894          Move.B  #15, D1
00001656  E268                     895          Lsr     D1, D0
00001658                           896          
00001658  4E75                     897          Rts
0000165A                           898  
0000165A                           899  
0000165A                           900      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_TEST1          5E09
ADDQ_TEST2          5009
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_ADD              10E4
EA_ADDA             1118
EA_ADDQ             1212
EA_ADDQ_CHECK_8     1222
EA_ADDQ_DEST        1246
EA_ADDQ_IMMEDIATE   123A
EA_ADD_DEST         11AA
EA_ADD_OPMODE_DEST  1144
EA_ADD_OPMODE_SOURCE  112E
EA_ADD_SIZE         11E2
EA_ADD_SOURCE       115A
EA_AN               13C0
EA_AND              1298
EA_AN_DEC           13F8
EA_AN_INC           13E0
EA_AN_PNTR          13CC
EA_BIT_SHIFT        129C
EA_BYTE_TO_STRING   1566
EA_CMP              1290
EA_DN               13B4
EA_IMMEDIATE        1346
EA_IMMEDIATE_DEST   1376
EA_IMMEDIATE_SIZE   1356
EA_IMM_BYTE         158E
EA_IMM_LONG         15AE
EA_IMM_WORD         159E
EA_LEA              1294
EA_LONG_ADDR        14AC
EA_LONG_TO_STRING   14BA
EA_MOVE             101C
EA_MOVE_DEST        107C
EA_MOVE_SIZE        10C4
EA_MOVE_SOURCE      102C
EA_SHIFT_CHECK_8    12FC
EA_SHIFT_COMMA      1336
EA_SHIFT_DN         1324
EA_SHIFT_IMMEDIATE  1314
EA_SHIFT_MEMORY     12B0
EA_SHIFT_REGISTER   12E8
EA_SIGN_EXT_16      1428
EA_SIGN_EXT_32      1440
EA_SUB              128C
EA_WORD_ADDR        1410
EA_WORD_TO_STRING   1458
GET0TO2             1612
GET12TO13           15CA
GET12TO15           15BE
GET3TO5             1600
GET6TO7             1636
GET6TO8             15EE
GET9TO11            15DC
GETBIT5             1648
GETBIT8             1624
IMM_MODE            7
IMM_REG             4
IMM_TEST1           41F
IMM_TEST2           479
LONG_MODE           7
LONG_REG            1
SHIFT_TEST1         E1D7
SHIFT_TEST2         E1F8
SHIFT_TEST3         EF21
SHIFT_TEST4         E507
SHIFT_TEST5         E104
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
