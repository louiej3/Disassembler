00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/27/2014 12:58:34 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L $Long,A7
00000000                            39  
00000000  =0000E1D7                 40  Shift_Test1         EQU     %1110000111010111   ; Asl (A7)
00000000  =0000E1F8                 41  Shift_Test2         EQU     %1110000111111000   ; Asl $Word
00000000  =0000EF21                 42  Shift_Test3         EQU     %1110111100100001   ; Asl.B D7,D1
00000000  =0000E507                 43  Shift_Test4         EQU     %1110010100000111   ; Asl.B #2,D7
00000000  =0000E104                 44  Shift_Test5         EQU     %1110000100000100   ; Asl.B #8,D4
00000000                            45  
00000000  =0000041F                 46  Imm_Test1           EQU     %0000010000011111   ; SubI.B #$Imm,(A7)+
00000000  =00000479                 47  Imm_Test2           EQU     %0000010001111001   ; SubI.W #$Imm,$Long
00000000                            48  
00000000  =00005E09                 49  AddQ_Test1          EQU     %0101111000001001   ; AddQ.B #7,A1
00000000  =00005009                 50  AddQ_Test2          EQU     %0101000000001001   ; AddQ.B #8,A1
00000000                            51          
00001000                            52      ORG    $1000
00001000                            53      
00001000                            54  START:                  ; first instruction of program
00001000  267C 00000400             55          Move.L  #$0000400, A3
00001006                            56          
00001006                            57          ;Move.W  #$0034, (A3)
00001006                            58          ;Move.W  #$4030, (A3)+
00001006  26BC 12345678             59          Move.L  #$12345678, (A3)
0000100C                            60          ;Sub.W   #2, A3
0000100C                            61          ;Move.L  #$12349999, (A3)
0000100C                            62          ;Move.W  #$11, (A3)
0000100C                            63          
0000100C                            64          ;Move.W  #Test_Move1, D4
0000100C                            65          ;Move.W  #Test_Move2, D4
0000100C                            66          ;Move.W  #Test_Move3, D4
0000100C                            67          ;Move.W  #Test_Move4, D4
0000100C                            68          ;Move.W  #Test_Move5, D4
0000100C                            69          ;Move.W  #Test_Move6, D4        
0000100C                            70          ;Move.W  #Test_Move7, D4        
0000100C                            71          ;Move.W  #Test_Move8, D4
0000100C                            72          
0000100C                            73          ;Move.W  #Add_Test1, D4
0000100C                            74          ;Move.W  #Add_Test2, D4
0000100C                            75          ;Move.W  #Add_Test3, D4
0000100C                            76          ;Move.W  #Add_Test4, D4
0000100C                            77          
0000100C                            78          ;Move.W  #Shift_Test1, D4
0000100C                            79          ;Move.W  #Shift_Test2, D4
0000100C                            80          ;Move.W  #Shift_Test3, D4
0000100C                            81          ;Move.W  #Shift_Test4, D4
0000100C                            82          ;Move.W  #Shift_Test5, D4
0000100C                            83          
0000100C                            84          ;Move.W  #Imm_Test1, D4
0000100C                            85          ;Move.W  #Imm_Test2, D4
0000100C                            86          
0000100C  383C 5E09                 87          Move.W  #AddQ_Test1, D4
00001010                            88          ;Move.W  #AddQ_Test2, D4
00001010                            89                  
00001010                            90          ;Jmp     EA_MOVE     ; Branch to EA function for Move
00001010                            91          ;Jmp     EA_ADD
00001010                            92          ;Jmp     EA_BIT_SHIFT
00001010                            93          ;Jmp     EA_IMMEDIATE
00001010  4EF9 00001154             94          Jmp     EA_ADDQ
00001016                            95  
00001016                            96  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
00001016                            97  ;-------------------- Effective Address Sub Routines --------------------;
00001016                            98  ; These subroutines look for the correct effective address
00001016                            99  ; in each OP code.
00001016                           100  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
00001016                           101  
00001016                           102  ;=============================================;
00001016                           103  ;--------------- EA Move/MoveA ---------------;
00001016                           104  ;=============================================;
00001016                           105  EA_MOVE
00001016  4EB9 00001026            106          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
0000101C  1CFC 002C                107          Move.B  #',', (A6)+             ; Add a comma
00001020  4EB9 00001036            108          Jsr     EA_MOVE_DEST            ; Add the EA for destination
00001026                           109          
00001026                           110          ; <Next instruction>
00001026                           111                  
00001026                           112  EA_MOVE_SOURCE  ; Find out Move's source
00001026  4EB9 000014C6            113          Jsr     EA_0TO5                 ; Get the EA
0000102C                           114          
0000102C  B03C 0004                115          Cmp.B   #Imm_Reg, D0            ; #<data>
00001030  6700 004C                116          Beq     EA_MOVE_SIZE
00001034                           117          
00001034  4E75                     118          Rts
00001036                           119          
00001036                           120  EA_MOVE_DEST    ; Find out Move's destination
00001036  4EB9 0000153E            121          Jsr     GET6TO8                 ; Get destination mode
0000103C  1A00                     122          Move.B  D0, D5                  ; Move destination mode to D5
0000103E  4EB9 0000152C            123          Jsr     GET9TO11                ; Get destination register
00001044                           124          
00001044                           125          ; List of valid effective addresses
00001044  BA3C 0000                126          Cmp.B   #Dn_Mode, D5            ; Dn
00001048  6700 0272                127          Beq     EA_DN
0000104C                           128          
0000104C  BA3C 0001                129          Cmp.B   #An_Mode, D5            ; An
00001050  6700 0276                130          Beq     EA_AN
00001054                           131          
00001054  BA3C 0002                132          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001058  6700 027A                133          Beq     EA_AN_PNTR
0000105C                           134          
0000105C  BA3C 0003                135          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001060  6700 0286                136          Beq     EA_AN_INC
00001064                           137          
00001064  BA3C 0004                138          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001068  6700 0296                139          Beq     EA_AN_DEC
0000106C                           140          
0000106C                           141          ; Comparing registers at this point because modes are the same
0000106C  B03C 0000                142          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001070  6700 02A6                143          Beq     EA_WORD_ADDR
00001074                           144          
00001074  B03C 0001                145          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001078  6700 033A                146          Beq     EA_LONG_ADDR
0000107C                           147          
0000107C  4E75                     148          Rts
0000107E                           149          
0000107E                           150  EA_MOVE_SIZE    ; Find the size of immediate data being moved
0000107E  4EB9 0000151A            151          Jsr     GET12TO13               ; Get Move size
00001084                           152  
00001084  B03C 0001                153          Cmp.B   #%01, D0                ; Byte
00001088  6700 040C                154          Beq     EA_IMM_BYTE
0000108C                           155  
0000108C  B03C 0003                156          Cmp.B   #%11, D0                ; Word
00001090  6700 0414                157          Beq     EA_IMM_WORD
00001094                           158          
00001094  B03C 0002                159          Cmp.B   #%10, D0                ; Long
00001098  6700 041C                160          Beq     EA_IMM_LONG
0000109C                           161          
0000109C  4E75                     162          Rts
0000109E                           163  
0000109E                           164  ;===========================================;        
0000109E                           165  ;--------------- EA Add/AddA ---------------;
0000109E                           166  ;===========================================;       
0000109E                           167  EA_ADD  ; Figures out the EA for Add        
0000109E  4EB9 0000153E            168          Jsr     GET6TO8                 ; Isolate the Op mode
000010A4                           169          
000010A4  B03C 0003                170          Cmp.B   #%011, D0               ; Compare to AddA word
000010A8  6700 0028                171          Beq     EA_ADDA
000010AC                           172          
000010AC  B03C 0007                173          Cmp.B   #%111, D0               ; Compare to AddA long
000010B0  6700 0020                174          Beq     EA_ADDA
000010B4                           175  
000010B4  B03C 0000                176          Cmp.B   #%000, D0               ; Compare to Add source byte
000010B8  6700 002E                177          Beq     EA_ADD_OPMODE_SOURCE
000010BC                           178          
000010BC  B03C 0001                179          Cmp.B   #%001, D0               ; Compare to Add source word
000010C0  6700 0026                180          Beq     EA_ADD_OPMODE_SOURCE
000010C4                           181          
000010C4  B03C 0002                182          Cmp.B   #%010, D0               ; Compare to Add source Long
000010C8  6700 001E                183          Beq     EA_ADD_OPMODE_SOURCE
000010CC                           184          
000010CC  4EF9 000010FE            185          Jmp     EA_ADD_OPMODE_DEST      ; Must be an Add destination if none of the above
000010D2                           186          
000010D2                           187  EA_ADDA ; Figures out the EA for AddA
000010D2  4EB9 00001114            188          Jsr     EA_ADD_ADDRESS          ; Get the source EA
000010D8  1CFC 002C                189          Move.B  #',', (A6)+             ; Add a comma
000010DC  4EB9 0000152C            190          Jsr     GET9TO11                ; Get the register
000010E2  4EB9 000012C8            191          Jsr     EA_AN                   ; Add An
000010E8                           192          
000010E8                           193          ; <Next instruction>
000010E8                           194          
000010E8                           195  EA_ADD_OPMODE_SOURCE    ; Finds the EA for Add if it is for the source
000010E8  4EB9 00001114            196          Jsr     EA_ADD_ADDRESS          ; Get the source EA
000010EE  1CFC 002C                197          Move.B  #',', (A6)+             ; Add a comma
000010F2  4EB9 0000152C            198          Jsr     GET9TO11                ; Get the register
000010F8  4EB9 000012BC            199          Jsr     EA_DN                   ; Add Dn
000010FE                           200          
000010FE                           201          ; <Next instruction>
000010FE                           202          
000010FE                           203  EA_ADD_OPMODE_DEST      ; Finds the EA for Add if it is for the destination
000010FE  4EB9 0000152C            204          Jsr     GET9TO11                ; Get the register
00001104  4EB9 000012BC            205          Jsr     EA_DN                   ; Add Dn
0000110A  1CFC 002C                206          Move.B  #',', (A6)+             ; Add a comma
0000110E  4EB9 00001114            207          Jsr     EA_ADD_ADDRESS          ; Get the destination EA 
00001114                           208          
00001114                           209          ; <Next instruction>
00001114                           210          
00001114                           211  EA_ADD_ADDRESS
00001114  4EB9 000014C6            212          Jsr     EA_0TO5
0000111A                           213          
0000111A  B03C 0004                214          Cmp.B   #Imm_Reg, D0            ; #<data>
0000111E  6700 0004                215          Beq     EA_ADD_SIZE
00001122                           216  
00001122  4E75                     217          Rts
00001124                           218          
00001124                           219  EA_ADD_SIZE ; Find the size of immediate data being moved
00001124  4EB9 0000153E            220          Jsr     GET6TO8                 ; Get Move size
0000112A                           221  
0000112A  B03C 0000                222          Cmp.B   #%000, D0               ; Byte
0000112E  6700 0366                223          Beq     EA_IMM_BYTE
00001132                           224  
00001132  B03C 0001                225          Cmp.B   #%001, D0               ; Word
00001136  6700 036E                226          Beq     EA_IMM_WORD
0000113A                           227          
0000113A  B03C 0002                228          Cmp.B   #%010, D0               ; Long
0000113E  6700 0376                229          Beq     EA_IMM_LONG
00001142                           230          
00001142  B03C 0003                231          Cmp.B   #%011, D0               ; AddA Word
00001146  6700 035E                232          Beq     EA_IMM_WORD
0000114A                           233     
0000114A  B03C 0007                234          Cmp.B   #%111, D0               ; AddA Long
0000114E  6700 0366                235          Beq     EA_IMM_LONG
00001152                           236          
00001152  4E75                     237          Rts
00001154                           238          
00001154                           239  ;=================================================;        
00001154                           240  ;-------------------- EA AddQ --------------------;
00001154                           241  ;=================================================;
00001154                           242  EA_ADDQ ; Figures out the EA for AddQ
00001154  4EB9 00001164            243          Jsr     EA_ADDQ_CHECK_8         ; Get the immediate value
0000115A  1CFC 002C                244          Move.B  #',', (A6)+             ; Add a comma
0000115E  4EB9 00001188            245          Jsr     EA_ADDQ_DEST            ; Add the destination
00001164                           246  
00001164                           247  EA_ADDQ_CHECK_8 ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001164  4EB9 0000152C            248          Jsr     GET9TO11                ; Isolate the count/register bits
0000116A                           249          
0000116A  B03C 0000                250          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
0000116E  6E00 000C                251          Bgt     EA_ADDQ_IMMEDIATE
00001172                           252          
00001172  103C 0008                253          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001176                           254          
00001176  4EF9 0000117C            255          Jmp     EA_ADDQ_IMMEDIATE
0000117C                           256          
0000117C                           257  EA_ADDQ_IMMEDIATE   ; Adds an immediate value before the comma
0000117C  1CFC 0023                258          Move.B  #'#', (A6)+
00001180  0600 0030                259          Add.B   #$30, D0
00001184  1CC0                     260          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001186                           261          
00001186  4E75                     262          Rts
00001188                           263          
00001188                           264  EA_ADDQ_DEST    ; Determines the destination       
00001188  4EB9 000014C6            265          Jsr     EA_0TO5
0000118E                           266          
0000118E                           267  ;=========================================================;        
0000118E                           268  ;---------------------- EA Sub/SubA ----------------------;
0000118E                           269  ; Jumps straight to EA_ADD because the EA for Add/AddA and
0000118E                           270  ; Sub/SubA are exactly the same.
0000118E                           271  ;=========================================================;
0000118E                           272  EA_SUB
0000118E  4EF8 109E                273          Jmp     EA_ADD
00001192                           274  
00001192                           275  ;=========================================================;        
00001192                           276  ;---------------------- EA Cmp/CmpA ----------------------;
00001192                           277  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001192                           278  ; Cmp/CmpA are exactly the same.
00001192                           279  ;=========================================================;
00001192                           280  EA_CMP       
00001192  4EF8 109E                281          Jmp     EA_ADD
00001196                           282          
00001196                           283  ;=========================================================;        
00001196                           284  ;------------------------ EA Lea -------------------------;
00001196                           285  ; Jumps straight to EA_ADD because the EA for AddA and Lea
00001196                           286  ; are exactly the same.
00001196                           287  ;=========================================================;
00001196                           288  EA_LEA
00001196  4EF8 109E                289          Jmp     EA_ADD
0000119A                           290          
0000119A                           291  ;=========================================================;        
0000119A                           292  ;------------------------ EA And -------------------------;
0000119A                           293  ; Jumps straight to EA_ADD because the EA for Add and And
0000119A                           294  ; are exactly the same.
0000119A                           295  ;=========================================================;
0000119A                           296  EA_AND
0000119A  4EF8 109E                297          Jmp     EA_ADD
0000119E                           298          
0000119E                           299  ;=========================================================;        
0000119E                           300  ;------------------------ EA Neg -------------------------;
0000119E                           301  ; Jumps to EA_ADD_SOURCE because the Neg only requires an
0000119E                           302  ; EA and EA_ADD_SOURCE has all of the addressing modes.
0000119E                           303  ;=========================================================;
0000119E                           304  EA_NEG
0000119E  4EB9 000014C6            305          Jsr     EA_0TO5
000011A4                           306          
000011A4                           307          ; <Next instruction>
000011A4                           308  
000011A4                           309  ;=========================================================;
000011A4                           310  ;--------------------- EA Bit Shift ----------------------;
000011A4                           311  ; Finds the EA for ASd, LSd, ROd. All of these OP codes
000011A4                           312  ; are combined because the EA for each code is exactly the
000011A4                           313  ; same.
000011A4                           314  ;=========================================================;
000011A4                           315  EA_BIT_SHIFT    ; Figures out the EA for bit shift functions
000011A4  4EB9 00001586            316          Jsr     GET6TO7
000011AA                           317          
000011AA  B03C 0003                318          Cmp.B   #%11, D0                ; If bits 6 and 7 are not %11, then we are shifting a register
000011AE  6600 0040                319          Bne     EA_SHIFT_REGISTER
000011B2                           320          
000011B2  4EB9 000011B8            321          Jsr     EA_SHIFT_MEMORY         ; If bits 6 and 7 are %11, then we are shifting memory
000011B8                           322          
000011B8                           323          ; <Next instruction>
000011B8                           324                  
000011B8                           325  EA_SHIFT_MEMORY ; Adds the correct EA for a memory shift
000011B8  4EB9 00001550            326          Jsr     GET3TO5                 ; Get source mode
000011BE  1A00                     327          Move.B  D0, D5                  ; Move source mode to D5
000011C0  4EB9 00001562            328          Jsr     Get0TO2                 ; Get source register
000011C6                           329          
000011C6                           330          ; List of valid effective addresses        
000011C6  BA3C 0002                331          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000011CA  6700 0108                332          Beq     EA_AN_PNTR
000011CE                           333          
000011CE  BA3C 0003                334          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000011D2  6700 0114                335          Beq     EA_AN_INC
000011D6                           336          
000011D6  BA3C 0004                337          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000011DA  6700 0124                338          Beq     EA_AN_DEC
000011DE                           339          
000011DE                           340          ; Comparing registers at this point because modes are the same
000011DE  B03C 0000                341          Cmp.B   #Word_Reg, D0           ; (xxx).W
000011E2  6700 0134                342          Beq     EA_WORD_ADDR
000011E6                           343          
000011E6  B03C 0001                344          Cmp.B   #Long_Reg, D0           ; (xxx).L
000011EA  6700 01C8                345          Beq     EA_LONG_ADDR
000011EE                           346          
000011EE  4E75                     347          Rts
000011F0                           348          
000011F0                           349  EA_SHIFT_REGISTER   ; Figure out if we are shifting by #<data> or by the value in a data register
000011F0  4EB9 00001598            350          Jsr     GETBIT5
000011F6                           351          
000011F6  B03C 0000                352          Cmp.B   #0, D0                  ; Check if bit 5 is %0
000011FA  6700 0008                353          Beq     EA_SHIFT_CHECK_8
000011FE                           354          
000011FE  4EF9 0000122C            355          Jmp     EA_SHIFT_DN             ; If it's not, we are shifting from a data register
00001204                           356          
00001204                           357  EA_SHIFT_CHECK_8    ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001204  4EB9 0000152C            358          Jsr     GET9TO11                ; Isolate the count/register bits
0000120A                           359          
0000120A  B03C 0000                360          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
0000120E  6E00 000C                361          Bgt     EA_SHIFT_IMMEDIATE
00001212                           362          
00001212  103C 0008                363          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001216                           364                  
00001216  4EF9 0000121C            365          Jmp     EA_SHIFT_IMMEDIATE
0000121C                           366          
0000121C                           367  EA_SHIFT_IMMEDIATE  ; Adds an immediate value before the comma
0000121C  1CFC 0023                368          Move.B  #'#', (A6)+
00001220  0600 0030                369          Add.B   #$30, D0
00001224  1CC0                     370          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001226                           371  
00001226  4EF9 0000123E            372          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it
0000122C                           373          
0000122C                           374  EA_SHIFT_DN ; Adds a data register before the comma
0000122C  4EB9 0000152C            375          Jsr     GET9TO11                ; Isolate the data register bits
00001232                           376          
00001232  4EB9 000012BC            377          Jsr     EA_DN                   ; Add the data register to the string
00001238                           378          
00001238  4EF9 0000123E            379          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it 
0000123E                           380          
0000123E                           381  EA_SHIFT_COMMA  ; Adds the comma and everything after it to the string
0000123E  1CFC 002C                382          Move.B  #',', (A6)+
00001242                           383          
00001242  4EB9 00001562            384          Jsr     GET0TO2                 ; Get the register number
00001248                           385          
00001248  4EB9 000012BC            386          Jsr     EA_DN                   ; Add the register
0000124E                           387          
0000124E                           388          ; <Next instruction>
0000124E                           389  
0000124E                           390  ;============================================;        
0000124E                           391  ;--------------- EA Immediate ---------------;
0000124E                           392  ;============================================;
0000124E                           393  EA_IMMEDIATE    ; Figures out the EA for immediate data OP codes
0000124E  4EB9 0000125E            394          Jsr     EA_IMMEDIATE_SIZE       ; Get the size of the immediate data and add to string
00001254  1CFC 002C                395          Move.B  #',', (A6)+             ; Add a comma
00001258  4EB9 0000127E            396          Jsr     EA_IMMEDIATE_DEST       ; Add the destination EA
0000125E                           397          
0000125E                           398          ; <Next instruction>
0000125E                           399          
0000125E                           400  EA_IMMEDIATE_SIZE   ; Determines the size of the immediate data and adds it
0000125E  4EB9 00001586            401          Jsr     GET6TO7                 ; Isolate the size bits
00001264                           402                  
00001264  B03C 0001                403          Cmp.B   #%01, D0                ; Immediate word
00001268  6700 023C                404          Beq     EA_IMM_WORD
0000126C                           405          
0000126C  B03C 0002                406          Cmp.B   #%10, D0                ; Immediate long
00001270  6700 0244                407          Beq     EA_IMM_LONG
00001274                           408          
00001274  524B                     409          AddA.W  #1, A3                  ; Else, move the pointer forward by a byte get the next byte
00001276  4EF9 00001496            410          Jmp     EA_IMM_BYTE
0000127C                           411          
0000127C  4E75                     412          Rts
0000127E                           413          
0000127E                           414  EA_IMMEDIATE_DEST   ; Determines the destination EA
0000127E  4EB9 00001550            415          Jsr     GET3TO5                 ; Get source mode
00001284  1A00                     416          Move.B  D0, D5                  ; Move source mode to D5
00001286  4EB9 00001562            417          Jsr     Get0TO2                 ; Get source register
0000128C                           418       
0000128C                           419          ; List of valid effective addresses
0000128C  BA3C 0000                420          Cmp.B   #Dn_Mode, D5            ; Dn
00001290  6700 002A                421          Beq     EA_DN
00001294                           422          
00001294  BA3C 0002                423          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001298  6700 003A                424          Beq     EA_AN_PNTR
0000129C                           425          
0000129C  BA3C 0003                426          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000012A0  6700 0046                427          Beq     EA_AN_INC
000012A4                           428          
000012A4  BA3C 0004                429          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000012A8  6700 0056                430          Beq     EA_AN_DEC
000012AC                           431          
000012AC                           432          ; Comparing registers at this point because modes are the same
000012AC  B03C 0000                433          Cmp.B   #Word_Reg, D0           ; (xxx).W
000012B0  6700 0066                434          Beq     EA_WORD_ADDR
000012B4                           435          
000012B4  B03C 0001                436          Cmp.B   #Long_Reg, D0           ; (xxx).L
000012B8  6700 00FA                437          Beq     EA_LONG_ADDR
000012BC                           438                 
000012BC                           439  ;==========================================;        
000012BC                           440  ;---------- General EA functions ----------;
000012BC                           441  ;==========================================;
000012BC                           442  EA_DN   ; Adds Dn EA to string
000012BC  1CFC 0044                443          Move.B  #'D', (A6)+             
000012C0  0600 0030                444          Add.B   #$30, D0        
000012C4  1CC0                     445          Move.B  D0, (A6)+               
000012C6                           446                  
000012C6  4E75                     447          Rts
000012C8                           448  
000012C8                           449  EA_AN   ; Adds An EA to string
000012C8  1CFC 0041                450          Move.B  #'A', (A6)+
000012CC  0600 0030                451          Add.B   #$30, D0    
000012D0  1CC0                     452          Move.B  D0, (A6)+               
000012D2                           453                  
000012D2  4E75                     454          Rts
000012D4                           455  
000012D4                           456  EA_AN_PNTR  ; Adds (An) EA to string
000012D4  1CFC 0028                457          Move.B  #'(', (A6)+
000012D8  1CFC 0041                458          Move.B  #'A', (A6)+
000012DC  0600 0030                459          Add.B   #$30, D0
000012E0  1CC0                     460          Move.B  D0, (A6)+
000012E2  1CFC 0029                461          Move.B  #')', (A6)+
000012E6                           462                  
000012E6  4E75                     463          Rts
000012E8                           464          
000012E8                           465  EA_AN_INC   ; Adds (An)+ EA to string
000012E8  1CFC 0028                466          Move.B  #'(', (A6)+
000012EC  1CFC 0041                467          Move.B  #'A', (A6)+
000012F0  0600 0030                468          Add.B   #$30, D0
000012F4  1CC0                     469          Move.B  D0, (A6)+
000012F6  1CFC 0029                470          Move.B  #')', (A6)+
000012FA  1CFC 002B                471          Move.B  #'+', (A6)+
000012FE                           472                  
000012FE  4E75                     473          Rts 
00001300                           474          
00001300                           475  EA_AN_DEC   ; Adds -(An) EA to string
00001300  1CFC 002D                476          Move.B  #'-', (A6)+
00001304  1CFC 0028                477          Move.B  #'(', (A6)+
00001308  1CFC 0041                478          Move.B  #'A', (A6)+
0000130C  0600 0030                479          Add.B   #$30, D0
00001310  1CC0                     480          Move.B  D0, (A6)+
00001312  1CFC 0029                481          Move.B  #')', (A6)+
00001316                           482                  
00001316  4E75                     483          Rts 
00001318                           484  
00001318                           485  EA_WORD_ADDR    ; Adds $Word to string
00001318  3C1B                     486          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
0000131A                           487          
0000131A  1CFC 0024                488          Move.B  #'$', (A6)+
0000131E                           489          
0000131E  BC7C 8000                490          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001322  6E00 000C                491          Bgt     EA_SIGN_EXT_16
00001326                           492          
00001326  BC7C 8000                493          Cmp.W   #$8000, D6          ; Word address is greater than 8000
0000132A  6F00 001C                494          Ble     EA_SIGN_EXT_32
0000132E                           495          
0000132E  4E75                     496          Rts
00001330                           497                  
00001330                           498  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
00001330  1CFC 0030                499          Move.B  #'0', (A6)+
00001334  1CFC 0030                500          Move.B  #'0', (A6)+
00001338  1CFC 0030                501          Move.B  #'0', (A6)+
0000133C  1CFC 0030                502          Move.B  #'0', (A6)+
00001340                           503          
00001340  4EB9 00001360            504          Jsr     EA_WORD_TO_STRING       
00001346                           505          
00001346  4E75                     506          Rts
00001348                           507  
00001348                           508  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
00001348  1CFC 0046                509          Move.B  #'F', (A6)+
0000134C  1CFC 0046                510          Move.B  #'F', (A6)+
00001350  1CFC 0046                511          Move.B  #'F', (A6)+
00001354  1CFC 0046                512          Move.B  #'F', (A6)+
00001358                           513          
00001358  4EB9 00001360            514          Jsr     EA_WORD_TO_STRING   
0000135E                           515          
0000135E  4E75                     516          Rts
00001360                           517          
00001360                           518  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
00001360  4280                     519          Clr.L   D0              ; Clear D0
00001362  3006                     520          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
00001364                           521  
00001364  123C 000C                522          Move.B  #12, D1         ; Grab bits 12 to 15
00001368  E268                     523          Lsr     D1, D0
0000136A  0600 0030                524          Add.B   #$30, D0
0000136E  1CC0                     525          Move.B  D0, (A6)+
00001370                           526          
00001370  4280                     527          Clr.L   D0
00001372  3006                     528          Move.W  D6, D0
00001374                           529          
00001374  123C 0004                530          Move.B  #4, D1          ; Grab bits 8 to 11
00001378  E368                     531          Lsl     D1, D0
0000137A  123C 000C                532          Move.B  #12, D1
0000137E  E268                     533          Lsr     D1, D0  
00001380  0600 0030                534          Add.B   #$30, D0
00001384  1CC0                     535          Move.B  D0, (A6)+
00001386                           536          
00001386  4280                     537          Clr.L   D0
00001388  3006                     538          Move.W  D6, D0
0000138A                           539          
0000138A  123C 0008                540          Move.B  #8, D1          ; Grab bits 4 to 7
0000138E  E368                     541          Lsl     D1, D0
00001390  123C 000C                542          Move.B  #12, D1
00001394  E268                     543          Lsr     D1, D0
00001396  0600 0030                544          Add.B   #$30, D0
0000139A  1CC0                     545          Move.B  D0, (A6)+
0000139C                           546          
0000139C  4280                     547          Clr.L   D0
0000139E  3006                     548          Move.W  D6, D0
000013A0                           549          
000013A0  123C 000C                550          Move.B  #12, D1         ; Grab bits 0 to 3
000013A4  E368                     551          Lsl     D1, D0
000013A6  123C 000C                552          Move.B  #12, D1
000013AA  E268                     553          Lsr     D1, D0
000013AC  0600 0030                554          Add.B   #$30, D0
000013B0  1CC0                     555          Move.B  D0, (A6)+
000013B2                           556          
000013B2  4E75                     557          Rts
000013B4                           558          
000013B4                           559  EA_LONG_ADDR    ; Adds $Long to string
000013B4  2C1B                     560          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000013B6                           561          
000013B6  1CFC 0024                562          Move.B  #'$', (A6)+
000013BA                           563          
000013BA  4EB9 000013C2            564          Jsr     EA_LONG_TO_STRING
000013C0                           565  
000013C0  4E75                     566          Rts
000013C2                           567                  
000013C2                           568  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
000013C2  4280                     569          Clr.L   D0              ; Clear D0
000013C4  2006                     570          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
000013C6                           571  
000013C6  123C 001C                572          Move.B  #28, D1         ; Grab bits 28 to 31
000013CA  E2A8                     573          Lsr.L   D1, D0
000013CC  0600 0030                574          Add.B   #$30, D0
000013D0  1CC0                     575          Move.B  D0, (A6)+
000013D2                           576          
000013D2  4280                     577          Clr.L   D0             
000013D4  2006                     578          Move.L  D6, D0          
000013D6                           579          
000013D6  123C 0004                580          Move.B  #4, D1          ; Grab bits 24 to 27
000013DA  E3A8                     581          Lsl.L   D1, D0
000013DC  123C 001C                582          Move.B  #28, D1
000013E0  E2A8                     583          Lsr.L   D1, D0
000013E2  0600 0030                584          Add.B   #$30, D0
000013E6  1CC0                     585          Move.B  D0, (A6)+
000013E8                           586          
000013E8  4280                     587          Clr.L   D0             
000013EA  2006                     588          Move.L  D6, D0
000013EC                           589  
000013EC  123C 0008                590          Move.B  #8, D1          ; Grab bits 20 to 23
000013F0  E3A8                     591          Lsl.L   D1, D0
000013F2  123C 001C                592          Move.B  #28, D1
000013F6  E2A8                     593          Lsr.L   D1, D0
000013F8  0600 0030                594          Add.B   #$30, D0
000013FC  1CC0                     595          Move.B  D0, (A6)+
000013FE                           596          
000013FE  4280                     597          Clr.L   D0             
00001400  2006                     598          Move.L  D6, D0
00001402                           599  
00001402  123C 000C                600          Move.B  #12, D1         ; Grab bits 16 to 19
00001406  E3A8                     601          Lsl.L   D1, D0
00001408  123C 001C                602          Move.B  #28, D1
0000140C  E2A8                     603          Lsr.L   D1, D0
0000140E  0600 0030                604          Add.B   #$30, D0
00001412  1CC0                     605          Move.B  D0, (A6)+
00001414                           606          
00001414  4280                     607          Clr.L   D0             
00001416  2006                     608          Move.L  D6, D0
00001418                           609  
00001418  123C 0010                610          Move.B  #16, D1         ; Grab bits 12 to 15
0000141C  E3A8                     611          Lsl.L   D1, D0
0000141E  123C 001C                612          Move.B  #28, D1
00001422  E2A8                     613          Lsr.L   D1, D0
00001424  0600 0030                614          Add.B   #$30, D0
00001428  1CC0                     615          Move.B  D0, (A6)+
0000142A                           616          
0000142A  4280                     617          Clr.L   D0             
0000142C  2006                     618          Move.L  D6, D0
0000142E                           619          
0000142E  123C 0014                620          Move.B  #20, D1         ; Grab bits 8 to 11
00001432  E3A8                     621          Lsl.L   D1, D0
00001434  123C 001C                622          Move.B  #28, D1
00001438  E2A8                     623          Lsr.L   D1, D0
0000143A  0600 0030                624          Add.B   #$30, D0
0000143E  1CC0                     625          Move.B  D0, (A6)+
00001440                           626          
00001440  4280                     627          Clr.L   D0             
00001442  2006                     628          Move.L  D6, D0
00001444                           629  
00001444  123C 0018                630          Move.B  #24, D1         ; Grab bits 4 to 7
00001448  E3A8                     631          Lsl.L   D1, D0
0000144A  123C 001C                632          Move.B  #28, D1
0000144E  E2A8                     633          Lsr.L   D1, D0
00001450  0600 0030                634          Add.B   #$30, D0
00001454  1CC0                     635          Move.B  D0, (A6)+
00001456                           636          
00001456  4280                     637          Clr.L   D0             
00001458  2006                     638          Move.L  D6, D0
0000145A                           639  
0000145A  123C 001C                640          Move.B  #28, D1         ; Grab bits 0 to 3
0000145E  E3A8                     641          Lsl.L   D1, D0
00001460  123C 001C                642          Move.B  #28, D1
00001464  E2A8                     643          Lsr.L   D1, D0
00001466  0600 0030                644          Add.B   #$30, D0
0000146A  1CC0                     645          Move.B  D0, (A6)+
0000146C                           646          
0000146C  4E75                     647          Rts
0000146E                           648          
0000146E                           649  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
0000146E  4280                     650          Clr.L   D0              ; Clear D0
00001470  2006                     651          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
00001472                           652  
00001472  123C 0004                653          Move.B  #4, D1          ; Grab bits 4 to 7
00001476  E228                     654          Lsr.B   D1, D0
00001478  0600 0030                655          Add.B   #$30, D0
0000147C  1CC0                     656          Move.B  D0, (A6)+
0000147E                           657          
0000147E  4280                     658          Clr.L   D0             
00001480  2006                     659          Move.L  D6, D0          
00001482                           660          
00001482  123C 0004                661          Move.B  #4, D1          ; Grab bits 0 to 3
00001486  E328                     662          Lsl.B   D1, D0
00001488  123C 0004                663          Move.B  #4, D1
0000148C  E228                     664          Lsr.B   D1, D0
0000148E  0600 0030                665          Add.B   #$30, D0
00001492  1CC0                     666          Move.B  D0, (A6)+
00001494                           667          
00001494  4E75                     668          Rts
00001496                           669  
00001496                           670  EA_IMM_BYTE ; Finds the immediate byte data
00001496  1C1B                     671          Move.B  (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
00001498                           672          
00001498  1CFC 0023                673          Move.B  #'#', (A6)+         
0000149C  1CFC 0024                674          Move.B  #'$', (A6)+         
000014A0                           675          
000014A0  4EB8 146E                676          Jsr     EA_BYTE_TO_STRING    ; Add the byte to the string
000014A4                           677          
000014A4  4E75                     678          Rts
000014A6                           679                  
000014A6                           680  EA_IMM_WORD ; Finds the immediate word data
000014A6  3C1B                     681          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
000014A8                           682          
000014A8  1CFC 0023                683          Move.B  #'#', (A6)+         
000014AC  1CFC 0024                684          Move.B  #'$', (A6)+         
000014B0                           685          
000014B0  4EB8 1360                686          Jsr     EA_WORD_TO_STRING    ; Add the word to the string
000014B4                           687          
000014B4  4E75                     688          Rts
000014B6                           689          
000014B6                           690  EA_IMM_LONG ; Finds the immediate long data
000014B6  2C1B                     691          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
000014B8                           692          
000014B8  1CFC 0023                693          Move.B  #'#', (A6)+
000014BC  1CFC 0024                694          Move.B  #'$', (A6)+
000014C0                           695          
000014C0  4EB8 13C2                696          Jsr     EA_LONG_TO_STRING    ; Add the long to the string
000014C4                           697          
000014C4  4E75                     698          Rts
000014C6                           699          
000014C6                           700  EA_0TO5 ; Determines the EA for an EA in bits 0-5. DOES NOT HANDLE IMMEDIATE VALUES.
000014C6  4EB9 00001550            701          Jsr     GET3TO5                 ; Get source mode
000014CC  1A00                     702          Move.B  D0, D5                  ; Move source mode to D5
000014CE  4EB9 00001562            703          Jsr     Get0TO2                 ; Get source register
000014D4                           704          
000014D4                           705          ; List of valid effective addresses
000014D4  BA3C 0000                706          Cmp.B   #Dn_Mode, D5            ; Dn
000014D8  6700 FDE2                707          Beq     EA_DN
000014DC                           708          
000014DC  BA3C 0001                709          Cmp.B   #An_Mode, D5            ; An
000014E0  6700 FDE6                710          Beq     EA_AN
000014E4                           711          
000014E4  BA3C 0002                712          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000014E8  6700 FDEA                713          Beq     EA_AN_PNTR
000014EC                           714          
000014EC  BA3C 0003                715          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000014F0  6700 FDF6                716          Beq     EA_AN_INC
000014F4                           717          
000014F4  BA3C 0004                718          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000014F8  6700 FE06                719          Beq     EA_AN_DEC
000014FC                           720          
000014FC                           721          ; Comparing registers at this point because modes are the same
000014FC  B03C 0000                722          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001500  6700 FE16                723          Beq     EA_WORD_ADDR
00001504                           724          
00001504  B03C 0001                725          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001508  6700 FEAA                726          Beq     EA_LONG_ADDR
0000150C                           727          
0000150C  4E75                     728          Rts
0000150E                           729          
0000150E                           730  ;===========================================================;       
0000150E                           731  ;---------------- Bit Chopping Sub Routines ----------------;
0000150E                           732  ; These Sub Routines Chop a WORD size piece of data from
0000150E                           733  ; Data register 4 into a smaller piece, leaving just the
0000150E                           734  ; Piece in register 0 while leaving the original piece
0000150E                           735  ; of data intact.
0000150E                           736  ;===========================================================;
0000150E                           737  GET12TO15
0000150E  4280                     738          CLR.L   D0
00001510  3004                     739          Move.W  D4, D0
00001512                           740                  
00001512  123C 000C                741          Move.B  #12, D1
00001516  E268                     742          LSR     D1, D0
00001518                           743                  
00001518  4E75                     744          RTS
0000151A                           745  
0000151A                           746  GET12TO13
0000151A  4280                     747          CLR.L   D0
0000151C  3004                     748          Move.W  D4, D0
0000151E                           749          
0000151E  123C 0002                750          Move.B  #2, D1
00001522  E368                     751          LSL     D1, D0
00001524                           752          
00001524  123C 000E                753          Move.B  #14, D1
00001528  E268                     754          LSR     D1, D0
0000152A                           755          
0000152A  4E75                     756          RTS
0000152C                           757                  
0000152C                           758  GET9TO11        
0000152C  4280                     759          CLR.L   D0
0000152E  3004                     760          Move.W  D4, D0
00001530                           761                  
00001530  123C 0004                762          Move.B  #4, D1
00001534  E368                     763          LSL     D1, D0
00001536                           764                  
00001536  123C 000D                765          Move.B  #13, D1
0000153A  E268                     766          LSR     D1, D0
0000153C                           767                  
0000153C  4E75                     768          RTS
0000153E                           769                  
0000153E                           770  GET6TO8 
0000153E  4280                     771          CLR.L   D0
00001540  3004                     772          Move.W  D4, D0
00001542                           773                  
00001542  123C 0007                774          Move.B  #7, D1
00001546  E368                     775          LSL     D1, D0
00001548                           776                  
00001548  123C 000D                777          Move.B  #13, D1
0000154C  E268                     778          LSR     D1, D0
0000154E                           779                  
0000154E  4E75                     780          RTS
00001550                           781                  
00001550                           782  GET3TO5 
00001550  4280                     783          CLR.L   D0
00001552  3004                     784          Move.W  D4, D0
00001554                           785                  
00001554  123C 000A                786          Move.B  #10, D1
00001558  E368                     787          LSL     D1, D0
0000155A                           788                  
0000155A  123C 000D                789          Move.B  #13, D1
0000155E  E268                     790          LSR     D1, D0
00001560                           791                  
00001560  4E75                     792          RTS
00001562                           793  GET0TO2 
00001562  4280                     794          CLR.L   D0
00001564  3004                     795          Move.W  D4, D0
00001566                           796                  
00001566  123C 000D                797          Move.B  #13, D1
0000156A  E368                     798          LSL     D1, D0
0000156C                           799                  
0000156C  123C 000D                800          Move.B  #13, D1
00001570  E268                     801          LSR     D1, D0
00001572                           802                  
00001572  4E75                     803          RTS
00001574                           804  GETBIT8
00001574  4280                     805          CLR.L   D0
00001576  3004                     806          Move.W  D4, D0
00001578                           807                  
00001578  123C 0007                808          Move.B  #7, D1
0000157C  E368                     809          LSL     D1, D0
0000157E                           810                  
0000157E  123C 000F                811          Move.B  #15, D1
00001582  E268                     812          LSR     D1, D0
00001584                           813                  
00001584  4E75                     814          RTS 
00001586                           815          
00001586                           816  GET6TO7
00001586  4280                     817          Clr.L   D0
00001588  3004                     818          Move.W  D4, D0
0000158A                           819          
0000158A  123C 0008                820          Move.B  #8, D1
0000158E  E368                     821          Lsl     D1, D0
00001590                           822          
00001590  123C 000E                823          Move.B  #14, D1
00001594  E268                     824          Lsr     D1, D0
00001596                           825          
00001596  4E75                     826          Rts
00001598                           827          
00001598                           828  GETBIT5
00001598  4280                     829          Clr.L   D0
0000159A  3004                     830          Move.W  D4, D0
0000159C                           831          
0000159C  123C 000A                832          Move.B  #10, D1
000015A0  E368                     833          Lsl     D1, D0
000015A2                           834          
000015A2  123C 000F                835          Move.B  #15, D1
000015A6  E268                     836          Lsr     D1, D0
000015A8                           837          
000015A8  4E75                     838          Rts
000015AA                           839  
000015AA                           840  
000015AA                           841      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_TEST1          5E09
ADDQ_TEST2          5009
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_0TO5             14C6
EA_ADD              109E
EA_ADDA             10D2
EA_ADDQ             1154
EA_ADDQ_CHECK_8     1164
EA_ADDQ_DEST        1188
EA_ADDQ_IMMEDIATE   117C
EA_ADD_ADDRESS      1114
EA_ADD_OPMODE_DEST  10FE
EA_ADD_OPMODE_SOURCE  10E8
EA_ADD_SIZE         1124
EA_AN               12C8
EA_AND              119A
EA_AN_DEC           1300
EA_AN_INC           12E8
EA_AN_PNTR          12D4
EA_BIT_SHIFT        11A4
EA_BYTE_TO_STRING   146E
EA_CMP              1192
EA_DN               12BC
EA_IMMEDIATE        124E
EA_IMMEDIATE_DEST   127E
EA_IMMEDIATE_SIZE   125E
EA_IMM_BYTE         1496
EA_IMM_LONG         14B6
EA_IMM_WORD         14A6
EA_LEA              1196
EA_LONG_ADDR        13B4
EA_LONG_TO_STRING   13C2
EA_MOVE             1016
EA_MOVE_DEST        1036
EA_MOVE_SIZE        107E
EA_MOVE_SOURCE      1026
EA_NEG              119E
EA_SHIFT_CHECK_8    1204
EA_SHIFT_COMMA      123E
EA_SHIFT_DN         122C
EA_SHIFT_IMMEDIATE  121C
EA_SHIFT_MEMORY     11B8
EA_SHIFT_REGISTER   11F0
EA_SIGN_EXT_16      1330
EA_SIGN_EXT_32      1348
EA_SUB              118E
EA_WORD_ADDR        1318
EA_WORD_TO_STRING   1360
GET0TO2             1562
GET12TO13           151A
GET12TO15           150E
GET3TO5             1550
GET6TO7             1586
GET6TO8             153E
GET9TO11            152C
GETBIT5             1598
GETBIT8             1574
IMM_MODE            7
IMM_REG             4
IMM_TEST1           41F
IMM_TEST2           479
LONG_MODE           7
LONG_REG            1
SHIFT_TEST1         E1D7
SHIFT_TEST2         E1F8
SHIFT_TEST3         EF21
SHIFT_TEST4         E507
SHIFT_TEST5         E104
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
