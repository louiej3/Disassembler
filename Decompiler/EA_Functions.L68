00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/25/2014 11:53:45 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L #$Imm,A7
00000000                            39  
00000000  =0000E1D7                 40  Shift_Test1         EQU     %1110000111010111   ; Asl (A7)
00000000  =0000E1F8                 41  Shift_Test2         EQU     %1110000111111000   ; Asl $Word
00000000  =0000EF21                 42  Shift_Test3         EQU     %1110111100100001   ; Asl.B D7,D1
00000000  =0000E507                 43  Shift_Test4         EQU     %1110010100000111   ; Asl.B #2,D7
00000000  =0000E104                 44  Shift_Test5         EQU     %1110000100000100   ; Asl.B #8,D4
00000000                            45  
00000000  =0000041F                 46  Imm_Test1           EQU     %0000010000011111   ; SubI.B #$Imm,(A7)+
00000000  =00000479                 47  Imm_Test2           EQU     %0000010001111001   ; SubI.W #$Imm,$Long
00000000                            48  
00000000  =00005E09                 49  AddQ_Test1          EQU     %0101111000001001   ; AddQ.B #7,A1
00000000  =00005009                 50  AddQ_Test2          EQU     %0101000000001001   ; AddQ.B #8,A1
00000000                            51          
00001000                            52      ORG    $1000
00001000                            53      
00001000                            54  START:                  ; first instruction of program
00001000  267C 00000400             55          Move.L  #$0000400, A3
00001006                            56          
00001006                            57          ;Move.W  #$0034, (A3)
00001006  36FC 4030                 58          Move.W  #$4030, (A3)+
0000100A  26BC 12345678             59          Move.L  #$12345678, (A3)
00001010  554B                      60          Sub.W   #2, A3
00001012                            61          ;Move.L  #$12349999, (A3)
00001012                            62          ;Move.W  #$11, (A3)
00001012                            63          
00001012                            64          ;Move.W  #Test_Move1, D4
00001012                            65          ;Move.W  #Test_Move2, D4
00001012                            66          ;Move.W  #Test_Move3, D4
00001012                            67          ;Move.W  #Test_Move4, D4
00001012                            68          ;Move.W  #Test_Move5, D4
00001012                            69          ;Move.W  #Test_Move6, D4        
00001012                            70          ;Move.W  #Test_Move7, D4        
00001012                            71          ;Move.W  #Test_Move8, D4
00001012                            72          
00001012                            73          ;Move.W  #Add_Test1, D4
00001012                            74          ;Move.W  #Add_Test2, D4
00001012                            75          ;Move.W  #Add_Test3, D4
00001012                            76          ;Move.W  #Add_Test4, D4
00001012                            77          
00001012                            78          ;Move.W  #Shift_Test1, D4
00001012                            79          ;Move.W  #Shift_Test2, D4
00001012                            80          ;Move.W  #Shift_Test3, D4
00001012                            81          ;Move.W  #Shift_Test4, D4
00001012                            82          ;Move.W  #Shift_Test5, D4
00001012                            83          
00001012                            84          ;Move.W  #Imm_Test1, D4
00001012                            85          ;Move.W  #Imm_Test2, D4
00001012                            86          
00001012                            87          ;Move.W  #AddQ_Test1, D4
00001012  383C 5009                 88          Move.W  #AddQ_Test2, D4
00001016                            89                  
00001016                            90          ;Jmp     EA_MOVE     ; Branch to EA function for Move
00001016                            91          ;Jmp     EA_ADD
00001016                            92          ;Jmp     EA_BIT_SHIFT
00001016                            93          ;Jmp     EA_IMMEDIATE
00001016  4EF9 00001212             94          Jmp     EA_ADDQ
0000101C                            95  
0000101C                            96  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
0000101C                            97  ;-------------------- Effective Address Sub Routines --------------------;
0000101C                            98  ; These subroutines look for the correct effective address
0000101C                            99  ; in each OP code.
0000101C                           100  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
0000101C                           101  
0000101C                           102  ;=============================================;
0000101C                           103  ;--------------- EA Move/MoveA ---------------;
0000101C                           104  ;=============================================;
0000101C                           105  EA_MOVE
0000101C  4EB9 0000102C            106          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
00001022  1CFC 002C                107          Move.B  #',', (A6)+             ; Add a comma
00001026  4EB9 0000107C            108          Jsr     EA_MOVE_DEST            ; Add the EA for destination
0000102C                           109          
0000102C                           110          ; <Next instruction>
0000102C                           111                  
0000102C                           112  EA_MOVE_SOURCE  ; Find out Move's source
0000102C  4EB9 000015FC            113          Jsr     GET3TO5                 ; Get source mode
00001032  1A00                     114          Move.B  D0, D5                  ; Move source mode to D5
00001034  4EB9 0000160E            115          Jsr     Get0TO2                 ; Get source register
0000103A                           116          
0000103A                           117          ; List of valid effective addresses
0000103A  BA3C 0000                118          Cmp.B   #Dn_Mode, D5            ; Dn
0000103E  6700 0370                119          Beq     EA_DN
00001042                           120          
00001042  BA3C 0001                121          Cmp.B   #An_Mode, D5            ; An
00001046  6700 0374                122          Beq     EA_AN
0000104A                           123          
0000104A  BA3C 0002                124          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000104E  6700 0378                125          Beq     EA_AN_PNTR
00001052                           126          
00001052  BA3C 0003                127          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001056  6700 0384                128          Beq     EA_AN_INC
0000105A                           129          
0000105A  BA3C 0004                130          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000105E  6700 0394                131          Beq     EA_AN_DEC
00001062                           132          
00001062                           133          ; Comparing registers at this point because modes are the same
00001062  B03C 0000                134          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001066  6700 03A4                135          Beq     EA_WORD_ADDR
0000106A                           136          
0000106A  B03C 0001                137          Cmp.B   #Long_Reg, D0           ; (xxx).L
0000106E  6700 0438                138          Beq     EA_LONG_ADDR
00001072                           139          
00001072  B03C 0004                140          Cmp.B   #Imm_Reg, D0            ; #<data>
00001076  6700 004C                141          Beq     EA_MOVE_SIZE
0000107A                           142          
0000107A  4E75                     143          Rts
0000107C                           144          
0000107C                           145  EA_MOVE_DEST    ; Find out Move's destination
0000107C  4EB9 000015EA            146          Jsr     GET6TO8                 ; Get destination mode
00001082  1A00                     147          Move.B  D0, D5                  ; Move destination mode to D5
00001084  4EB9 000015D8            148          Jsr     GET9TO11                ; Get destination register
0000108A                           149          
0000108A                           150          ; List of valid effective addresses
0000108A  BA3C 0000                151          Cmp.B   #Dn_Mode, D5            ; Dn
0000108E  6700 0320                152          Beq     EA_DN
00001092                           153          
00001092  BA3C 0001                154          Cmp.B   #An_Mode, D5            ; An
00001096  6700 0324                155          Beq     EA_AN
0000109A                           156          
0000109A  BA3C 0002                157          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000109E  6700 0328                158          Beq     EA_AN_PNTR
000010A2                           159          
000010A2  BA3C 0003                160          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000010A6  6700 0334                161          Beq     EA_AN_INC
000010AA                           162          
000010AA  BA3C 0004                163          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000010AE  6700 0344                164          Beq     EA_AN_DEC
000010B2                           165          
000010B2                           166          ; Comparing registers at this point because modes are the same
000010B2  B03C 0000                167          Cmp.B   #Word_Reg, D0           ; (xxx).W
000010B6  6700 0354                168          Beq     EA_WORD_ADDR
000010BA                           169          
000010BA  B03C 0001                170          Cmp.B   #Long_Reg, D0           ; (xxx).L
000010BE  6700 03E8                171          Beq     EA_LONG_ADDR
000010C2                           172          
000010C2  4E75                     173          Rts
000010C4                           174          
000010C4                           175  EA_MOVE_SIZE    ; Find the size of immediate data being moved
000010C4  4EB9 000015C6            176          Jsr     GET12TO13               ; Get Move size
000010CA                           177  
000010CA  B03C 0001                178          Cmp.B   #%01, D0                ; Byte
000010CE  6700 04BA                179          Beq     EA_IMM_BYTE
000010D2                           180  
000010D2  B03C 0003                181          Cmp.B   #%11, D0                ; Word
000010D6  6700 04C2                182          Beq     EA_IMM_WORD
000010DA                           183          
000010DA  B03C 0002                184          Cmp.B   #%10, D0                ; Long
000010DE  6700 04CA                185          Beq     EA_IMM_LONG
000010E2                           186          
000010E2  4E75                     187          Rts
000010E4                           188  
000010E4                           189  ;===========================================;        
000010E4                           190  ;--------------- EA Add/AddA ---------------;
000010E4                           191  ;===========================================;       
000010E4                           192  EA_ADD  ; Figures out the EA for Add        
000010E4  4EB9 000015EA            193          Jsr     GET6TO8                 ; Isolate the Op mode
000010EA                           194          
000010EA  B03C 0003                195          Cmp.B   #%011, D0               ; Compare to AddA word
000010EE  6700 0028                196          Beq     EA_ADDA
000010F2                           197          
000010F2  B03C 0007                198          Cmp.B   #%111, D0               ; Compare to AddA long
000010F6  6700 0020                199          Beq     EA_ADDA
000010FA                           200  
000010FA  B03C 0000                201          Cmp.B   #%000, D0               ; Compare to Add source byte
000010FE  6700 002E                202          Beq     EA_ADD_OPMODE_SOURCE
00001102                           203          
00001102  B03C 0001                204          Cmp.B   #%001, D0               ; Compare to Add source word
00001106  6700 0026                205          Beq     EA_ADD_OPMODE_SOURCE
0000110A                           206          
0000110A  B03C 0002                207          Cmp.B   #%010, D0               ; Compare to Add source Long
0000110E  6700 001E                208          Beq     EA_ADD_OPMODE_SOURCE
00001112                           209          
00001112  4EF9 00001144            210          Jmp     EA_ADD_OPMODE_DEST      ; Must be an Add destination if none of the above
00001118                           211          
00001118                           212  EA_ADDA ; Figures out the EA for AddA
00001118  4EB9 0000115A            213          Jsr     EA_ADD_SOURCE           ; Get the source EA
0000111E  1CFC 002C                214          Move.B  #',', (A6)+             ; Add a comma
00001122  4EB9 000015D8            215          Jsr     GET9TO11                ; Get the register
00001128  4EB9 000013BC            216          Jsr     EA_AN                   ; Add An
0000112E                           217          
0000112E                           218          ; <Next instruction>
0000112E                           219          
0000112E                           220  EA_ADD_OPMODE_SOURCE    ; Finds the EA for Add if it is for the source
0000112E  4EB9 0000115A            221          Jsr     EA_ADD_SOURCE           ; Get the source EA
00001134  1CFC 002C                222          Move.B  #',', (A6)+             ; Add a comma
00001138  4EB9 000015D8            223          Jsr     GET9TO11                ; Get the register
0000113E  4EB9 000013B0            224          Jsr     EA_DN                   ; Add Dn
00001144                           225          
00001144                           226          ; <Next instruction>
00001144                           227          
00001144                           228  EA_ADD_OPMODE_DEST      ; Finds the EA for Add if it is for the destination
00001144  4EB9 000015D8            229          Jsr     GET9TO11                ; Get the register
0000114A  4EB9 000013B0            230          Jsr     EA_DN                   ; Add Dn
00001150  1CFC 002C                231          Move.B  #',', (A6)+             ; Add a comma
00001154  4EB9 000011AA            232          Jsr     EA_ADD_DEST             ; Get the destination EA 
0000115A                           233          
0000115A                           234          ; <Next instruction>
0000115A                           235  
0000115A                           236  EA_ADD_SOURCE   ; Find out Add source
0000115A  4EB9 000015FC            237          Jsr     GET3TO5                 ; Get source mode
00001160  1A00                     238          Move.B  D0, D5                  ; Move source mode to D5
00001162  4EB9 0000160E            239          Jsr     Get0TO2                 ; Get source register
00001168                           240          
00001168                           241          ; List of valid effective addresses
00001168  BA3C 0000                242          Cmp.B   #Dn_Mode, D5            ; Dn
0000116C  6700 0242                243          Beq     EA_DN
00001170                           244          
00001170  BA3C 0001                245          Cmp.B   #An_Mode, D5            ; An
00001174  6700 0246                246          Beq     EA_AN
00001178                           247          
00001178  BA3C 0002                248          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000117C  6700 024A                249          Beq     EA_AN_PNTR
00001180                           250          
00001180  BA3C 0003                251          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001184  6700 0256                252          Beq     EA_AN_INC
00001188                           253          
00001188  BA3C 0004                254          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000118C  6700 0266                255          Beq     EA_AN_DEC
00001190                           256          
00001190                           257          ; Comparing registers at this point because modes are the same
00001190  B03C 0000                258          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001194  6700 0276                259          Beq     EA_WORD_ADDR
00001198                           260          
00001198  B03C 0001                261          Cmp.B   #Long_Reg, D0           ; (xxx).L
0000119C  6700 030A                262          Beq     EA_LONG_ADDR
000011A0                           263          
000011A0  B03C 0004                264          Cmp.B   #Imm_Reg, D0            ; #<data>
000011A4  6700 003C                265          Beq     EA_ADD_SIZE
000011A8                           266          
000011A8  4E75                     267          Rts
000011AA                           268          
000011AA                           269  EA_ADD_DEST ; Find out Add destination
000011AA  4EB9 000015FC            270          Jsr     GET3TO5                 ; Get destination mode
000011B0  1A00                     271          Move.B  D0, D5                  ; Move destination mode to D5
000011B2  4EB9 0000160E            272          Jsr     Get0TO2                 ; Get destination register
000011B8                           273          
000011B8                           274          ; List of valid effective addresses
000011B8  BA3C 0002                275          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000011BC  6700 020A                276          Beq     EA_AN_PNTR
000011C0                           277          
000011C0  BA3C 0003                278          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000011C4  6700 0216                279          Beq     EA_AN_INC
000011C8                           280          
000011C8  BA3C 0004                281          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000011CC  6700 0226                282          Beq     EA_AN_DEC
000011D0                           283          
000011D0                           284          ; Comparing registers at this point because modes are the same
000011D0  B03C 0000                285          Cmp.B   #Word_Reg, D0           ; (xxx).W
000011D4  6700 0236                286          Beq     EA_WORD_ADDR
000011D8                           287          
000011D8  B03C 0001                288          Cmp.B   #Long_Reg, D0           ; (xxx).L
000011DC  6700 02CA                289          Beq     EA_LONG_ADDR
000011E0                           290                  
000011E0  4E75                     291          Rts
000011E2                           292          
000011E2                           293  EA_ADD_SIZE ; Find the size of immediate data being moved
000011E2  4EB9 000015EA            294          Jsr     GET6TO8                 ; Get Move size
000011E8                           295  
000011E8  B03C 0000                296          Cmp.B   #%000, D0               ; Byte
000011EC  6700 039C                297          Beq     EA_IMM_BYTE
000011F0                           298  
000011F0  B03C 0001                299          Cmp.B   #%001, D0               ; Word
000011F4  6700 03A4                300          Beq     EA_IMM_WORD
000011F8                           301          
000011F8  B03C 0002                302          Cmp.B   #%010, D0               ; Long
000011FC  6700 03AC                303          Beq     EA_IMM_LONG
00001200                           304          
00001200  B03C 0003                305          Cmp.B   #%011, D0               ; AddA Word
00001204  6700 0394                306          Beq     EA_IMM_WORD
00001208                           307     
00001208  B03C 0007                308          Cmp.B   #%111, D0               ; AddA Long
0000120C  6700 039C                309          Beq     EA_IMM_LONG
00001210                           310          
00001210  4E75                     311          Rts
00001212                           312          
00001212                           313  ;=================================================;        
00001212                           314  ;-------------------- EA AddQ --------------------;
00001212                           315  ;=================================================;
00001212                           316  EA_ADDQ ; Figures out the EA for AddQ
00001212  4EB9 00001222            317          Jsr     EA_ADDQ_CHECK_8         ; Get the immediate value
00001218  1CFC 002C                318          Move.B  #',', (A6)+             ; Add a comma
0000121C  4EB9 00001246            319          Jsr     EA_ADDQ_DEST            ; Add the destination
00001222                           320  
00001222                           321  EA_ADDQ_CHECK_8 ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001222  4EB9 000015D8            322          Jsr     GET9TO11                ; Isolate the count/register bits
00001228                           323          
00001228  B03C 0000                324          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
0000122C  6E00 000C                325          Bgt     EA_ADDQ_IMMEDIATE
00001230                           326          
00001230  103C 0008                327          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001234                           328          
00001234  4EF9 0000123A            329          Jmp     EA_ADDQ_IMMEDIATE
0000123A                           330          
0000123A                           331  EA_ADDQ_IMMEDIATE   ; Adds an immediate value before the comma
0000123A  1CFC 0023                332          Move.B  #'#', (A6)+
0000123E  0600 0030                333          Add.B   #$30, D0
00001242  1CC0                     334          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001244                           335          
00001244  4E75                     336          Rts
00001246                           337          
00001246                           338  EA_ADDQ_DEST    ; Determines the destination       
00001246  4EB9 000015FC            339          Jsr     GET3TO5                 ; Get source mode
0000124C  1A00                     340          Move.B  D0, D5                  ; Move source mode to D5
0000124E  4EB9 0000160E            341          Jsr     Get0TO2                 ; Get source register
00001254                           342          
00001254                           343          ; List of valid effective addresses
00001254  BA3C 0000                344          Cmp.B   #Dn_Mode, D5            ; Dn
00001258  6700 0156                345          Beq     EA_DN
0000125C                           346          
0000125C  BA3C 0001                347          Cmp.B   #An_Mode, D5            ; An
00001260  6700 015A                348          Beq     EA_AN
00001264                           349          
00001264  BA3C 0002                350          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001268  6700 015E                351          Beq     EA_AN_PNTR
0000126C                           352          
0000126C  BA3C 0003                353          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001270  6700 016A                354          Beq     EA_AN_INC
00001274                           355          
00001274  BA3C 0004                356          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001278  6700 017A                357          Beq     EA_AN_DEC
0000127C                           358          
0000127C                           359          ; Comparing registers at this point because modes are the same
0000127C  B03C 0000                360          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001280  6700 018A                361          Beq     EA_WORD_ADDR
00001284                           362          
00001284  B03C 0001                363          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001288  6700 021E                364          Beq     EA_LONG_ADDR
0000128C                           365          
0000128C                           366  ;=========================================================;        
0000128C                           367  ;---------------------- EA Sub/SubA ----------------------;
0000128C                           368  ; Jumps straight to EA_ADD because the EA for Add/AddA and
0000128C                           369  ; Sub/SubA are exactly the same.
0000128C                           370  ;=========================================================;
0000128C                           371  EA_SUB
0000128C  4EF8 10E4                372          Jmp     EA_ADD
00001290                           373  
00001290                           374  ;=========================================================;        
00001290                           375  ;---------------------- EA Cmp/CmpA ----------------------;
00001290                           376  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001290                           377  ; Cmp/CmpA are exactly the same.
00001290                           378  ;=========================================================;
00001290                           379  EA_CMP       
00001290  4EF8 10E4                380          Jmp     EA_ADD
00001294                           381          
00001294                           382  ;=========================================================;        
00001294                           383  ;------------------------ EA Lea -------------------------;
00001294                           384  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001294                           385  ; Cmp/CmpA are exactly the same.
00001294                           386  ;=========================================================;
00001294                           387  EA_LEA
00001294  4EF8 10E4                388          Jmp     EA_ADD
00001298                           389  
00001298                           390  ;=========================================================;
00001298                           391  ;--------------------- EA Bit Shift ----------------------;
00001298                           392  ; Finds the EA for ASd, LSd, ROd. All of these OP codes
00001298                           393  ; are combined because the EA for each code is exactly the
00001298                           394  ; same.
00001298                           395  ;=========================================================;
00001298                           396  EA_BIT_SHIFT    ; Figures out the EA for bit shift functions
00001298  4EB9 00001632            397          Jsr     GET6TO7
0000129E                           398          
0000129E  B03C 0003                399          Cmp.B   #%11, D0                ; If bits 6 and 7 are not %11, then we are shifting a register
000012A2  6600 0040                400          Bne     EA_SHIFT_REGISTER
000012A6                           401          
000012A6  4EB9 000012AC            402          Jsr     EA_SHIFT_MEMORY         ; If bits 6 and 7 are %11, then we are shifting memory
000012AC                           403          
000012AC                           404          ; <Next instruction>
000012AC                           405                  
000012AC                           406  EA_SHIFT_MEMORY ; Adds the correct EA for a memory shift
000012AC  4EB9 000015FC            407          Jsr     GET3TO5                 ; Get source mode
000012B2  1A00                     408          Move.B  D0, D5                  ; Move source mode to D5
000012B4  4EB9 0000160E            409          Jsr     Get0TO2                 ; Get source register
000012BA                           410          
000012BA                           411          ; List of valid effective addresses        
000012BA  BA3C 0002                412          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000012BE  6700 0108                413          Beq     EA_AN_PNTR
000012C2                           414          
000012C2  BA3C 0003                415          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000012C6  6700 0114                416          Beq     EA_AN_INC
000012CA                           417          
000012CA  BA3C 0004                418          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000012CE  6700 0124                419          Beq     EA_AN_DEC
000012D2                           420          
000012D2                           421          ; Comparing registers at this point because modes are the same
000012D2  B03C 0000                422          Cmp.B   #Word_Reg, D0           ; (xxx).W
000012D6  6700 0134                423          Beq     EA_WORD_ADDR
000012DA                           424          
000012DA  B03C 0001                425          Cmp.B   #Long_Reg, D0           ; (xxx).L
000012DE  6700 01C8                426          Beq     EA_LONG_ADDR
000012E2                           427          
000012E2  4E75                     428          Rts
000012E4                           429          
000012E4                           430  EA_SHIFT_REGISTER   ; Figure out if we are shifting by #<data> or by the value in a data register
000012E4  4EB9 00001644            431          Jsr     GETBIT5
000012EA                           432          
000012EA  B03C 0000                433          Cmp.B   #0, D0                  ; Check if bit 5 is %0
000012EE  6700 0008                434          Beq     EA_SHIFT_CHECK_8
000012F2                           435          
000012F2  4EF9 00001320            436          Jmp     EA_SHIFT_DN             ; If it's not, we are shifting from a data register
000012F8                           437          
000012F8                           438  EA_SHIFT_CHECK_8    ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
000012F8  4EB9 000015D8            439          Jsr     GET9TO11                ; Isolate the count/register bits
000012FE                           440          
000012FE  B03C 0000                441          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
00001302  6E00 000C                442          Bgt     EA_SHIFT_IMMEDIATE
00001306                           443          
00001306  103C 0008                444          Move.B  #8, D0                  ; Else, use 8 as the immediate value
0000130A                           445                  
0000130A  4EF9 00001310            446          Jmp     EA_SHIFT_IMMEDIATE
00001310                           447          
00001310                           448  EA_SHIFT_IMMEDIATE  ; Adds an immediate value before the comma
00001310  1CFC 0023                449          Move.B  #'#', (A6)+
00001314  0600 0030                450          Add.B   #$30, D0
00001318  1CC0                     451          Move.B  D0, (A6)+               ; Add the immediate value to the string
0000131A                           452  
0000131A  4EF9 00001332            453          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it
00001320                           454          
00001320                           455  EA_SHIFT_DN ; Adds a data register before the comma
00001320  4EB9 000015D8            456          Jsr     GET9TO11                ; Isolate the data register bits
00001326                           457          
00001326  4EB9 000013B0            458          Jsr     EA_DN                   ; Add the data register to the string
0000132C                           459          
0000132C  4EF9 00001332            460          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it 
00001332                           461          
00001332                           462  EA_SHIFT_COMMA  ; Adds the comma and everything after it to the string
00001332  1CFC 002C                463          Move.B  #',', (A6)+
00001336                           464          
00001336  4EB9 0000160E            465          Jsr     GET0TO2                 ; Get the register number
0000133C                           466          
0000133C  4EB9 000013B0            467          Jsr     EA_DN                   ; Add the register
00001342                           468          
00001342                           469          ; <Next instruction>
00001342                           470  
00001342                           471  ;============================================;        
00001342                           472  ;--------------- EA Immediate ---------------;
00001342                           473  ;============================================;
00001342                           474  EA_IMMEDIATE    ; Figures out the EA for immediate data OP codes
00001342  4EB9 00001352            475          Jsr     EA_IMMEDIATE_SIZE       ; Get the size of the immediate data and add to string
00001348  1CFC 002C                476          Move.B  #',', (A6)+             ; Add a comma
0000134C  4EB9 00001372            477          Jsr     EA_IMMEDIATE_DEST       ; Add the destination EA
00001352                           478          
00001352                           479          ; <Next instruction>
00001352                           480          
00001352                           481  EA_IMMEDIATE_SIZE   ; Determines the size of the immediate data and adds it
00001352  4EB9 00001632            482          Jsr     GET6TO7                 ; Isolate the size bits
00001358                           483                  
00001358  B03C 0001                484          Cmp.B   #%01, D0                ; Immediate word
0000135C  6700 023C                485          Beq     EA_IMM_WORD
00001360                           486          
00001360  B03C 0002                487          Cmp.B   #%10, D0                ; Immediate long
00001364  6700 0244                488          Beq     EA_IMM_LONG
00001368                           489          
00001368  524B                     490          AddA.W  #1, A3                  ; Else, move the pointer forward by a byte get the next byte
0000136A  4EF9 0000158A            491          Jmp     EA_IMM_BYTE
00001370                           492          
00001370  4E75                     493          Rts
00001372                           494          
00001372                           495  EA_IMMEDIATE_DEST   ; Determines the destination EA
00001372  4EB9 000015FC            496          Jsr     GET3TO5                 ; Get source mode
00001378  1A00                     497          Move.B  D0, D5                  ; Move source mode to D5
0000137A  4EB9 0000160E            498          Jsr     Get0TO2                 ; Get source register
00001380                           499       
00001380                           500          ; List of valid effective addresses
00001380  BA3C 0000                501          Cmp.B   #Dn_Mode, D5            ; Dn
00001384  6700 002A                502          Beq     EA_DN
00001388                           503          
00001388  BA3C 0002                504          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000138C  6700 003A                505          Beq     EA_AN_PNTR
00001390                           506          
00001390  BA3C 0003                507          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001394  6700 0046                508          Beq     EA_AN_INC
00001398                           509          
00001398  BA3C 0004                510          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000139C  6700 0056                511          Beq     EA_AN_DEC
000013A0                           512          
000013A0                           513          ; Comparing registers at this point because modes are the same
000013A0  B03C 0000                514          Cmp.B   #Word_Reg, D0           ; (xxx).W
000013A4  6700 0066                515          Beq     EA_WORD_ADDR
000013A8                           516          
000013A8  B03C 0001                517          Cmp.B   #Long_Reg, D0           ; (xxx).L
000013AC  6700 00FA                518          Beq     EA_LONG_ADDR
000013B0                           519                 
000013B0                           520  ;==========================================;        
000013B0                           521  ;---------- General EA functions ----------;
000013B0                           522  ;==========================================;
000013B0                           523  EA_DN   ; Adds Dn EA to string
000013B0  1CFC 0044                524          Move.B  #'D', (A6)+             
000013B4  0600 0030                525          Add.B   #$30, D0        
000013B8  1CC0                     526          Move.B  D0, (A6)+               
000013BA                           527                  
000013BA  4E75                     528          Rts
000013BC                           529  
000013BC                           530  EA_AN   ; Adds An EA to string
000013BC  1CFC 0041                531          Move.B  #'A', (A6)+
000013C0  0600 0030                532          Add.B   #$30, D0    
000013C4  1CC0                     533          Move.B  D0, (A6)+               
000013C6                           534                  
000013C6  4E75                     535          Rts
000013C8                           536  
000013C8                           537  EA_AN_PNTR  ; Adds (An) EA to string
000013C8  1CFC 0028                538          Move.B  #'(', (A6)+
000013CC  1CFC 0041                539          Move.B  #'A', (A6)+
000013D0  0600 0030                540          Add.B   #$30, D0
000013D4  1CC0                     541          Move.B  D0, (A6)+
000013D6  1CFC 0029                542          Move.B  #')', (A6)+
000013DA                           543                  
000013DA  4E75                     544          Rts
000013DC                           545          
000013DC                           546  EA_AN_INC   ; Adds (An)+ EA to string
000013DC  1CFC 0028                547          Move.B  #'(', (A6)+
000013E0  1CFC 0041                548          Move.B  #'A', (A6)+
000013E4  0600 0030                549          Add.B   #$30, D0
000013E8  1CC0                     550          Move.B  D0, (A6)+
000013EA  1CFC 0029                551          Move.B  #')', (A6)+
000013EE  1CFC 002B                552          Move.B  #'+', (A6)+
000013F2                           553                  
000013F2  4E75                     554          Rts 
000013F4                           555          
000013F4                           556  EA_AN_DEC   ; Adds -(An) EA to string
000013F4  1CFC 002D                557          Move.B  #'-', (A6)+
000013F8  1CFC 0028                558          Move.B  #'(', (A6)+
000013FC  1CFC 0041                559          Move.B  #'A', (A6)+
00001400  0600 0030                560          Add.B   #$30, D0
00001404  1CC0                     561          Move.B  D0, (A6)+
00001406  1CFC 0029                562          Move.B  #')', (A6)+
0000140A                           563                  
0000140A  4E75                     564          Rts 
0000140C                           565  
0000140C                           566  EA_WORD_ADDR    ; Adds $Word to string
0000140C  3C1B                     567          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
0000140E                           568          
0000140E  1CFC 0024                569          Move.B  #'$', (A6)+
00001412                           570          
00001412  BC7C 8000                571          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001416  6E00 000C                572          Bgt     EA_SIGN_EXT_16
0000141A                           573          
0000141A  BC7C 8000                574          Cmp.W   #$8000, D6          ; Word address is greater than 8000
0000141E  6F00 001C                575          Ble     EA_SIGN_EXT_32
00001422                           576          
00001422  4E75                     577          Rts
00001424                           578                  
00001424                           579  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
00001424  1CFC 0030                580          Move.B  #'0', (A6)+
00001428  1CFC 0030                581          Move.B  #'0', (A6)+
0000142C  1CFC 0030                582          Move.B  #'0', (A6)+
00001430  1CFC 0030                583          Move.B  #'0', (A6)+
00001434                           584          
00001434  4EB9 00001454            585          Jsr     EA_WORD_TO_STRING       
0000143A                           586          
0000143A  4E75                     587          Rts
0000143C                           588  
0000143C                           589  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
0000143C  1CFC 0046                590          Move.B  #'F', (A6)+
00001440  1CFC 0046                591          Move.B  #'F', (A6)+
00001444  1CFC 0046                592          Move.B  #'F', (A6)+
00001448  1CFC 0046                593          Move.B  #'F', (A6)+
0000144C                           594          
0000144C  4EB9 00001454            595          Jsr     EA_WORD_TO_STRING   
00001452                           596          
00001452  4E75                     597          Rts
00001454                           598          
00001454                           599  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
00001454  4280                     600          Clr.L   D0              ; Clear D0
00001456  3006                     601          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
00001458                           602  
00001458  123C 000C                603          Move.B  #12, D1         ; Grab bits 12 to 15
0000145C  E268                     604          Lsr     D1, D0
0000145E  0600 0030                605          Add.B   #$30, D0
00001462  1CC0                     606          Move.B  D0, (A6)+
00001464                           607          
00001464  4280                     608          Clr.L   D0
00001466  3006                     609          Move.W  D6, D0
00001468                           610          
00001468  123C 0004                611          Move.B  #4, D1          ; Grab bits 8 to 11
0000146C  E368                     612          Lsl     D1, D0
0000146E  123C 000C                613          Move.B  #12, D1
00001472  E268                     614          Lsr     D1, D0  
00001474  0600 0030                615          Add.B   #$30, D0
00001478  1CC0                     616          Move.B  D0, (A6)+
0000147A                           617          
0000147A  4280                     618          Clr.L   D0
0000147C  3006                     619          Move.W  D6, D0
0000147E                           620          
0000147E  123C 0008                621          Move.B  #8, D1          ; Grab bits 4 to 7
00001482  E368                     622          Lsl     D1, D0
00001484  123C 000C                623          Move.B  #12, D1
00001488  E268                     624          Lsr     D1, D0
0000148A  0600 0030                625          Add.B   #$30, D0
0000148E  1CC0                     626          Move.B  D0, (A6)+
00001490                           627          
00001490  4280                     628          Clr.L   D0
00001492  3006                     629          Move.W  D6, D0
00001494                           630          
00001494  123C 000C                631          Move.B  #12, D1         ; Grab bits 0 to 3
00001498  E368                     632          Lsl     D1, D0
0000149A  123C 000C                633          Move.B  #12, D1
0000149E  E268                     634          Lsr     D1, D0
000014A0  0600 0030                635          Add.B   #$30, D0
000014A4  1CC0                     636          Move.B  D0, (A6)+
000014A6                           637          
000014A6  4E75                     638          Rts
000014A8                           639          
000014A8                           640  EA_LONG_ADDR    ; Adds $Long to string
000014A8  2C1B                     641          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000014AA                           642          
000014AA  1CFC 0024                643          Move.B  #'$', (A6)+
000014AE                           644          
000014AE  4EB9 000014B6            645          Jsr     EA_LONG_TO_STRING
000014B4                           646  
000014B4  4E75                     647          Rts
000014B6                           648                  
000014B6                           649  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
000014B6  4280                     650          Clr.L   D0              ; Clear D0
000014B8  2006                     651          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
000014BA                           652  
000014BA  123C 001C                653          Move.B  #28, D1         ; Grab bits 28 to 31
000014BE  E2A8                     654          Lsr.L   D1, D0
000014C0  0600 0030                655          Add.B   #$30, D0
000014C4  1CC0                     656          Move.B  D0, (A6)+
000014C6                           657          
000014C6  4280                     658          Clr.L   D0             
000014C8  2006                     659          Move.L  D6, D0          
000014CA                           660          
000014CA  123C 0004                661          Move.B  #4, D1          ; Grab bits 24 to 27
000014CE  E3A8                     662          Lsl.L   D1, D0
000014D0  123C 001C                663          Move.B  #28, D1
000014D4  E2A8                     664          Lsr.L   D1, D0
000014D6  0600 0030                665          Add.B   #$30, D0
000014DA  1CC0                     666          Move.B  D0, (A6)+
000014DC                           667          
000014DC  4280                     668          Clr.L   D0             
000014DE  2006                     669          Move.L  D6, D0
000014E0                           670  
000014E0  123C 0008                671          Move.B  #8, D1          ; Grab bits 20 to 23
000014E4  E3A8                     672          Lsl.L   D1, D0
000014E6  123C 001C                673          Move.B  #28, D1
000014EA  E2A8                     674          Lsr.L   D1, D0
000014EC  0600 0030                675          Add.B   #$30, D0
000014F0  1CC0                     676          Move.B  D0, (A6)+
000014F2                           677          
000014F2  4280                     678          Clr.L   D0             
000014F4  2006                     679          Move.L  D6, D0
000014F6                           680  
000014F6  123C 000C                681          Move.B  #12, D1         ; Grab bits 16 to 19
000014FA  E3A8                     682          Lsl.L   D1, D0
000014FC  123C 001C                683          Move.B  #28, D1
00001500  E2A8                     684          Lsr.L   D1, D0
00001502  0600 0030                685          Add.B   #$30, D0
00001506  1CC0                     686          Move.B  D0, (A6)+
00001508                           687          
00001508  4280                     688          Clr.L   D0             
0000150A  2006                     689          Move.L  D6, D0
0000150C                           690  
0000150C  123C 0010                691          Move.B  #16, D1         ; Grab bits 12 to 15
00001510  E3A8                     692          Lsl.L   D1, D0
00001512  123C 001C                693          Move.B  #28, D1
00001516  E2A8                     694          Lsr.L   D1, D0
00001518  0600 0030                695          Add.B   #$30, D0
0000151C  1CC0                     696          Move.B  D0, (A6)+
0000151E                           697          
0000151E  4280                     698          Clr.L   D0             
00001520  2006                     699          Move.L  D6, D0
00001522                           700          
00001522  123C 0014                701          Move.B  #20, D1         ; Grab bits 8 to 11
00001526  E3A8                     702          Lsl.L   D1, D0
00001528  123C 001C                703          Move.B  #28, D1
0000152C  E2A8                     704          Lsr.L   D1, D0
0000152E  0600 0030                705          Add.B   #$30, D0
00001532  1CC0                     706          Move.B  D0, (A6)+
00001534                           707          
00001534  4280                     708          Clr.L   D0             
00001536  2006                     709          Move.L  D6, D0
00001538                           710  
00001538  123C 0018                711          Move.B  #24, D1         ; Grab bits 4 to 7
0000153C  E3A8                     712          Lsl.L   D1, D0
0000153E  123C 001C                713          Move.B  #28, D1
00001542  E2A8                     714          Lsr.L   D1, D0
00001544  0600 0030                715          Add.B   #$30, D0
00001548  1CC0                     716          Move.B  D0, (A6)+
0000154A                           717          
0000154A  4280                     718          Clr.L   D0             
0000154C  2006                     719          Move.L  D6, D0
0000154E                           720  
0000154E  123C 001C                721          Move.B  #28, D1         ; Grab bits 0 to 3
00001552  E3A8                     722          Lsl.L   D1, D0
00001554  123C 001C                723          Move.B  #28, D1
00001558  E2A8                     724          Lsr.L   D1, D0
0000155A  0600 0030                725          Add.B   #$30, D0
0000155E  1CC0                     726          Move.B  D0, (A6)+
00001560                           727          
00001560  4E75                     728          Rts
00001562                           729          
00001562                           730  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
00001562  4280                     731          Clr.L   D0              ; Clear D0
00001564  2006                     732          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
00001566                           733  
00001566  123C 0004                734          Move.B  #4, D1          ; Grab bits 4 to 7
0000156A  E228                     735          Lsr.B   D1, D0
0000156C  0600 0030                736          Add.B   #$30, D0
00001570  1CC0                     737          Move.B  D0, (A6)+
00001572                           738          
00001572  4280                     739          Clr.L   D0             
00001574  2006                     740          Move.L  D6, D0          
00001576                           741          
00001576  123C 0004                742          Move.B  #4, D1          ; Grab bits 0 to 3
0000157A  E328                     743          Lsl.B   D1, D0
0000157C  123C 0004                744          Move.B  #4, D1
00001580  E228                     745          Lsr.B   D1, D0
00001582  0600 0030                746          Add.B   #$30, D0
00001586  1CC0                     747          Move.B  D0, (A6)+
00001588                           748          
00001588  4E75                     749          Rts
0000158A                           750  
0000158A                           751  EA_IMM_BYTE ; Finds the immediate byte data
0000158A  1C1B                     752          Move.B  (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
0000158C                           753          
0000158C  1CFC 0023                754          Move.B  #'#', (A6)+         
00001590  1CFC 0024                755          Move.B  #'$', (A6)+         
00001594                           756          
00001594  4EB8 1562                757          Jsr     EA_BYTE_TO_STRING    ; Add the byte to the string
00001598                           758          
00001598  4E75                     759          Rts
0000159A                           760                  
0000159A                           761  EA_IMM_WORD ; Finds the immediate word data
0000159A  3C1B                     762          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
0000159C                           763          
0000159C  1CFC 0023                764          Move.B  #'#', (A6)+         
000015A0  1CFC 0024                765          Move.B  #'$', (A6)+         
000015A4                           766          
000015A4  4EB8 1454                767          Jsr     EA_WORD_TO_STRING    ; Add the word to the string
000015A8                           768          
000015A8  4E75                     769          Rts
000015AA                           770          
000015AA                           771  EA_IMM_LONG ; Finds the immediate long data
000015AA  2C1B                     772          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
000015AC                           773          
000015AC  1CFC 0023                774          Move.B  #'#', (A6)+
000015B0  1CFC 0024                775          Move.B  #'$', (A6)+
000015B4                           776          
000015B4  4EB8 14B6                777          Jsr     EA_LONG_TO_STRING    ; Add the long to the string
000015B8                           778          
000015B8  4E75                     779          Rts
000015BA                           780  
000015BA                           781  ;===========================================================;       
000015BA                           782  ;---------------- Bit Chopping Sub Routines ----------------;
000015BA                           783  ; These Sub Routines Chop a WORD size piece of data from
000015BA                           784  ; Data register 4 into a smaller piece, leaving just the
000015BA                           785  ; Piece in register 0 while leaving the original piece
000015BA                           786  ; of data intact.
000015BA                           787  ;===========================================================;
000015BA                           788  GET12TO15
000015BA  4280                     789          CLR.L   D0
000015BC  3004                     790          Move.W  D4, D0
000015BE                           791                  
000015BE  123C 000C                792          Move.B  #12, D1
000015C2  E268                     793          LSR     D1, D0
000015C4                           794                  
000015C4  4E75                     795          RTS
000015C6                           796  
000015C6                           797  GET12TO13
000015C6  4280                     798          CLR.L   D0
000015C8  3004                     799          Move.W  D4, D0
000015CA                           800          
000015CA  123C 0002                801          Move.B  #2, D1
000015CE  E368                     802          LSL     D1, D0
000015D0                           803          
000015D0  123C 000E                804          Move.B  #14, D1
000015D4  E268                     805          LSR     D1, D0
000015D6                           806          
000015D6  4E75                     807          RTS
000015D8                           808                  
000015D8                           809  GET9TO11        
000015D8  4280                     810          CLR.L   D0
000015DA  3004                     811          Move.W  D4, D0
000015DC                           812                  
000015DC  123C 0004                813          Move.B  #4, D1
000015E0  E368                     814          LSL     D1, D0
000015E2                           815                  
000015E2  123C 000D                816          Move.B  #13, D1
000015E6  E268                     817          LSR     D1, D0
000015E8                           818                  
000015E8  4E75                     819          RTS
000015EA                           820                  
000015EA                           821  GET6TO8 
000015EA  4280                     822          CLR.L   D0
000015EC  3004                     823          Move.W  D4, D0
000015EE                           824                  
000015EE  123C 0007                825          Move.B  #7, D1
000015F2  E368                     826          LSL     D1, D0
000015F4                           827                  
000015F4  123C 000D                828          Move.B  #13, D1
000015F8  E268                     829          LSR     D1, D0
000015FA                           830                  
000015FA  4E75                     831          RTS
000015FC                           832                  
000015FC                           833  GET3TO5 
000015FC  4280                     834          CLR.L   D0
000015FE  3004                     835          Move.W  D4, D0
00001600                           836                  
00001600  123C 000A                837          Move.B  #10, D1
00001604  E368                     838          LSL     D1, D0
00001606                           839                  
00001606  123C 000D                840          Move.B  #13, D1
0000160A  E268                     841          LSR     D1, D0
0000160C                           842                  
0000160C  4E75                     843          RTS
0000160E                           844  GET0TO2 
0000160E  4280                     845          CLR.L   D0
00001610  3004                     846          Move.W  D4, D0
00001612                           847                  
00001612  123C 000D                848          Move.B  #13, D1
00001616  E368                     849          LSL     D1, D0
00001618                           850                  
00001618  123C 000D                851          Move.B  #13, D1
0000161C  E268                     852          LSR     D1, D0
0000161E                           853                  
0000161E  4E75                     854          RTS
00001620                           855  GETBIT8
00001620  4280                     856          CLR.L   D0
00001622  3004                     857          Move.W  D4, D0
00001624                           858                  
00001624  123C 0007                859          Move.B  #7, D1
00001628  E368                     860          LSL     D1, D0
0000162A                           861                  
0000162A  123C 000F                862          Move.B  #15, D1
0000162E  E268                     863          LSR     D1, D0
00001630                           864                  
00001630  4E75                     865          RTS 
00001632                           866          
00001632                           867  GET6TO7
00001632  4280                     868          Clr.L   D0
00001634  3004                     869          Move.W  D4, D0
00001636                           870          
00001636  123C 0008                871          Move.B  #8, D1
0000163A  E368                     872          Lsl     D1, D0
0000163C                           873          
0000163C  123C 000E                874          Move.B  #14, D1
00001640  E268                     875          Lsr     D1, D0
00001642                           876          
00001642  4E75                     877          Rts
00001644                           878          
00001644                           879  GETBIT5
00001644  4280                     880          Clr.L   D0
00001646  3004                     881          Move.W  D4, D0
00001648                           882          
00001648  123C 000A                883          Move.B  #10, D1
0000164C  E368                     884          Lsl     D1, D0
0000164E                           885          
0000164E  123C 000F                886          Move.B  #15, D1
00001652  E268                     887          Lsr     D1, D0
00001654                           888          
00001654  4E75                     889          Rts
00001656                           890  
00001656                           891  
00001656                           892      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_TEST1          5E09
ADDQ_TEST2          5009
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_ADD              10E4
EA_ADDA             1118
EA_ADDQ             1212
EA_ADDQ_CHECK_8     1222
EA_ADDQ_DEST        1246
EA_ADDQ_IMMEDIATE   123A
EA_ADD_DEST         11AA
EA_ADD_OPMODE_DEST  1144
EA_ADD_OPMODE_SOURCE  112E
EA_ADD_SIZE         11E2
EA_ADD_SOURCE       115A
EA_AN               13BC
EA_AN_DEC           13F4
EA_AN_INC           13DC
EA_AN_PNTR          13C8
EA_BIT_SHIFT        1298
EA_BYTE_TO_STRING   1562
EA_CMP              1290
EA_DN               13B0
EA_IMMEDIATE        1342
EA_IMMEDIATE_DEST   1372
EA_IMMEDIATE_SIZE   1352
EA_IMM_BYTE         158A
EA_IMM_LONG         15AA
EA_IMM_WORD         159A
EA_LEA              1294
EA_LONG_ADDR        14A8
EA_LONG_TO_STRING   14B6
EA_MOVE             101C
EA_MOVE_DEST        107C
EA_MOVE_SIZE        10C4
EA_MOVE_SOURCE      102C
EA_SHIFT_CHECK_8    12F8
EA_SHIFT_COMMA      1332
EA_SHIFT_DN         1320
EA_SHIFT_IMMEDIATE  1310
EA_SHIFT_MEMORY     12AC
EA_SHIFT_REGISTER   12E4
EA_SIGN_EXT_16      1424
EA_SIGN_EXT_32      143C
EA_SUB              128C
EA_WORD_ADDR        140C
EA_WORD_TO_STRING   1454
GET0TO2             160E
GET12TO13           15C6
GET12TO15           15BA
GET3TO5             15FC
GET6TO7             1632
GET6TO8             15EA
GET9TO11            15D8
GETBIT5             1644
GETBIT8             1620
IMM_MODE            7
IMM_REG             4
IMM_TEST1           41F
IMM_TEST2           479
LONG_MODE           7
LONG_REG            1
SHIFT_TEST1         E1D7
SHIFT_TEST2         E1F8
SHIFT_TEST3         EF21
SHIFT_TEST4         E507
SHIFT_TEST5         E104
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
