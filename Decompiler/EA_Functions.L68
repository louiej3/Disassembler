00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/29/2014 12:40:54 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L $Long,A7
00000000                            39  
00000000  =0000E1D7                 40  Shift_Test1         EQU     %1110000111010111   ; Asl (A7)
00000000  =0000E1F8                 41  Shift_Test2         EQU     %1110000111111000   ; Asl $Word
00000000  =0000EF21                 42  Shift_Test3         EQU     %1110111100100001   ; Asl.B D7,D1
00000000  =0000E507                 43  Shift_Test4         EQU     %1110010100000111   ; Asl.B #2,D7
00000000  =0000E104                 44  Shift_Test5         EQU     %1110000100000100   ; Asl.B #8,D4
00000000                            45  
00000000  =0000041F                 46  Imm_Test1           EQU     %0000010000011111   ; SubI.B #$Imm,(A7)+
00000000  =00000479                 47  Imm_Test2           EQU     %0000010001111001   ; SubI.W #$Imm,$Long
00000000                            48  
00000000  =00005E09                 49  AddQ_Test1          EQU     %0101111000001001   ; AddQ.B #7,A1
00000000  =00005009                 50  AddQ_Test2          EQU     %0101000000001001   ; AddQ.B #8,A1
00000000                            51  
00000000  =0000CFFC                 52  Muls_Test1          EQU     %1100111111111100   ; Muls.W #$Imm,D7
00000000  =0000CFD2                 53  Muls_Test2          EQU     %1100111111010010   ; Muls.W (A2),D7
00000000                            54  
00000000  =00000F07                 55  Btst_Test1          EQU     %0000111100000111   ; Btst D7,D7
00000000  =00000F3C                 56  Btst_Test2          EQU     %0000111100111100   ; Btst D7,#$Imm
00000000  =00000807                 57  Btst_Test3          EQU     %0000100000000111   ; Btst #$Byte,D7
00000000                            58  
00000000  =00006007                 59  Branch_Test1        EQU     %0110000000000111   ; Bra 7
00000000  =00006000                 60  Branch_Test2        EQU     %0110000000000000   ; Bra Word
00000000                            61  
00000000  =00004897                 62  MoveM_Test1         EQU     %0100100010010111   ; MoveM.W List,(A7)
00000000  =000048B8                 63  MoveM_Test2         EQU     %0100100010111000   ; MoveM.W List,$Word
00000000  =00004CB8                 64  MoveM_Test3         EQU     %0100110010111000   ; MoveM.W $Word,List
00000000  =000048A7                 65  MoveM_Test4         EQU     %0100100010100111   ; MoveM.W List,-(A7)
00000000                            66        
00001000                            67      ORG    $1000
00001000                            68      
00001000                            69  START:                  ; first instruction of program
00001000  267C 00000400             70          Move.L  #$00000400, A3
00001006  287C 00000600             71          Move.L  #$00000600, A4  ; Save register values here with MoveM
0000100C                            72          
0000100C                            73          ; EA_BRANCH displacements
0000100C                            74          ;Move.W  #%0000000000000101, (A3)
0000100C                            75          
0000100C                            76          ; EA_MOVEM register list masks
0000100C                            77          ;Move.W  #%0010000000000000, (A3)
0000100C                            78          ;Move.W  #%1000000000000000, (A3)
0000100C                            79          ;Move.W  #%0000000000000001, (A3)
0000100C                            80          ;Move.W  #%0000011111000000, (A3)
0000100C                            81          ;Move.W  #%1111000000000000, (A3)
0000100C                            82          ;Move.W  #%0000000000001111, (A3)
0000100C                            83          ;Move.W  #%1111010000000000, (A3)
0000100C                            84          ;Move.W  #%0000000000101111, (A3)
0000100C                            85          ;Move.W  #%0101010101010101, (A3)
0000100C                            86          ;Move.W  #%1010101010101010, (A3)
0000100C                            87          ;Move.W  #%1111011100000000, (A3)
0000100C  36BC 00EF                 88          Move.W  #%0000000011101111, (A3)
00001010                            89  
00001010  544B                      90          Add.W   #2, A3       
00001012                            91  
00001012  36BC 4030                 92          Move.W  #$4030, (A3)
00001016                            93          ;Move.L  #$12345678, (A3)
00001016  554B                      94          Sub.W   #2, A3
00001018                            95          ;Move.L  #$12349999, (A3)
00001018                            96          ;Move.W  #$11, (A3)
00001018                            97          ;Move.B  #$99, (A3)
00001018                            98          
00001018                            99          ;Move.W  #Test_Move1, D4
00001018                           100          ;Move.W  #Test_Move2, D4
00001018                           101          ;Move.W  #Test_Move3, D4
00001018                           102          ;Move.W  #Test_Move4, D4
00001018                           103          ;Move.W  #Test_Move5, D4
00001018                           104          ;Move.W  #Test_Move6, D4        
00001018                           105          ;Move.W  #Test_Move7, D4        
00001018                           106          ;Move.W  #Test_Move8, D4
00001018                           107          
00001018                           108          ;Move.W  #Add_Test1, D4
00001018                           109          ;Move.W  #Add_Test2, D4
00001018                           110          ;Move.W  #Add_Test3, D4
00001018                           111          ;Move.W  #Add_Test4, D4
00001018                           112          
00001018                           113          ;Move.W  #Shift_Test1, D4
00001018                           114          ;Move.W  #Shift_Test2, D4
00001018                           115          ;Move.W  #Shift_Test3, D4
00001018                           116          ;Move.W  #Shift_Test4, D4
00001018                           117          ;Move.W  #Shift_Test5, D4
00001018                           118          
00001018                           119          ;Move.W  #Imm_Test1, D4
00001018                           120          ;Move.W  #Imm_Test2, D4
00001018                           121          
00001018                           122          ;Move.W  #AddQ_Test1, D4
00001018                           123          ;Move.W  #AddQ_Test2, D4
00001018                           124          
00001018                           125          ;Move.W  #Muls_Test1, D4
00001018                           126          ;Move.W  #Muls_Test2, D4
00001018                           127          
00001018                           128          ;Move.W  #Btst_Test1, D4
00001018                           129          ;Move.W  #Btst_Test2, D4
00001018                           130          ;Move.W  #Btst_Test3, D4
00001018                           131          
00001018                           132          ;Move.W  #Branch_Test1, D4
00001018                           133          ;Move.W  #Branch_Test2, D4
00001018                           134          
00001018                           135          ;Move.W  #MoveM_Test1, D4
00001018                           136          ;Move.W  #MoveM_Test2, D4
00001018                           137          ;Move.W  #MoveM_Test3, D4
00001018  383C 48A7                138          Move.W  #MoveM_Test4, D4
0000101C                           139                  
0000101C                           140          ;Jmp     EA_MOVE     ; Branch to EA function for Move
0000101C                           141          ;Jmp     EA_ADD
0000101C                           142          ;Jmp     EA_BIT_SHIFT
0000101C                           143          ;Jmp     EA_IMMEDIATE
0000101C                           144          ;Jmp     EA_ADDQ
0000101C                           145          ;Jmp     EA_MULS
0000101C                           146          ;Jmp     EA_BTST
0000101C                           147          ;Jmp     EA_BRANCH
0000101C  4EF9 000010AA            148          Jmp     EA_MOVEM
00001022                           149  
00001022                           150  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
00001022                           151  ;-------------------- Effective Address Sub Routines --------------------;
00001022                           152  ; These subroutines look for the correct effective address
00001022                           153  ; in each OP code.
00001022                           154  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
00001022                           155  
00001022                           156  ;=============================================;
00001022                           157  ;--------------- EA Move/MoveA ---------------;
00001022                           158  ;=============================================;
00001022                           159  EA_MOVE
00001022  4EB9 00001032            160          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
00001028  1CFC 002C                161          Move.B  #',', (A6)+             ; Add a comma
0000102C  4EB9 00001042            162          Jsr     EA_MOVE_DEST            ; Add the EA for destination
00001032                           163          
00001032                           164          ; <Next instruction>
00001032                           165                  
00001032                           166  EA_MOVE_SOURCE  ; Find out Move's source
00001032  4EB9 000016C6            167          Jsr     EA_0TO5                 ; Get the EA
00001038                           168          
00001038  B03C 0004                169          Cmp.B   #Imm_Reg, D0            ; #<data>
0000103C  6700 004C                170          Beq     EA_MOVE_SIZE
00001040                           171          
00001040  4E75                     172          Rts
00001042                           173          
00001042                           174  EA_MOVE_DEST    ; Find out Move's destination
00001042  4EB9 0000173E            175          Jsr     GET6TO8                 ; Get destination mode
00001048  1A00                     176          Move.B  D0, D5                  ; Move destination mode to D5
0000104A  4EB9 0000172C            177          Jsr     GET9TO11                ; Get destination register
00001050                           178          
00001050                           179          ; List of valid effective addresses
00001050  BA3C 0000                180          Cmp.B   #Dn_Mode, D5            ; Dn
00001054  6700 0466                181          Beq     EA_DN
00001058                           182          
00001058  BA3C 0001                183          Cmp.B   #An_Mode, D5            ; An
0000105C  6700 046A                184          Beq     EA_AN
00001060                           185          
00001060  BA3C 0002                186          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001064  6700 046E                187          Beq     EA_AN_PNTR
00001068                           188          
00001068  BA3C 0003                189          Cmp.B   #An_Inc_Mode, D5        ; (An)+
0000106C  6700 047A                190          Beq     EA_AN_INC
00001070                           191          
00001070  BA3C 0004                192          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001074  6700 048A                193          Beq     EA_AN_DEC
00001078                           194          
00001078                           195          ; Comparing registers at this point because modes are the same
00001078  B03C 0000                196          Cmp.B   #Word_Reg, D0           ; (xxx).W
0000107C  6700 049A                197          Beq     EA_WORD_ADDR
00001080                           198          
00001080  B03C 0001                199          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001084  6700 052E                200          Beq     EA_LONG_ADDR
00001088                           201          
00001088  4E75                     202          Rts
0000108A                           203          
0000108A                           204  EA_MOVE_SIZE    ; Find the size of immediate data being moved
0000108A  4EB9 0000171A            205          Jsr     GET12TO13               ; Get Move size
00001090                           206  
00001090  B03C 0001                207          Cmp.B   #%01, D0                ; Byte
00001094  6700 0600                208          Beq     EA_IMM_BYTE
00001098                           209  
00001098  B03C 0003                210          Cmp.B   #%11, D0                ; Word
0000109C  6700 0608                211          Beq     EA_IMM_WORD
000010A0                           212          
000010A0  B03C 0002                213          Cmp.B   #%10, D0                ; Long
000010A4  6700 0610                214          Beq     EA_IMM_LONG
000010A8                           215          
000010A8  4E75                     216          Rts
000010AA                           217          
000010AA                           218  ;=================================================================;
000010AA                           219  ;---------------------------- EA MoveM ---------------------------;
000010AA                           220  ; D2 stores the counter for the number of consecutive ones in the
000010AA                           221  ; register list mask
000010AA                           222  ;
000010AA                           223  ; D3 stores a 1 if the register being added is the first register, 
000010AA                           224  ; or 0 if the register is not the first register being added
000010AA                           225  ;
000010AA                           226  ; D5 stores the register list mask
000010AA                           227  ;
000010AA                           228  ; D6 stores any expansion words
000010AA                           229  ;
000010AA                           230  ; D7 stores the loop counter
000010AA                           231  ;=================================================================;
000010AA                           232  EA_MOVEM
000010AA  48E4 3F00                233          MoveM.L D2-D7, -(A4)            ; Save D2-D7 at address A4 so we can use them for MoveM 
000010AE                           234          
000010AE  4282                     235          Clr.L   D2                      ; Clear out the data registers
000010B0  4283                     236          Clr.L   D3
000010B2  4285                     237          Clr.L   D5
000010B4  4286                     238          Clr.L   D6
000010B6  4287                     239          Clr.L   D7
000010B8                           240          
000010B8  5203                     241          Add.B   #1, D3                  ; Set D3 to 1 to specify the first register
000010BA  3A1B                     242          Move.W  (A3)+, D5               ; Store the register list mask
000010BC                           243          
000010BC  4EB9 000017B8            244          Jsr     GETBIT10
000010C2                           245          
000010C2  B03C 0000                246          Cmp.B   #%0, D0
000010C6  6700 0008                247          Beq     EA_MOVEM_REG_TO_MEM
000010CA                           248          
000010CA  4EF9 000010E4            249          Jmp     EA_MOVEM_MEM_TO_REG
000010D0                           250          
000010D0                           251  EA_MOVEM_REG_TO_MEM
000010D0  4EB9 000010FE            252          Jsr     EA_MOVEM_LIST_LOOP
000010D6  1CFC 002C                253          Move.B  #',', (A6)+
000010DA  4EB9 000016C6            254          Jsr     EA_0TO5
000010E0                           255          
000010E0  4CDC 00FC                256          MoveM.L (A4)+, D2-D7
000010E4                           257                  
000010E4                           258          ; <Next instruction>
000010E4                           259          
000010E4                           260  EA_MOVEM_MEM_TO_REG
000010E4  3E05                     261          Move.W  D5, D7
000010E6  4EB9 000016C6            262          Jsr     EA_0TO5
000010EC  1CFC 002C                263          Move.B  #',', (A6)+
000010F0  3A07                     264          Move.W  D7, D5
000010F2  4287                     265          Clr.L   D7
000010F4  4EB9 000010FE            266          Jsr     EA_MOVEM_LIST_LOOP
000010FA                           267          
000010FA  4CDC 00FC                268          MoveM.L (A4)+, D2-D7
000010FE                           269                  
000010FE                           270          ; <Next instruction>
000010FE                           271                  
000010FE                           272  EA_MOVEM_LIST_LOOP ; Determines if the list is in predecrement order or post increment order
000010FE  BE3C 0010                273          Cmp.B   #16, D7
00001102  6C00 0016                274          Bge     EA_MOVEM_LIST_END ; Beq
00001106                           275  
00001106  4EB9 00001750            276          Jsr     GET3TO5
0000110C                           277          
0000110C  B03C 0004                278          Cmp.B   #%100, D0
00001110  6700 000A                279          Beq     EA_MOVEM_PRE_DEC
00001114                           280          
00001114  4EF9 00001126            281          Jmp     EA_MOVEM_POST_INC
0000111A                           282          
0000111A                           283  EA_MOVEM_LIST_END
0000111A  4E75                     284          Rts
0000111C                           285          
0000111C                           286  EA_MOVEM_PRE_DEC
0000111C  E35D                     287          Rol.W   #1, D5
0000111E                           288          
0000111E  6500 0010                289          Bcs     EA_MOVEM_CARRY_SET
00001122                           290          
00001122  6400 002C                291          Bcc     EA_MOVEM_CARRY_CLEAR
00001126                           292          
00001126                           293  EA_MOVEM_POST_INC
00001126  E25D                     294          Ror.W   #1, D5
00001128                           295          
00001128  6500 0006                296          Bcs     EA_MOVEM_CARRY_SET
0000112C                           297          
0000112C  6400 0022                298          Bcc     EA_MOVEM_CARRY_CLEAR
00001130                           299          
00001130                           300  EA_MOVEM_CARRY_SET
00001130  B63C 0001                301          Cmp.B   #1, D3
00001134  6700 002A                302          Beq     EA_MOVEM_FIRST_REG
00001138                           303          
00001138  B43C 0000                304          Cmp.B   #0, D2
0000113C  6700 0032                305          Beq     EA_MOVEM_ADD_SINGLE_REG
00001140                           306          
00001140  5207                     307          Add.B   #1, D7
00001142  5202                     308          Add.B   #1, D2
00001144                           309          
00001144  BE3C 0010                310          Cmp.B   #16, D7
00001148  6700 0038                311          Beq     EA_MOVEM_LAST_REG
0000114C                           312          
0000114C  4EF8 10FE                313          Jmp     EA_MOVEM_LIST_LOOP
00001150                           314          
00001150                           315  EA_MOVEM_CARRY_CLEAR
00001150  B43C 0001                316          Cmp.B   #1, D2
00001154  6E00 003A                317          Bgt     EA_MOVEM_ADD_LAST_REG
00001158                           318          
00001158  5207                     319          Add.B   #1, D7
0000115A                           320          
0000115A  4282                     321          Clr.L   D2
0000115C                           322          
0000115C  4EF8 10FE                323          Jmp     EA_MOVEM_LIST_LOOP
00001160                           324  
00001160                           325  EA_MOVEM_FIRST_REG
00001160  4EB9 000011A4            326          Jsr     EA_MOVEM_REG
00001166                           327          
00001166  4283                     328          Clr.L   D3
00001168                           329          
00001168  5207                     330          Add.B   #1, D7
0000116A  5202                     331          Add.B   #1, D2
0000116C                           332          
0000116C  4EF8 10FE                333          Jmp     EA_MOVEM_LIST_LOOP
00001170                           334          
00001170                           335  EA_MOVEM_ADD_SINGLE_REG
00001170  1CFC 002F                336          Move.B  #'/', (A6)+
00001174                           337          
00001174  4EB9 000011A4            338          Jsr     EA_MOVEM_REG
0000117A                           339          
0000117A  5207                     340          Add.B   #1, D7
0000117C  5202                     341          Add.B   #1, D2
0000117E                           342          
0000117E  4EF8 10FE                343          Jmp     EA_MOVEM_LIST_LOOP
00001182                           344          
00001182                           345  EA_MOVEM_LAST_REG
00001182  B43C 0001                346          Cmp.B   #1, D2
00001186  6E00 0008                347          Bgt     EA_MOVEM_ADD_LAST_REG
0000118A                           348          
0000118A  5207                     349          Add.B   #1, D7
0000118C                           350          
0000118C  4EF8 10FE                351          Jmp     EA_MOVEM_LIST_LOOP
00001190                           352          
00001190                           353  EA_MOVEM_ADD_LAST_REG
00001190  1CFC 002D                354          Move.B  #'-', (A6)+
00001194                           355          
00001194  5307                     356          Sub.B   #1, D7
00001196                           357          
00001196  4EB9 000011A4            358          Jsr     EA_MOVEM_REG
0000119C                           359          
0000119C  5407                     360          Add.B   #2, D7
0000119E                           361          
0000119E  4282                     362          Clr.L   D2
000011A0                           363          
000011A0  4EF8 10FE                364          Jmp     EA_MOVEM_LIST_LOOP
000011A4                           365          
000011A4                           366  EA_MOVEM_REG
000011A4  4280                     367          Clr.L   D0
000011A6  BE3C 0000                368          Cmp.B   #0, D7
000011AA  6700 0310                369          Beq     EA_DN
000011AE                           370          
000011AE  103C 0001                371          Move.B  #1, D0
000011B2  BE3C 0001                372          Cmp.B   #1, D7
000011B6  6700 0304                373          Beq     EA_DN
000011BA                           374          
000011BA  103C 0002                375          Move.B  #2, D0
000011BE  BE3C 0002                376          Cmp.B   #2, D7
000011C2  6700 02F8                377          Beq     EA_DN
000011C6                           378  
000011C6  103C 0003                379          Move.B  #3, D0
000011CA  BE3C 0003                380          Cmp.B   #3, D7
000011CE  6700 02EC                381          Beq     EA_DN
000011D2                           382  
000011D2  103C 0004                383          Move.B  #4, D0
000011D6  BE3C 0004                384          Cmp.B   #4, D7
000011DA  6700 02E0                385          Beq     EA_DN
000011DE                           386  
000011DE  103C 0005                387          Move.B  #5, D0
000011E2  BE3C 0005                388          Cmp.B   #5, D7
000011E6  6700 02D4                389          Beq     EA_DN
000011EA                           390  
000011EA  103C 0006                391          Move.B  #6, D0
000011EE  BE3C 0006                392          Cmp.B   #6, D7
000011F2  6700 02C8                393          Beq     EA_DN
000011F6                           394          
000011F6  103C 0007                395          Move.B  #7, D0
000011FA  BE3C 0007                396          Cmp.B   #7, D7
000011FE  6700 02BC                397          Beq     EA_DN
00001202                           398          
00001202  4280                     399          Clr.L   D0
00001204  BE3C 0008                400          Cmp.B   #8, D7
00001208  6700 02BE                401          Beq     EA_AN
0000120C                           402  
0000120C  103C 0001                403          Move.B  #1, D0
00001210  BE3C 0009                404          Cmp.B   #9, D7
00001214  6700 02B2                405          Beq     EA_AN
00001218                           406  
00001218  103C 0002                407          Move.B  #2, D0
0000121C  BE3C 000A                408          Cmp.B   #10, D7
00001220  6700 02A6                409          Beq     EA_AN
00001224                           410          
00001224  103C 0003                411          Move.B  #3, D0
00001228  BE3C 000B                412          Cmp.B   #11, D7
0000122C  6700 029A                413          Beq     EA_AN
00001230                           414          
00001230  103C 0004                415          Move.B  #4, D0
00001234  BE3C 000C                416          Cmp.B   #12, D7
00001238  6700 028E                417          Beq     EA_AN
0000123C                           418          
0000123C  103C 0005                419          Move.B  #5, D0
00001240  BE3C 000D                420          Cmp.B   #13, D7
00001244  6700 0282                421          Beq     EA_AN
00001248                           422          
00001248  103C 0006                423          Move.B  #6, D0
0000124C  BE3C 000E                424          Cmp.B   #14, D7
00001250  6700 0276                425          Beq     EA_AN
00001254                           426          
00001254  103C 0007                427          Move.B  #7, D0
00001258  BE3C 000F                428          Cmp.B   #15, D7
0000125C  6700 026A                429          Beq     EA_AN
00001260                           430  
00001260                           431  ;===========================================;        
00001260                           432  ;--------------- EA Add/AddA ---------------;
00001260                           433  ;===========================================;       
00001260                           434  EA_ADD  ; Figures out the EA for Add        
00001260  4EB9 0000173E            435          Jsr     GET6TO8                 ; Isolate the Op mode
00001266                           436          
00001266  B03C 0003                437          Cmp.B   #%011, D0               ; Compare to AddA word
0000126A  6700 0028                438          Beq     EA_ADDA
0000126E                           439          
0000126E  B03C 0007                440          Cmp.B   #%111, D0               ; Compare to AddA long
00001272  6700 0020                441          Beq     EA_ADDA
00001276                           442  
00001276  B03C 0000                443          Cmp.B   #%000, D0               ; Compare to Add source byte
0000127A  6700 002E                444          Beq     EA_ADD_OPMODE_SOURCE
0000127E                           445          
0000127E  B03C 0001                446          Cmp.B   #%001, D0               ; Compare to Add source word
00001282  6700 0026                447          Beq     EA_ADD_OPMODE_SOURCE
00001286                           448          
00001286  B03C 0002                449          Cmp.B   #%010, D0               ; Compare to Add source Long
0000128A  6700 001E                450          Beq     EA_ADD_OPMODE_SOURCE
0000128E                           451          
0000128E  4EF9 000012C0            452          Jmp     EA_ADD_OPMODE_DEST      ; Must be an Add destination if none of the above
00001294                           453          
00001294                           454  EA_ADDA ; Figures out the EA for AddA
00001294  4EB9 000012D6            455          Jsr     EA_ADD_ADDRESS          ; Get the source EA
0000129A  1CFC 002C                456          Move.B  #',', (A6)+             ; Add a comma
0000129E  4EB9 0000172C            457          Jsr     GET9TO11                ; Get the register
000012A4  4EB9 000014C8            458          Jsr     EA_AN                   ; Add An
000012AA                           459          
000012AA                           460          ; <Next instruction>
000012AA                           461          
000012AA                           462  EA_ADD_OPMODE_SOURCE    ; Finds the EA for Add if it is for the source
000012AA  4EB9 000012D6            463          Jsr     EA_ADD_ADDRESS          ; Get the source EA
000012B0  1CFC 002C                464          Move.B  #',', (A6)+             ; Add a comma
000012B4  4EB9 0000172C            465          Jsr     GET9TO11                ; Get the register
000012BA  4EB9 000014BC            466          Jsr     EA_DN                   ; Add Dn
000012C0                           467          
000012C0                           468          ; <Next instruction>
000012C0                           469          
000012C0                           470  EA_ADD_OPMODE_DEST      ; Finds the EA for Add if it is for the destination
000012C0  4EB9 0000172C            471          Jsr     GET9TO11                ; Get the register
000012C6  4EB9 000014BC            472          Jsr     EA_DN                   ; Add Dn
000012CC  1CFC 002C                473          Move.B  #',', (A6)+             ; Add a comma
000012D0  4EB9 000012D6            474          Jsr     EA_ADD_ADDRESS          ; Get the destination EA 
000012D6                           475          
000012D6                           476          ; <Next instruction>
000012D6                           477          
000012D6                           478  EA_ADD_ADDRESS
000012D6  4EB9 000016C6            479          Jsr     EA_0TO5                 ; Check for all EA except #<data>
000012DC                           480          
000012DC  B03C 0004                481          Cmp.B   #Imm_Reg, D0            ; #<data>
000012E0  6700 0004                482          Beq     EA_ADD_SIZE
000012E4                           483  
000012E4  4E75                     484          Rts
000012E6                           485          
000012E6                           486  EA_ADD_SIZE ; Find the size of immediate data being moved
000012E6  4EB9 0000173E            487          Jsr     GET6TO8                 ; Get Move size
000012EC                           488  
000012EC  B03C 0000                489          Cmp.B   #%000, D0               ; Byte
000012F0  6700 03A4                490          Beq     EA_IMM_BYTE
000012F4                           491  
000012F4  B03C 0001                492          Cmp.B   #%001, D0               ; Word
000012F8  6700 03AC                493          Beq     EA_IMM_WORD
000012FC                           494          
000012FC  B03C 0002                495          Cmp.B   #%010, D0               ; Long
00001300  6700 03B4                496          Beq     EA_IMM_LONG
00001304                           497          
00001304  B03C 0003                498          Cmp.B   #%011, D0               ; AddA Word
00001308  6700 039C                499          Beq     EA_IMM_WORD
0000130C                           500     
0000130C  B03C 0007                501          Cmp.B   #%111, D0               ; AddA Long
00001310  6700 03A4                502          Beq     EA_IMM_LONG
00001314                           503          
00001314  4E75                     504          Rts
00001316                           505          
00001316                           506  ;=================================================;        
00001316                           507  ;-------------------- EA AddQ --------------------;
00001316                           508  ;=================================================;
00001316                           509  EA_ADDQ ; Figures out the EA for AddQ
00001316  4EB9 00001326            510          Jsr     EA_ADDQ_CHECK_8         ; Get the immediate value
0000131C  1CFC 002C                511          Move.B  #',', (A6)+             ; Add a comma
00001320  4EB9 0000134A            512          Jsr     EA_ADDQ_DEST            ; Add the destination
00001326                           513  
00001326                           514  EA_ADDQ_CHECK_8 ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001326  4EB9 0000172C            515          Jsr     GET9TO11                ; Isolate the count/register bits
0000132C                           516          
0000132C  B03C 0000                517          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
00001330  6E00 000C                518          Bgt     EA_ADDQ_IMMEDIATE
00001334                           519          
00001334  103C 0008                520          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001338                           521          
00001338  4EF9 0000133E            522          Jmp     EA_ADDQ_IMMEDIATE
0000133E                           523          
0000133E                           524  EA_ADDQ_IMMEDIATE   ; Adds an immediate value before the comma
0000133E  1CFC 0023                525          Move.B  #'#', (A6)+
00001342  0600 0030                526          Add.B   #$30, D0
00001346  1CC0                     527          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001348                           528          
00001348  4E75                     529          Rts
0000134A                           530          
0000134A                           531  EA_ADDQ_DEST    ; Determines the destination       
0000134A  4EB9 000016C6            532          Jsr     EA_0TO5                 ; Check for all EA except #<data>
00001350                           533          
00001350                           534  ;=========================================================;        
00001350                           535  ;---------------------- EA Sub/SubA ----------------------;
00001350                           536  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001350                           537  ; Sub/SubA are exactly the same.
00001350                           538  ;=========================================================;
00001350                           539  EA_SUB
00001350  4EF8 1260                540          Jmp     EA_ADD
00001354                           541  
00001354                           542  ;=========================================================;        
00001354                           543  ;---------------------- EA Cmp/CmpA ----------------------;
00001354                           544  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001354                           545  ; Cmp/CmpA are exactly the same.
00001354                           546  ;=========================================================;
00001354                           547  EA_CMP       
00001354  4EF8 1260                548          Jmp     EA_ADD
00001358                           549          
00001358                           550  ;=========================================================;        
00001358                           551  ;------------------------ EA Lea -------------------------;
00001358                           552  ; Jumps straight to EA_ADD because the EA for AddA and Lea
00001358                           553  ; are exactly the same.
00001358                           554  ;=========================================================;
00001358                           555  EA_LEA
00001358  4EF8 1260                556          Jmp     EA_ADD
0000135C                           557          
0000135C                           558  ;=========================================================;        
0000135C                           559  ;------------------------ EA And -------------------------;
0000135C                           560  ; Jumps straight to EA_ADD because the EA for Add and And
0000135C                           561  ; are exactly the same.
0000135C                           562  ;=========================================================;
0000135C                           563  EA_AND
0000135C  4EF8 1260                564          Jmp     EA_ADD
00001360                           565          
00001360                           566  ;=========================================================;        
00001360                           567  ;------------------------ EA Eor -------------------------;
00001360                           568  ; Jumps straight to EA_ADD because the EA for Add and Eor
00001360                           569  ; are exactly the same.
00001360                           570  ;=========================================================;
00001360                           571  EA_EOR
00001360  4EF8 1260                572          Jmp     EA_ADD
00001364                           573          
00001364                           574  ;=========================================================;        
00001364                           575  ;------------------------ EA Neg -------------------------;
00001364                           576  ;=========================================================;
00001364                           577  EA_NEG
00001364  4EB9 000016C6            578          Jsr     EA_0TO5                 ; Check for all EA except #<data>
0000136A                           579          
0000136A                           580          ; <Next instruction>
0000136A                           581          
0000136A                           582  ;=========================================================;        
0000136A                           583  ;------------------------ EA Not -------------------------;
0000136A                           584  ; Jumps straight to EA_NEG because Neg and Not have the
0000136A                           585  ; exact same EAs. 
0000136A                           586  ;=========================================================;
0000136A                           587  EA_NOT
0000136A  4EF8 1364                588          Jmp     EA_NEG 
0000136E                           589          
0000136E                           590  ;=========================================================;        
0000136E                           591  ;------------------------ EA Jsr -------------------------;
0000136E                           592  ; Jumps straight to EA_NEG because Neg and Jsr have the
0000136E                           593  ; exact same EAs. 
0000136E                           594  ;=========================================================;
0000136E                           595  EA_Jsr
0000136E  4EF8 1364                596          Jmp     EA_NEG 
00001372                           597  
00001372                           598  ;=========================================================;
00001372                           599  ;--------------------- EA Bit Shift ----------------------;
00001372                           600  ; Finds the EA for ASd, LSd, ROd. All of these OP codes
00001372                           601  ; are combined because the EA for each code is exactly the
00001372                           602  ; same.
00001372                           603  ;=========================================================;
00001372                           604  EA_BIT_SHIFT    ; Figures out the EA for bit shift functions
00001372  4EB9 00001786            605          Jsr     GET6TO7
00001378                           606          
00001378  B03C 0003                607          Cmp.B   #%11, D0                ; If bits 6 and 7 are not %11, then we are shifting a register
0000137C  6600 000E                608          Bne     EA_SHIFT_REGISTER
00001380                           609          
00001380  4EB9 00001386            610          Jsr     EA_SHIFT_MEMORY         ; If bits 6 and 7 are %11, then we are shifting memory
00001386                           611          
00001386                           612          ; <Next instruction>
00001386                           613                  
00001386                           614  EA_SHIFT_MEMORY ; Adds the correct EA for a memory shift
00001386  4EB9 000016C6            615          Jsr     EA_0TO5                 ; Check for all EA except #<data>
0000138C                           616          
0000138C                           617  EA_SHIFT_REGISTER   ; Figure out if we are shifting by #<data> or by the value in a data register
0000138C  4EB9 00001798            618          Jsr     GETBIT5
00001392                           619          
00001392  B03C 0000                620          Cmp.B   #0, D0                  ; Check if bit 5 is %0
00001396  6700 0008                621          Beq     EA_SHIFT_CHECK_8
0000139A                           622          
0000139A  4EF9 000013C8            623          Jmp     EA_SHIFT_DN             ; If it's not, we are shifting from a data register
000013A0                           624          
000013A0                           625  EA_SHIFT_CHECK_8    ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
000013A0  4EB9 0000172C            626          Jsr     GET9TO11                ; Isolate the count/register bits
000013A6                           627          
000013A6  B03C 0000                628          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
000013AA  6E00 000C                629          Bgt     EA_SHIFT_IMMEDIATE
000013AE                           630          
000013AE  103C 0008                631          Move.B  #8, D0                  ; Else, use 8 as the immediate value
000013B2                           632                  
000013B2  4EF9 000013B8            633          Jmp     EA_SHIFT_IMMEDIATE
000013B8                           634          
000013B8                           635  EA_SHIFT_IMMEDIATE  ; Adds an immediate value before the comma
000013B8  1CFC 0023                636          Move.B  #'#', (A6)+
000013BC  0600 0030                637          Add.B   #$30, D0
000013C0  1CC0                     638          Move.B  D0, (A6)+               ; Add the immediate value to the string
000013C2                           639  
000013C2  4EF9 000013DA            640          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it
000013C8                           641          
000013C8                           642  EA_SHIFT_DN ; Adds a data register before the comma
000013C8  4EB9 0000172C            643          Jsr     GET9TO11                ; Isolate the data register bits
000013CE                           644          
000013CE  4EB9 000014BC            645          Jsr     EA_DN                   ; Add the data register to the string
000013D4                           646          
000013D4  4EF9 000013DA            647          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it 
000013DA                           648          
000013DA                           649  EA_SHIFT_COMMA  ; Adds the comma and everything after it to the string
000013DA  1CFC 002C                650          Move.B  #',', (A6)+
000013DE                           651          
000013DE  4EB9 00001762            652          Jsr     GET0TO2                 ; Get the register number
000013E4                           653          
000013E4  4EB9 000014BC            654          Jsr     EA_DN                   ; Add the register
000013EA                           655          
000013EA                           656          ; <Next instruction>
000013EA                           657  
000013EA                           658  ;============================================;        
000013EA                           659  ;--------------- EA Immediate ---------------;
000013EA                           660  ; Provides EA for SubI, OrI, EorI, and CmpI.
000013EA                           661  ;============================================;
000013EA                           662  EA_IMMEDIATE    ; Figures out the EA for immediate data OP codes
000013EA  4EB9 000013FA            663          Jsr     EA_IMMEDIATE_SIZE       ; Get the size of the immediate data and add to string
000013F0  1CFC 002C                664          Move.B  #',', (A6)+             ; Add a comma
000013F4  4EB9 0000141A            665          Jsr     EA_IMMEDIATE_DEST       ; Add the destination EA
000013FA                           666          
000013FA                           667          ; <Next instruction>
000013FA                           668          
000013FA                           669  EA_IMMEDIATE_SIZE   ; Determines the size of the immediate data and adds it
000013FA  4EB9 00001786            670          Jsr     GET6TO7                 ; Isolate the size bits
00001400                           671                  
00001400  B03C 0001                672          Cmp.B   #%01, D0                ; Immediate word
00001404  6700 02A0                673          Beq     EA_IMM_WORD
00001408                           674          
00001408  B03C 0002                675          Cmp.B   #%10, D0                ; Immediate long
0000140C  6700 02A8                676          Beq     EA_IMM_LONG
00001410                           677          
00001410  524B                     678          AddA.W  #1, A3                  ; Else, move the pointer forward by a byte to get the next byte
00001412  4EF9 00001696            679          Jmp     EA_IMM_BYTE
00001418                           680  
00001418  4E75                     681          Rts
0000141A                           682          
0000141A                           683  EA_IMMEDIATE_DEST   ; Determines the destination EA
0000141A  4EB9 000016C6            684          Jsr     EA_0TO5                 ; Check for all EA except #<data>
00001420                           685        
00001420                           686  ;=================================================;  
00001420                           687  ;-------------------- EA Muls --------------------;
00001420                           688  ;=================================================;
00001420                           689  EA_MULS ; Determines the EA for Muls
00001420  4EB9 00001436            690          Jsr     EA_MULS_ADDRESS         ; Get the EA
00001426  1CFC 002C                691          Move.B  #',', (A6)+             ; Add a comma
0000142A  4EB9 0000172C            692          Jsr     GET9TO11                ; Get the register
00001430  4EB9 000014BC            693          Jsr     EA_DN                   ; Add Dn
00001436                           694          
00001436                           695          ; <Next instruction>
00001436                           696          
00001436                           697  EA_MULS_ADDRESS ; Determines the EA
00001436  4EB9 000016C6            698          Jsr     EA_0TO5                 ; Check for all EA except #<data>
0000143C                           699          
0000143C  B03C 0004                700          Cmp.B   #Imm_Reg, D0            ; Check for #<data>
00001440  6700 0264                701          Beq     EA_IMM_WORD
00001444                           702          
00001444  4E75                     703          Rts
00001446                           704          
00001446                           705  ;=================================================;  
00001446                           706  ;-------------------- EA DIVS --------------------;
00001446                           707  ; Jumps straight to EA_DIVS because the EA for
00001446                           708  ; both OP codes is exactly the same.
00001446                           709  ;=================================================;
00001446                           710  EA_DIVS
00001446  4EF8 1420                711          Jmp     EA_MULS
0000144A                           712          
0000144A                           713  ;=================================================;        
0000144A                           714  ;-------------------- EA BTST --------------------;
0000144A                           715  ;=================================================;
0000144A                           716  EA_BTST ; Determines the EA for Btst
0000144A  4EB9 00001774            717          Jsr     GETBIT8                 ; Use bit 8 to determine if the bit number is immediate or a data register
00001450                           718          
00001450  B03C 0001                719          Cmp.B   #%1, D0                 ; 1 is a data register
00001454  6700 0008                720          Beq     EA_BTST_DN
00001458                           721          
00001458  4EF9 00001470            722          Jmp     EA_BTST_IMM             ; Else (0), the bit number is immediate data
0000145E                           723          
0000145E                           724  EA_BTST_DN  ; Gets the register for the bit number
0000145E  4EB9 0000172C            725          Jsr     GET9TO11                ; Get the register
00001464  4EB9 000014BC            726          Jsr     EA_DN                   ; Add the register to the string
0000146A                           727          
0000146A  4EB9 0000147E            728          Jsr     EA_BTST_ADDRESS         ; Add the EA
00001470                           729          
00001470                           730          ; <Next instruction>
00001470                           731  
00001470                           732  EA_BTST_IMM ; Gets the immediate data for the bit number
00001470  524B                     733          AddA.W  #1, A3                  ; Move the pointer forward by a byte to get the next byte
00001472  4EB9 00001696            734          Jsr     EA_IMM_BYTE             ; Add the bit number as an immediate hex byte
00001478                           735          
00001478  4EB9 0000147E            736          Jsr     EA_BTST_ADDRESS         ; Add the register to the string
0000147E                           737          
0000147E                           738          ; <Next instruction>
0000147E                           739  
0000147E                           740  EA_BTST_ADDRESS ; Get the EA
0000147E  1CFC 002C                741          Move.B  #',', (A6)+
00001482                           742  
00001482  4EB9 000016C6            743          Jsr     EA_0TO5                 ; Check the EA for everything but #<data>
00001488                           744          
00001488  B03C 0004                745          Cmp.B   #Imm_Reg, D0            ; Check if the EA is #<data>
0000148C  6700 0208                746          Beq     EA_IMM_BYTE             ; Add immediate byte for EA
00001490                           747          
00001490  4E75                     748          Rts
00001492                           749          
00001492                           750  ;==================================================;        
00001492                           751  ;------------------- EA Branch --------------------;
00001492                           752  ; Determines the EA for Bra, Beq, Bne, Blt, and Bhi.
00001492                           753  ;==================================================;
00001492                           754  EA_BRANCH  ; Determines the EA for Branch codes
00001492  4EB9 000017AA            755          Jsr     GET0TO7                 ; Get the 8 displacement bits
00001498                           756          
00001498  2C0B                     757          Move.L  A3, D6                  ; Move address after the Bra word to D6
0000149A                           758          
0000149A  B03C 0000                759          Cmp.B   #0, D0                  ; If the displacement bits are 0 then get the next word
0000149E  6700 0008                760          Beq     EA_BRANCH_16_BIT
000014A2                           761          
000014A2  4EF9 000014B0            762          Jmp     EA_BRANCH_ADD_DIS       ; Else, add the displacement to D6
000014A8                           763  
000014A8                           764  EA_BRANCH_16_BIT   ; Gets the next word
000014A8  301B                     765          Move.W  (A3)+, D0               ; Stores the word in D0
000014AA                           766  
000014AA  4EF9 000014B0            767          Jmp     EA_BRANCH_ADD_DIS       ; Add the word to D6
000014B0                           768          
000014B0                           769  EA_BRANCH_ADD_DIS   ; Adds the displacement to the long word address in D6
000014B0  DC80                     770          Add.L   D0, D6                  ; Add the displacement to D6
000014B2                           771      
000014B2  1CFC 0024                772          Move.B  #'$', (A6)+             ; Add '$' to the string
000014B6                           773          
000014B6  4EB9 000015C2            774          Jsr     EA_LONG_TO_STRING       ; Add the long word sum to the string
000014BC                           775  
000014BC                           776          ; <Next instruction>
000014BC                           777                         
000014BC                           778  ;==========================================;        
000014BC                           779  ;---------- General EA functions ----------;
000014BC                           780  ;==========================================;
000014BC                           781  EA_DN   ; Adds Dn EA to string
000014BC  1CFC 0044                782          Move.B  #'D', (A6)+             
000014C0  0600 0030                783          Add.B   #$30, D0        
000014C4  1CC0                     784          Move.B  D0, (A6)+               
000014C6                           785                  
000014C6  4E75                     786          Rts
000014C8                           787  
000014C8                           788  EA_AN   ; Adds An EA to string
000014C8  1CFC 0041                789          Move.B  #'A', (A6)+
000014CC  0600 0030                790          Add.B   #$30, D0    
000014D0  1CC0                     791          Move.B  D0, (A6)+               
000014D2                           792                  
000014D2  4E75                     793          Rts
000014D4                           794  
000014D4                           795  EA_AN_PNTR  ; Adds (An) EA to string
000014D4  1CFC 0028                796          Move.B  #'(', (A6)+
000014D8  1CFC 0041                797          Move.B  #'A', (A6)+
000014DC  0600 0030                798          Add.B   #$30, D0
000014E0  1CC0                     799          Move.B  D0, (A6)+
000014E2  1CFC 0029                800          Move.B  #')', (A6)+
000014E6                           801                  
000014E6  4E75                     802          Rts
000014E8                           803          
000014E8                           804  EA_AN_INC   ; Adds (An)+ EA to string
000014E8  1CFC 0028                805          Move.B  #'(', (A6)+
000014EC  1CFC 0041                806          Move.B  #'A', (A6)+
000014F0  0600 0030                807          Add.B   #$30, D0
000014F4  1CC0                     808          Move.B  D0, (A6)+
000014F6  1CFC 0029                809          Move.B  #')', (A6)+
000014FA  1CFC 002B                810          Move.B  #'+', (A6)+
000014FE                           811                  
000014FE  4E75                     812          Rts 
00001500                           813          
00001500                           814  EA_AN_DEC   ; Adds -(An) EA to string
00001500  1CFC 002D                815          Move.B  #'-', (A6)+
00001504  1CFC 0028                816          Move.B  #'(', (A6)+
00001508  1CFC 0041                817          Move.B  #'A', (A6)+
0000150C  0600 0030                818          Add.B   #$30, D0
00001510  1CC0                     819          Move.B  D0, (A6)+
00001512  1CFC 0029                820          Move.B  #')', (A6)+
00001516                           821                  
00001516  4E75                     822          Rts 
00001518                           823  
00001518                           824  EA_WORD_ADDR    ; Adds $Word to string
00001518  3C1B                     825          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
0000151A                           826          
0000151A  1CFC 0024                827          Move.B  #'$', (A6)+
0000151E                           828          
0000151E  BC7C 8000                829          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001522  6E00 000C                830          Bgt     EA_SIGN_EXT_16
00001526                           831          
00001526  BC7C 8000                832          Cmp.W   #$8000, D6          ; Word address is greater than 8000
0000152A  6F00 001C                833          Ble     EA_SIGN_EXT_32
0000152E                           834          
0000152E  4E75                     835          Rts
00001530                           836                  
00001530                           837  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
00001530  1CFC 0030                838          Move.B  #'0', (A6)+
00001534  1CFC 0030                839          Move.B  #'0', (A6)+
00001538  1CFC 0030                840          Move.B  #'0', (A6)+
0000153C  1CFC 0030                841          Move.B  #'0', (A6)+
00001540                           842          
00001540  4EB9 00001560            843          Jsr     EA_WORD_TO_STRING       
00001546                           844          
00001546  4E75                     845          Rts
00001548                           846  
00001548                           847  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
00001548  1CFC 0046                848          Move.B  #'F', (A6)+
0000154C  1CFC 0046                849          Move.B  #'F', (A6)+
00001550  1CFC 0046                850          Move.B  #'F', (A6)+
00001554  1CFC 0046                851          Move.B  #'F', (A6)+
00001558                           852          
00001558  4EB9 00001560            853          Jsr     EA_WORD_TO_STRING   
0000155E                           854          
0000155E  4E75                     855          Rts
00001560                           856          
00001560                           857  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
00001560  4280                     858          Clr.L   D0              ; Clear D0
00001562  3006                     859          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
00001564                           860  
00001564  123C 000C                861          Move.B  #12, D1         ; Grab bits 12 to 15
00001568  E268                     862          Lsr     D1, D0
0000156A  0600 0030                863          Add.B   #$30, D0
0000156E  1CC0                     864          Move.B  D0, (A6)+
00001570                           865          
00001570  4280                     866          Clr.L   D0
00001572  3006                     867          Move.W  D6, D0
00001574                           868          
00001574  123C 0004                869          Move.B  #4, D1          ; Grab bits 8 to 11
00001578  E368                     870          Lsl     D1, D0
0000157A  123C 000C                871          Move.B  #12, D1
0000157E  E268                     872          Lsr     D1, D0  
00001580  0600 0030                873          Add.B   #$30, D0
00001584  1CC0                     874          Move.B  D0, (A6)+
00001586                           875          
00001586  4280                     876          Clr.L   D0
00001588  3006                     877          Move.W  D6, D0
0000158A                           878          
0000158A  123C 0008                879          Move.B  #8, D1          ; Grab bits 4 to 7
0000158E  E368                     880          Lsl     D1, D0
00001590  123C 000C                881          Move.B  #12, D1
00001594  E268                     882          Lsr     D1, D0
00001596  0600 0030                883          Add.B   #$30, D0
0000159A  1CC0                     884          Move.B  D0, (A6)+
0000159C                           885          
0000159C  4280                     886          Clr.L   D0
0000159E  3006                     887          Move.W  D6, D0
000015A0                           888          
000015A0  123C 000C                889          Move.B  #12, D1         ; Grab bits 0 to 3
000015A4  E368                     890          Lsl     D1, D0
000015A6  123C 000C                891          Move.B  #12, D1
000015AA  E268                     892          Lsr     D1, D0
000015AC  0600 0030                893          Add.B   #$30, D0
000015B0  1CC0                     894          Move.B  D0, (A6)+
000015B2                           895          
000015B2  4E75                     896          Rts
000015B4                           897          
000015B4                           898  EA_LONG_ADDR    ; Adds $Long to string
000015B4  2C1B                     899          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000015B6                           900          
000015B6  1CFC 0024                901          Move.B  #'$', (A6)+
000015BA                           902          
000015BA  4EB9 000015C2            903          Jsr     EA_LONG_TO_STRING
000015C0                           904  
000015C0  4E75                     905          Rts
000015C2                           906                  
000015C2                           907  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
000015C2  4280                     908          Clr.L   D0              ; Clear D0
000015C4  2006                     909          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
000015C6                           910  
000015C6  123C 001C                911          Move.B  #28, D1         ; Grab bits 28 to 31
000015CA  E2A8                     912          Lsr.L   D1, D0
000015CC  0600 0030                913          Add.B   #$30, D0
000015D0  1CC0                     914          Move.B  D0, (A6)+
000015D2                           915          
000015D2  4280                     916          Clr.L   D0             
000015D4  2006                     917          Move.L  D6, D0          
000015D6                           918          
000015D6  123C 0004                919          Move.B  #4, D1          ; Grab bits 24 to 27
000015DA  E3A8                     920          Lsl.L   D1, D0
000015DC  123C 001C                921          Move.B  #28, D1
000015E0  E2A8                     922          Lsr.L   D1, D0
000015E2  0600 0030                923          Add.B   #$30, D0
000015E6  1CC0                     924          Move.B  D0, (A6)+
000015E8                           925          
000015E8  4280                     926          Clr.L   D0             
000015EA  2006                     927          Move.L  D6, D0
000015EC                           928  
000015EC  123C 0008                929          Move.B  #8, D1          ; Grab bits 20 to 23
000015F0  E3A8                     930          Lsl.L   D1, D0
000015F2  123C 001C                931          Move.B  #28, D1
000015F6  E2A8                     932          Lsr.L   D1, D0
000015F8  0600 0030                933          Add.B   #$30, D0
000015FC  1CC0                     934          Move.B  D0, (A6)+
000015FE                           935          
000015FE  4280                     936          Clr.L   D0             
00001600  2006                     937          Move.L  D6, D0
00001602                           938  
00001602  123C 000C                939          Move.B  #12, D1         ; Grab bits 16 to 19
00001606  E3A8                     940          Lsl.L   D1, D0
00001608  123C 001C                941          Move.B  #28, D1
0000160C  E2A8                     942          Lsr.L   D1, D0
0000160E  0600 0030                943          Add.B   #$30, D0
00001612  1CC0                     944          Move.B  D0, (A6)+
00001614                           945          
00001614  4280                     946          Clr.L   D0             
00001616  2006                     947          Move.L  D6, D0
00001618                           948  
00001618  123C 0010                949          Move.B  #16, D1         ; Grab bits 12 to 15
0000161C  E3A8                     950          Lsl.L   D1, D0
0000161E  123C 001C                951          Move.B  #28, D1
00001622  E2A8                     952          Lsr.L   D1, D0
00001624  0600 0030                953          Add.B   #$30, D0
00001628  1CC0                     954          Move.B  D0, (A6)+
0000162A                           955          
0000162A  4280                     956          Clr.L   D0             
0000162C  2006                     957          Move.L  D6, D0
0000162E                           958          
0000162E  123C 0014                959          Move.B  #20, D1         ; Grab bits 8 to 11
00001632  E3A8                     960          Lsl.L   D1, D0
00001634  123C 001C                961          Move.B  #28, D1
00001638  E2A8                     962          Lsr.L   D1, D0
0000163A  0600 0030                963          Add.B   #$30, D0
0000163E  1CC0                     964          Move.B  D0, (A6)+
00001640                           965          
00001640  4280                     966          Clr.L   D0             
00001642  2006                     967          Move.L  D6, D0
00001644                           968  
00001644  123C 0018                969          Move.B  #24, D1         ; Grab bits 4 to 7
00001648  E3A8                     970          Lsl.L   D1, D0
0000164A  123C 001C                971          Move.B  #28, D1
0000164E  E2A8                     972          Lsr.L   D1, D0
00001650  0600 0030                973          Add.B   #$30, D0
00001654  1CC0                     974          Move.B  D0, (A6)+
00001656                           975          
00001656  4280                     976          Clr.L   D0             
00001658  2006                     977          Move.L  D6, D0
0000165A                           978  
0000165A  123C 001C                979          Move.B  #28, D1         ; Grab bits 0 to 3
0000165E  E3A8                     980          Lsl.L   D1, D0
00001660  123C 001C                981          Move.B  #28, D1
00001664  E2A8                     982          Lsr.L   D1, D0
00001666  0600 0030                983          Add.B   #$30, D0
0000166A  1CC0                     984          Move.B  D0, (A6)+
0000166C                           985          
0000166C  4E75                     986          Rts
0000166E                           987          
0000166E                           988  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
0000166E  4280                     989          Clr.L   D0              ; Clear D0
00001670  2006                     990          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
00001672                           991  
00001672  123C 0004                992          Move.B  #4, D1          ; Grab bits 4 to 7
00001676  E228                     993          Lsr.B   D1, D0
00001678  0600 0030                994          Add.B   #$30, D0
0000167C  1CC0                     995          Move.B  D0, (A6)+
0000167E                           996          
0000167E  4280                     997          Clr.L   D0             
00001680  2006                     998          Move.L  D6, D0          
00001682                           999          
00001682  123C 0004               1000          Move.B  #4, D1          ; Grab bits 0 to 3
00001686  E328                    1001          Lsl.B   D1, D0
00001688  123C 0004               1002          Move.B  #4, D1
0000168C  E228                    1003          Lsr.B   D1, D0
0000168E  0600 0030               1004          Add.B   #$30, D0
00001692  1CC0                    1005          Move.B  D0, (A6)+
00001694                          1006          
00001694  4E75                    1007          Rts
00001696                          1008  
00001696                          1009  EA_IMM_BYTE ; Finds the immediate byte data
00001696  1C1B                    1010          Move.B  (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
00001698                          1011          
00001698  1CFC 0023               1012          Move.B  #'#', (A6)+         
0000169C  1CFC 0024               1013          Move.B  #'$', (A6)+         
000016A0                          1014          
000016A0  4EB8 166E               1015          Jsr     EA_BYTE_TO_STRING    ; Add the byte to the string
000016A4                          1016          
000016A4  4E75                    1017          Rts
000016A6                          1018                  
000016A6                          1019  EA_IMM_WORD ; Finds the immediate word data
000016A6  3C1B                    1020          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
000016A8                          1021          
000016A8  1CFC 0023               1022          Move.B  #'#', (A6)+         
000016AC  1CFC 0024               1023          Move.B  #'$', (A6)+         
000016B0                          1024          
000016B0  4EB8 1560               1025          Jsr     EA_WORD_TO_STRING    ; Add the word to the string
000016B4                          1026          
000016B4  4E75                    1027          Rts
000016B6                          1028          
000016B6                          1029  EA_IMM_LONG ; Finds the immediate long data
000016B6  2C1B                    1030          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
000016B8                          1031          
000016B8  1CFC 0023               1032          Move.B  #'#', (A6)+
000016BC  1CFC 0024               1033          Move.B  #'$', (A6)+
000016C0                          1034          
000016C0  4EB8 15C2               1035          Jsr     EA_LONG_TO_STRING    ; Add the long to the string
000016C4                          1036          
000016C4  4E75                    1037          Rts
000016C6                          1038          
000016C6                          1039  EA_0TO5 ; Determines the EA for an EA in bits 0-5. DOES NOT HANDLE IMMEDIATE VALUES.
000016C6  4EB9 00001750           1040          Jsr     GET3TO5                 ; Get source mode
000016CC  1A00                    1041          Move.B  D0, D5                  ; Move source mode to D5
000016CE  4EB9 00001762           1042          Jsr     Get0TO2                 ; Get source register
000016D4                          1043          
000016D4                          1044          ; List of valid effective addresses
000016D4  BA3C 0000               1045          Cmp.B   #Dn_Mode, D5            ; Dn
000016D8  6700 FDE2               1046          Beq     EA_DN
000016DC                          1047          
000016DC  BA3C 0001               1048          Cmp.B   #An_Mode, D5            ; An
000016E0  6700 FDE6               1049          Beq     EA_AN
000016E4                          1050          
000016E4  BA3C 0002               1051          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000016E8  6700 FDEA               1052          Beq     EA_AN_PNTR
000016EC                          1053          
000016EC  BA3C 0003               1054          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000016F0  6700 FDF6               1055          Beq     EA_AN_INC
000016F4                          1056          
000016F4  BA3C 0004               1057          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000016F8  6700 FE06               1058          Beq     EA_AN_DEC
000016FC                          1059          
000016FC                          1060          ; Comparing registers at this point because modes are the same
000016FC  B03C 0000               1061          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001700  6700 FE16               1062          Beq     EA_WORD_ADDR
00001704                          1063          
00001704  B03C 0001               1064          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001708  6700 FEAA               1065          Beq     EA_LONG_ADDR
0000170C                          1066          
0000170C  4E75                    1067          Rts
0000170E                          1068          
0000170E                          1069  ;===========================================================;       
0000170E                          1070  ;---------------- Bit Chopping Sub Routines ----------------;
0000170E                          1071  ; These Sub Routines Chop a WORD size piece of data from
0000170E                          1072  ; Data register 4 into a smaller piece, leaving just the
0000170E                          1073  ; Piece in register 0 while leaving the original piece
0000170E                          1074  ; of data intact.
0000170E                          1075  ;===========================================================;
0000170E                          1076  GET12TO15
0000170E  4280                    1077          CLR.L   D0
00001710  3004                    1078          Move.W  D4, D0
00001712                          1079                  
00001712  123C 000C               1080          Move.B  #12, D1
00001716  E268                    1081          LSR     D1, D0
00001718                          1082                  
00001718  4E75                    1083          RTS
0000171A                          1084  
0000171A                          1085  GET12TO13
0000171A  4280                    1086          CLR.L   D0
0000171C  3004                    1087          Move.W  D4, D0
0000171E                          1088          
0000171E  123C 0002               1089          Move.B  #2, D1
00001722  E368                    1090          LSL     D1, D0
00001724                          1091          
00001724  123C 000E               1092          Move.B  #14, D1
00001728  E268                    1093          LSR     D1, D0
0000172A                          1094          
0000172A  4E75                    1095          RTS
0000172C                          1096                  
0000172C                          1097  GET9TO11        
0000172C  4280                    1098          CLR.L   D0
0000172E  3004                    1099          Move.W  D4, D0
00001730                          1100                  
00001730  123C 0004               1101          Move.B  #4, D1
00001734  E368                    1102          LSL     D1, D0
00001736                          1103                  
00001736  123C 000D               1104          Move.B  #13, D1
0000173A  E268                    1105          LSR     D1, D0
0000173C                          1106                  
0000173C  4E75                    1107          RTS
0000173E                          1108                  
0000173E                          1109  GET6TO8 
0000173E  4280                    1110          CLR.L   D0
00001740  3004                    1111          Move.W  D4, D0
00001742                          1112                  
00001742  123C 0007               1113          Move.B  #7, D1
00001746  E368                    1114          LSL     D1, D0
00001748                          1115                  
00001748  123C 000D               1116          Move.B  #13, D1
0000174C  E268                    1117          LSR     D1, D0
0000174E                          1118                  
0000174E  4E75                    1119          RTS
00001750                          1120                  
00001750                          1121  GET3TO5 
00001750  4280                    1122          CLR.L   D0
00001752  3004                    1123          Move.W  D4, D0
00001754                          1124                  
00001754  123C 000A               1125          Move.B  #10, D1
00001758  E368                    1126          LSL     D1, D0
0000175A                          1127                  
0000175A  123C 000D               1128          Move.B  #13, D1
0000175E  E268                    1129          LSR     D1, D0
00001760                          1130                  
00001760  4E75                    1131          RTS
00001762                          1132  GET0TO2 
00001762  4280                    1133          CLR.L   D0
00001764  3004                    1134          Move.W  D4, D0
00001766                          1135                  
00001766  123C 000D               1136          Move.B  #13, D1
0000176A  E368                    1137          LSL     D1, D0
0000176C                          1138                  
0000176C  123C 000D               1139          Move.B  #13, D1
00001770  E268                    1140          LSR     D1, D0
00001772                          1141                  
00001772  4E75                    1142          RTS
00001774                          1143  GETBIT8
00001774  4280                    1144          CLR.L   D0
00001776  3004                    1145          Move.W  D4, D0
00001778                          1146                  
00001778  123C 0007               1147          Move.B  #7, D1
0000177C  E368                    1148          LSL     D1, D0
0000177E                          1149                  
0000177E  123C 000F               1150          Move.B  #15, D1
00001782  E268                    1151          LSR     D1, D0
00001784                          1152                  
00001784  4E75                    1153          RTS 
00001786                          1154          
00001786                          1155  GET6TO7
00001786  4280                    1156          Clr.L   D0
00001788  3004                    1157          Move.W  D4, D0
0000178A                          1158          
0000178A  123C 0008               1159          Move.B  #8, D1
0000178E  E368                    1160          Lsl     D1, D0
00001790                          1161          
00001790  123C 000E               1162          Move.B  #14, D1
00001794  E268                    1163          Lsr     D1, D0
00001796                          1164          
00001796  4E75                    1165          Rts
00001798                          1166          
00001798                          1167  GETBIT5
00001798  4280                    1168          Clr.L   D0
0000179A  3004                    1169          Move.W  D4, D0
0000179C                          1170          
0000179C  123C 000A               1171          Move.B  #10, D1
000017A0  E368                    1172          Lsl     D1, D0
000017A2                          1173          
000017A2  123C 000F               1174          Move.B  #15, D1
000017A6  E268                    1175          Lsr     D1, D0
000017A8                          1176          
000017A8  4E75                    1177          Rts
000017AA                          1178  
000017AA                          1179  GET0TO7
000017AA  4280                    1180          Clr.L   D0
000017AC  3004                    1181          Move.W  D4, D0
000017AE                          1182          
000017AE  123C 0008               1183          Move.B  #8, D1
000017B2  E368                    1184          Lsl     D1, D0
000017B4                          1185          
000017B4  E268                    1186          Lsr     D1, D0
000017B6                          1187          
000017B6  4E75                    1188          Rts
000017B8                          1189          
000017B8                          1190  GETBIT10
000017B8  4280                    1191          Clr.L   D0
000017BA  3004                    1192          Move.W  D4, D0
000017BC                          1193          
000017BC  123C 0005               1194          Move.B  #5, D1
000017C0  E368                    1195          Lsl     D1, D0
000017C2                          1196          
000017C2  123C 000F               1197          Move.B  #15, D1
000017C6  E268                    1198          Lsr     D1, D0
000017C8                          1199          
000017C8  4E75                    1200          Rts
000017CA                          1201  
000017CA                          1202  
000017CA                          1203      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_TEST1          5E09
ADDQ_TEST2          5009
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
BRANCH_TEST1        6007
BRANCH_TEST2        6000
BTST_TEST1          F07
BTST_TEST2          F3C
BTST_TEST3          807
DN_MODE             0
EA_0TO5             16C6
EA_ADD              1260
EA_ADDA             1294
EA_ADDQ             1316
EA_ADDQ_CHECK_8     1326
EA_ADDQ_DEST        134A
EA_ADDQ_IMMEDIATE   133E
EA_ADD_ADDRESS      12D6
EA_ADD_OPMODE_DEST  12C0
EA_ADD_OPMODE_SOURCE  12AA
EA_ADD_SIZE         12E6
EA_AN               14C8
EA_AND              135C
EA_AN_DEC           1500
EA_AN_INC           14E8
EA_AN_PNTR          14D4
EA_BIT_SHIFT        1372
EA_BRANCH           1492
EA_BRANCH_16_BIT    14A8
EA_BRANCH_ADD_DIS   14B0
EA_BTST             144A
EA_BTST_ADDRESS     147E
EA_BTST_DN          145E
EA_BTST_IMM         1470
EA_BYTE_TO_STRING   166E
EA_CMP              1354
EA_DIVS             1446
EA_DN               14BC
EA_EOR              1360
EA_IMMEDIATE        13EA
EA_IMMEDIATE_DEST   141A
EA_IMMEDIATE_SIZE   13FA
EA_IMM_BYTE         1696
EA_IMM_LONG         16B6
EA_IMM_WORD         16A6
EA_JSR              136E
EA_LEA              1358
EA_LONG_ADDR        15B4
EA_LONG_TO_STRING   15C2
EA_MOVE             1022
EA_MOVEM            10AA
EA_MOVEM_ADD_LAST_REG  1190
EA_MOVEM_ADD_SINGLE_REG  1170
EA_MOVEM_CARRY_CLEAR  1150
EA_MOVEM_CARRY_SET  1130
EA_MOVEM_FIRST_REG  1160
EA_MOVEM_LAST_REG   1182
EA_MOVEM_LIST_END   111A
EA_MOVEM_LIST_LOOP  10FE
EA_MOVEM_MEM_TO_REG  10E4
EA_MOVEM_POST_INC   1126
EA_MOVEM_PRE_DEC    111C
EA_MOVEM_REG        11A4
EA_MOVEM_REG_TO_MEM  10D0
EA_MOVE_DEST        1042
EA_MOVE_SIZE        108A
EA_MOVE_SOURCE      1032
EA_MULS             1420
EA_MULS_ADDRESS     1436
EA_NEG              1364
EA_NOT              136A
EA_SHIFT_CHECK_8    13A0
EA_SHIFT_COMMA      13DA
EA_SHIFT_DN         13C8
EA_SHIFT_IMMEDIATE  13B8
EA_SHIFT_MEMORY     1386
EA_SHIFT_REGISTER   138C
EA_SIGN_EXT_16      1530
EA_SIGN_EXT_32      1548
EA_SUB              1350
EA_WORD_ADDR        1518
EA_WORD_TO_STRING   1560
GET0TO2             1762
GET0TO7             17AA
GET12TO13           171A
GET12TO15           170E
GET3TO5             1750
GET6TO7             1786
GET6TO8             173E
GET9TO11            172C
GETBIT10            17B8
GETBIT5             1798
GETBIT8             1774
IMM_MODE            7
IMM_REG             4
IMM_TEST1           41F
IMM_TEST2           479
LONG_MODE           7
LONG_REG            1
MOVEM_TEST1         4897
MOVEM_TEST2         48B8
MOVEM_TEST3         4CB8
MOVEM_TEST4         48A7
MULS_TEST1          CFFC
MULS_TEST2          CFD2
SHIFT_TEST1         E1D7
SHIFT_TEST2         E1F8
SHIFT_TEST3         EF21
SHIFT_TEST4         E507
SHIFT_TEST5         E104
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
