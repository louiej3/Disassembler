00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/25/2014 11:34:36 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L #$Imm,A7
00000000                            39  
00000000  =0000E1D7                 40  Shift_Test1         EQU     %1110000111010111   ; Asl (A7)
00000000  =0000E1F8                 41  Shift_Test2         EQU     %1110000111111000   ; Asl $Word
00000000  =0000EF21                 42  Shift_Test3         EQU     %1110111100100001   ; Asl.B D7,D1
00000000  =0000E507                 43  Shift_Test4         EQU     %1110010100000111   ; Asl.B #2,D7
00000000  =0000E104                 44  Shift_Test5         EQU     %1110000100000100   ; Asl.B #8,D4
00000000                            45  
00000000  =0000041F                 46  Imm_Test1           EQU     %0000010000011111   ; SubI.B #$Imm,(A7)+
00000000  =00000479                 47  Imm_Test2           EQU     %0000010001111001   ; SubI.W #$Imm,$Long
00000000                            48  
00000000  =00005E09                 49  AddQ_Test1          EQU     %0101111000001001   ; AddQ.B #7,A1
00000000  =00005009                 50  AddQ_Test2          EQU     %0101000000001001   ; AddQ.B #8,A1
00000000                            51          
00001000                            52      ORG    $1000
00001000                            53      
00001000                            54  START:                  ; first instruction of program
00001000  267C 00000400             55          Move.L  #$0000400, A3
00001006                            56          
00001006                            57          ;Move.W  #$0034, (A3)
00001006  36FC 4030                 58          Move.W  #$4030, (A3)+
0000100A  26BC 12345678             59          Move.L  #$12345678, (A3)
00001010  554B                      60          Sub.W   #2, A3
00001012                            61          ;Move.L  #$12349999, (A3)
00001012                            62          ;Move.W  #$11, (A3)
00001012                            63          
00001012                            64          ;Move.W  #Test_Move1, D4
00001012                            65          ;Move.W  #Test_Move2, D4
00001012                            66          ;Move.W  #Test_Move3, D4
00001012                            67          ;Move.W  #Test_Move4, D4
00001012                            68          ;Move.W  #Test_Move5, D4
00001012                            69          ;Move.W  #Test_Move6, D4        
00001012                            70          ;Move.W  #Test_Move7, D4        
00001012                            71          ;Move.W  #Test_Move8, D4
00001012                            72          
00001012                            73          ;Move.W  #Add_Test1, D4
00001012                            74          ;Move.W  #Add_Test2, D4
00001012                            75          ;Move.W  #Add_Test3, D4
00001012                            76          ;Move.W  #Add_Test4, D4
00001012                            77          
00001012                            78          ;Move.W  #Shift_Test1, D4
00001012                            79          ;Move.W  #Shift_Test2, D4
00001012                            80          ;Move.W  #Shift_Test3, D4
00001012                            81          ;Move.W  #Shift_Test4, D4
00001012                            82          ;Move.W  #Shift_Test5, D4
00001012                            83          
00001012                            84          ;Move.W  #Imm_Test1, D4
00001012                            85          ;Move.W  #Imm_Test2, D4
00001012                            86          
00001012                            87          ;Move.W  #AddQ_Test1, D4
00001012  383C 5009                 88          Move.W  #AddQ_Test2, D4
00001016                            89                  
00001016                            90          ;Jmp     EA_MOVE     ; Branch to EA function for Move
00001016                            91          ;Jmp     EA_ADD
00001016                            92          ;Jmp     EA_BIT_SHIFT
00001016                            93          ;Jmp     EA_IMMEDIATE
00001016  4EF9 00001212             94          Jmp     EA_ADDQ
0000101C                            95  
0000101C                            96  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
0000101C                            97  ;-------------------- Effective Address Sub Routines --------------------;
0000101C                            98  ; These subroutines look for the correct effective address
0000101C                            99  ; in each OP code.
0000101C                           100  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
0000101C                           101  
0000101C                           102  ;=============================================;
0000101C                           103  ;--------------- EA Move/MoveA ---------------;
0000101C                           104  ;=============================================;
0000101C                           105  EA_MOVE
0000101C  4EB9 0000102C            106          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
00001022  1CFC 002C                107          Move.B  #',', (A6)+             ; Add a comma
00001026  4EB9 0000107C            108          Jsr     EA_MOVE_DEST            ; Add the EA for destination
0000102C                           109          
0000102C                           110          ; <Next instruction>
0000102C                           111                  
0000102C                           112  EA_MOVE_SOURCE  ; Find out Move's source
0000102C  4EB9 000015F8            113          Jsr     GET3TO5                 ; Get source mode
00001032  1A00                     114          Move.B  D0, D5                  ; Move source mode to D5
00001034  4EB9 0000160A            115          Jsr     Get0TO2                 ; Get source register
0000103A                           116          
0000103A                           117          ; List of valid effective addresses
0000103A  BA3C 0000                118          Cmp.B   #Dn_Mode, D5            ; Dn
0000103E  6700 036C                119          Beq     EA_DN
00001042                           120          
00001042  BA3C 0001                121          Cmp.B   #An_Mode, D5            ; An
00001046  6700 0370                122          Beq     EA_AN
0000104A                           123          
0000104A  BA3C 0002                124          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000104E  6700 0374                125          Beq     EA_AN_PNTR
00001052                           126          
00001052  BA3C 0003                127          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001056  6700 0380                128          Beq     EA_AN_INC
0000105A                           129          
0000105A  BA3C 0004                130          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000105E  6700 0390                131          Beq     EA_AN_DEC
00001062                           132          
00001062                           133          ; Comparing registers at this point because modes are the same
00001062  B03C 0000                134          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001066  6700 03A0                135          Beq     EA_WORD_ADDR
0000106A                           136          
0000106A  B03C 0001                137          Cmp.B   #Long_Reg, D0           ; (xxx).L
0000106E  6700 0434                138          Beq     EA_LONG_ADDR
00001072                           139          
00001072  B03C 0004                140          Cmp.B   #Imm_Reg, D0            ; #<data>
00001076  6700 004C                141          Beq     EA_MOVE_SIZE
0000107A                           142          
0000107A  4E75                     143          Rts
0000107C                           144          
0000107C                           145  EA_MOVE_DEST    ; Find out Move's destination
0000107C  4EB9 000015E6            146          Jsr     GET6TO8                 ; Get destination mode
00001082  1A00                     147          Move.B  D0, D5                  ; Move destination mode to D5
00001084  4EB9 000015D4            148          Jsr     GET9TO11                ; Get destination register
0000108A                           149          
0000108A                           150          ; List of valid effective addresses
0000108A  BA3C 0000                151          Cmp.B   #Dn_Mode, D5            ; Dn
0000108E  6700 031C                152          Beq     EA_DN
00001092                           153          
00001092  BA3C 0001                154          Cmp.B   #An_Mode, D5            ; An
00001096  6700 0320                155          Beq     EA_AN
0000109A                           156          
0000109A  BA3C 0002                157          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000109E  6700 0324                158          Beq     EA_AN_PNTR
000010A2                           159          
000010A2  BA3C 0003                160          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000010A6  6700 0330                161          Beq     EA_AN_INC
000010AA                           162          
000010AA  BA3C 0004                163          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000010AE  6700 0340                164          Beq     EA_AN_DEC
000010B2                           165          
000010B2                           166          ; Comparing registers at this point because modes are the same
000010B2  B03C 0000                167          Cmp.B   #Word_Reg, D0           ; (xxx).W
000010B6  6700 0350                168          Beq     EA_WORD_ADDR
000010BA                           169          
000010BA  B03C 0001                170          Cmp.B   #Long_Reg, D0           ; (xxx).L
000010BE  6700 03E4                171          Beq     EA_LONG_ADDR
000010C2                           172          
000010C2  4E75                     173          Rts
000010C4                           174          
000010C4                           175  EA_MOVE_SIZE    ; Find the size of immediate data being moved
000010C4  4EB9 000015C2            176          Jsr     GET12TO13               ; Get Move size
000010CA                           177  
000010CA  B03C 0001                178          Cmp.B   #%01, D0                ; Byte
000010CE  6700 04B6                179          Beq     EA_IMM_BYTE
000010D2                           180  
000010D2  B03C 0003                181          Cmp.B   #%11, D0                ; Word
000010D6  6700 04BE                182          Beq     EA_IMM_WORD
000010DA                           183          
000010DA  B03C 0002                184          Cmp.B   #%10, D0                ; Long
000010DE  6700 04C6                185          Beq     EA_IMM_LONG
000010E2                           186          
000010E2  4E75                     187          Rts
000010E4                           188  
000010E4                           189  ;===========================================;        
000010E4                           190  ;--------------- EA Add/AddA ---------------;
000010E4                           191  ;===========================================;       
000010E4                           192  EA_ADD  ; Figures out the EA for Add        
000010E4  4EB9 000015E6            193          Jsr     GET6TO8                 ; Isolate the Op mode
000010EA                           194          
000010EA  B03C 0003                195          Cmp.B   #%011, D0               ; Compare to AddA word
000010EE  6700 0028                196          Beq     EA_ADDA
000010F2                           197          
000010F2  B03C 0007                198          Cmp.B   #%111, D0               ; Compare to AddA long
000010F6  6700 0020                199          Beq     EA_ADDA
000010FA                           200  
000010FA  B03C 0000                201          Cmp.B   #%000, D0               ; Compare to Add source byte
000010FE  6700 002E                202          Beq     EA_ADD_OPMODE_SOURCE
00001102                           203          
00001102  B03C 0001                204          Cmp.B   #%001, D0               ; Compare to Add source word
00001106  6700 0026                205          Beq     EA_ADD_OPMODE_SOURCE
0000110A                           206          
0000110A  B03C 0002                207          Cmp.B   #%010, D0               ; Compare to Add source Long
0000110E  6700 001E                208          Beq     EA_ADD_OPMODE_SOURCE
00001112                           209          
00001112  4EF9 00001144            210          Jmp     EA_ADD_OPMODE_DEST      ; Must be an Add destination if none of the above
00001118                           211          
00001118                           212  EA_ADDA ; Figures out the EA for AddA
00001118  4EB9 0000115A            213          Jsr     EA_ADD_SOURCE           ; Get the source EA
0000111E  1CFC 002C                214          Move.B  #',', (A6)+             ; Add a comma
00001122  4EB9 000015D4            215          Jsr     GET9TO11                ; Get the register
00001128  4EB9 000013B8            216          Jsr     EA_AN                   ; Add An
0000112E                           217          
0000112E                           218          ; <Next instruction>
0000112E                           219          
0000112E                           220  EA_ADD_OPMODE_SOURCE    ; Finds the EA for Add if it is for the source
0000112E  4EB9 0000115A            221          Jsr     EA_ADD_SOURCE           ; Get the source EA
00001134  1CFC 002C                222          Move.B  #',', (A6)+             ; Add a comma
00001138  4EB9 000015D4            223          Jsr     GET9TO11                ; Get the register
0000113E  4EB9 000013AC            224          Jsr     EA_DN                   ; Add Dn
00001144                           225          
00001144                           226          ; <Next instruction>
00001144                           227          
00001144                           228  EA_ADD_OPMODE_DEST      ; Finds the EA for Add if it is for the destination
00001144  4EB9 000015D4            229          Jsr     GET9TO11                ; Get the register
0000114A  4EB9 000013AC            230          Jsr     EA_DN                   ; Add Dn
00001150  1CFC 002C                231          Move.B  #',', (A6)+             ; Add a comma
00001154  4EB9 000011AA            232          Jsr     EA_ADD_DEST             ; Get the destination EA 
0000115A                           233          
0000115A                           234          ; <Next instruction>
0000115A                           235  
0000115A                           236  EA_ADD_SOURCE   ; Find out Add source
0000115A  4EB9 000015F8            237          Jsr     GET3TO5                 ; Get source mode
00001160  1A00                     238          Move.B  D0, D5                  ; Move source mode to D5
00001162  4EB9 0000160A            239          Jsr     Get0TO2                 ; Get source register
00001168                           240          
00001168                           241          ; List of valid effective addresses
00001168  BA3C 0000                242          Cmp.B   #Dn_Mode, D5            ; Dn
0000116C  6700 023E                243          Beq     EA_DN
00001170                           244          
00001170  BA3C 0001                245          Cmp.B   #An_Mode, D5            ; An
00001174  6700 0242                246          Beq     EA_AN
00001178                           247          
00001178  BA3C 0002                248          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000117C  6700 0246                249          Beq     EA_AN_PNTR
00001180                           250          
00001180  BA3C 0003                251          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001184  6700 0252                252          Beq     EA_AN_INC
00001188                           253          
00001188  BA3C 0004                254          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000118C  6700 0262                255          Beq     EA_AN_DEC
00001190                           256          
00001190                           257          ; Comparing registers at this point because modes are the same
00001190  B03C 0000                258          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001194  6700 0272                259          Beq     EA_WORD_ADDR
00001198                           260          
00001198  B03C 0001                261          Cmp.B   #Long_Reg, D0           ; (xxx).L
0000119C  6700 0306                262          Beq     EA_LONG_ADDR
000011A0                           263          
000011A0  B03C 0004                264          Cmp.B   #Imm_Reg, D0            ; #<data>
000011A4  6700 003C                265          Beq     EA_ADD_SIZE
000011A8                           266          
000011A8  4E75                     267          Rts
000011AA                           268          
000011AA                           269  EA_ADD_DEST ; Find out Add destination
000011AA  4EB9 000015F8            270          Jsr     GET3TO5                 ; Get destination mode
000011B0  1A00                     271          Move.B  D0, D5                  ; Move destination mode to D5
000011B2  4EB9 0000160A            272          Jsr     Get0TO2                 ; Get destination register
000011B8                           273          
000011B8                           274          ; List of valid effective addresses
000011B8  BA3C 0002                275          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000011BC  6700 0206                276          Beq     EA_AN_PNTR
000011C0                           277          
000011C0  BA3C 0003                278          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000011C4  6700 0212                279          Beq     EA_AN_INC
000011C8                           280          
000011C8  BA3C 0004                281          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000011CC  6700 0222                282          Beq     EA_AN_DEC
000011D0                           283          
000011D0                           284          ; Comparing registers at this point because modes are the same
000011D0  B03C 0000                285          Cmp.B   #Word_Reg, D0           ; (xxx).W
000011D4  6700 0232                286          Beq     EA_WORD_ADDR
000011D8                           287          
000011D8  B03C 0001                288          Cmp.B   #Long_Reg, D0           ; (xxx).L
000011DC  6700 02C6                289          Beq     EA_LONG_ADDR
000011E0                           290                  
000011E0  4E75                     291          Rts
000011E2                           292          
000011E2                           293  EA_ADD_SIZE ; Find the size of immediate data being moved
000011E2  4EB9 000015E6            294          Jsr     GET6TO8                 ; Get Move size
000011E8                           295  
000011E8  B03C 0000                296          Cmp.B   #%000, D0               ; Byte
000011EC  6700 0398                297          Beq     EA_IMM_BYTE
000011F0                           298  
000011F0  B03C 0001                299          Cmp.B   #%001, D0               ; Word
000011F4  6700 03A0                300          Beq     EA_IMM_WORD
000011F8                           301          
000011F8  B03C 0002                302          Cmp.B   #%010, D0               ; Long
000011FC  6700 03A8                303          Beq     EA_IMM_LONG
00001200                           304          
00001200  B03C 0003                305          Cmp.B   #%011, D0               ; AddA Word
00001204  6700 0390                306          Beq     EA_IMM_WORD
00001208                           307     
00001208  B03C 0007                308          Cmp.B   #%111, D0               ; AddA Long
0000120C  6700 0398                309          Beq     EA_IMM_LONG
00001210                           310          
00001210  4E75                     311          Rts
00001212                           312          
00001212                           313  ;=================================================;        
00001212                           314  ;-------------------- EA AddQ --------------------;
00001212                           315  ;=================================================;
00001212                           316  EA_ADDQ ; Figures out the EA for AddQ
00001212  4EB9 00001222            317          Jsr     EA_ADDQ_CHECK_8         ; Get the immediate value
00001218  1CFC 002C                318          Move.B  #',', (A6)+             ; Add a comma
0000121C  4EB9 00001246            319          Jsr     EA_ADDQ_DEST            ; Add the destination
00001222                           320  
00001222                           321  EA_ADDQ_CHECK_8 ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001222  4EB9 000015D4            322          Jsr     GET9TO11                ; Isolate the count/register bits
00001228                           323          
00001228  B03C 0000                324          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
0000122C  6E00 000C                325          Bgt     EA_ADDQ_IMMEDIATE
00001230                           326          
00001230  103C 0008                327          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001234                           328          
00001234  4EF9 0000123A            329          Jmp     EA_ADDQ_IMMEDIATE
0000123A                           330          
0000123A                           331  EA_ADDQ_IMMEDIATE   ; Adds an immediate value before the comma
0000123A  1CFC 0023                332          Move.B  #'#', (A6)+
0000123E  0600 0030                333          Add.B   #$30, D0
00001242  1CC0                     334          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001244                           335          
00001244  4E75                     336          Rts
00001246                           337          
00001246                           338  EA_ADDQ_DEST    ; Determines the destination       
00001246  4EB9 000015F8            339          Jsr     GET3TO5                 ; Get source mode
0000124C  1A00                     340          Move.B  D0, D5                  ; Move source mode to D5
0000124E  4EB9 0000160A            341          Jsr     Get0TO2                 ; Get source register
00001254                           342          
00001254                           343          ; List of valid effective addresses
00001254  BA3C 0000                344          Cmp.B   #Dn_Mode, D5            ; Dn
00001258  6700 0152                345          Beq     EA_DN
0000125C                           346          
0000125C  BA3C 0001                347          Cmp.B   #An_Mode, D5            ; An
00001260  6700 0156                348          Beq     EA_AN
00001264                           349          
00001264  BA3C 0002                350          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001268  6700 015A                351          Beq     EA_AN_PNTR
0000126C                           352          
0000126C  BA3C 0003                353          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001270  6700 0166                354          Beq     EA_AN_INC
00001274                           355          
00001274  BA3C 0004                356          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001278  6700 0176                357          Beq     EA_AN_DEC
0000127C                           358          
0000127C                           359          ; Comparing registers at this point because modes are the same
0000127C  B03C 0000                360          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001280  6700 0186                361          Beq     EA_WORD_ADDR
00001284                           362          
00001284  B03C 0001                363          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001288  6700 021A                364          Beq     EA_LONG_ADDR
0000128C                           365          
0000128C                           366  ;=========================================================;        
0000128C                           367  ;---------------------- EA Sub/SubA ----------------------;
0000128C                           368  ; Jumps straight to EA_ADD because the EA for Add/AddA and
0000128C                           369  ; Sub/SubA are exactly the same.
0000128C                           370  ;=========================================================;
0000128C                           371  EA_SUB
0000128C  4EF8 10E4                372          Jmp     EA_ADD
00001290                           373  
00001290                           374  ;=========================================================;        
00001290                           375  ;---------------------- EA Cmp/CmpA ----------------------;
00001290                           376  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001290                           377  ; Cmp/CmpA are exactly the same.
00001290                           378  ;=========================================================;
00001290                           379  EA_CMP       
00001290  4EF8 10E4                380          Jmp     EA_ADD
00001294                           381  
00001294                           382  ;=========================================================;
00001294                           383  ;--------------------- EA Bit Shift ----------------------;
00001294                           384  ; Finds the EA for ASd, LSd, ROd. All of these OP codes
00001294                           385  ; are combined because the EA for each code is exactly the
00001294                           386  ; same.
00001294                           387  ;=========================================================;
00001294                           388  EA_BIT_SHIFT    ; Figures out the EA for bit shift functions
00001294  4EB9 0000162E            389          Jsr     GET6TO7
0000129A                           390          
0000129A  B03C 0003                391          Cmp.B   #%11, D0                ; If bits 6 and 7 are not %11, then we are shifting a register
0000129E  6600 0040                392          Bne     EA_SHIFT_REGISTER
000012A2                           393          
000012A2  4EB9 000012A8            394          Jsr     EA_SHIFT_MEMORY         ; If bits 6 and 7 are %11, then we are shifting memory
000012A8                           395          
000012A8                           396          ; <Next instruction>
000012A8                           397                  
000012A8                           398  EA_SHIFT_MEMORY ; Adds the correct EA for a memory shift
000012A8  4EB9 000015F8            399          Jsr     GET3TO5                 ; Get source mode
000012AE  1A00                     400          Move.B  D0, D5                  ; Move source mode to D5
000012B0  4EB9 0000160A            401          Jsr     Get0TO2                 ; Get source register
000012B6                           402          
000012B6                           403          ; List of valid effective addresses        
000012B6  BA3C 0002                404          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000012BA  6700 0108                405          Beq     EA_AN_PNTR
000012BE                           406          
000012BE  BA3C 0003                407          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000012C2  6700 0114                408          Beq     EA_AN_INC
000012C6                           409          
000012C6  BA3C 0004                410          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000012CA  6700 0124                411          Beq     EA_AN_DEC
000012CE                           412          
000012CE                           413          ; Comparing registers at this point because modes are the same
000012CE  B03C 0000                414          Cmp.B   #Word_Reg, D0           ; (xxx).W
000012D2  6700 0134                415          Beq     EA_WORD_ADDR
000012D6                           416          
000012D6  B03C 0001                417          Cmp.B   #Long_Reg, D0           ; (xxx).L
000012DA  6700 01C8                418          Beq     EA_LONG_ADDR
000012DE                           419          
000012DE  4E75                     420          Rts
000012E0                           421          
000012E0                           422  EA_SHIFT_REGISTER   ; Figure out if we are shifting by #<data> or by the value in a data register
000012E0  4EB9 00001640            423          Jsr     GETBIT5
000012E6                           424          
000012E6  B03C 0000                425          Cmp.B   #0, D0                  ; Check if bit 5 is %0
000012EA  6700 0008                426          Beq     EA_SHIFT_CHECK_8
000012EE                           427          
000012EE  4EF9 0000131C            428          Jmp     EA_SHIFT_DN             ; If it's not, we are shifting from a data register
000012F4                           429          
000012F4                           430  EA_SHIFT_CHECK_8    ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
000012F4  4EB9 000015D4            431          Jsr     GET9TO11                ; Isolate the count/register bits
000012FA                           432          
000012FA  B03C 0000                433          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
000012FE  6E00 000C                434          Bgt     EA_SHIFT_IMMEDIATE
00001302                           435          
00001302  103C 0008                436          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001306                           437                  
00001306  4EF9 0000130C            438          Jmp     EA_SHIFT_IMMEDIATE
0000130C                           439          
0000130C                           440  EA_SHIFT_IMMEDIATE  ; Adds an immediate value before the comma
0000130C  1CFC 0023                441          Move.B  #'#', (A6)+
00001310  0600 0030                442          Add.B   #$30, D0
00001314  1CC0                     443          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001316                           444  
00001316  4EF9 0000132E            445          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it
0000131C                           446          
0000131C                           447  EA_SHIFT_DN ; Adds a data register before the comma
0000131C  4EB9 000015D4            448          Jsr     GET9TO11                ; Isolate the data register bits
00001322                           449          
00001322  4EB9 000013AC            450          Jsr     EA_DN                   ; Add the data register to the string
00001328                           451          
00001328  4EF9 0000132E            452          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it 
0000132E                           453          
0000132E                           454  EA_SHIFT_COMMA  ; Adds the comma and everything after it to the string
0000132E  1CFC 002C                455          Move.B  #',', (A6)+
00001332                           456          
00001332  4EB9 0000160A            457          Jsr     GET0TO2                 ; Get the register number
00001338                           458          
00001338  4EB9 000013AC            459          Jsr     EA_DN                   ; Add the register
0000133E                           460          
0000133E                           461          ; <Next instruction>
0000133E                           462  
0000133E                           463  ;============================================;        
0000133E                           464  ;--------------- EA Immediate ---------------;
0000133E                           465  ;============================================;
0000133E                           466  EA_IMMEDIATE    ; Figures out the EA for immediate data OP codes
0000133E  4EB9 0000134E            467          Jsr     EA_IMMEDIATE_SIZE       ; Get the size of the immediate data and add to string
00001344  1CFC 002C                468          Move.B  #',', (A6)+             ; Add a comma
00001348  4EB9 0000136E            469          Jsr     EA_IMMEDIATE_DEST       ; Add the destination EA
0000134E                           470          
0000134E                           471          ; <Next instruction>
0000134E                           472          
0000134E                           473  EA_IMMEDIATE_SIZE   ; Determines the size of the immediate data and adds it
0000134E  4EB9 0000162E            474          Jsr     GET6TO7                 ; Isolate the size bits
00001354                           475                  
00001354  B03C 0001                476          Cmp.B   #%01, D0                ; Immediate word
00001358  6700 023C                477          Beq     EA_IMM_WORD
0000135C                           478          
0000135C  B03C 0002                479          Cmp.B   #%10, D0                ; Immediate long
00001360  6700 0244                480          Beq     EA_IMM_LONG
00001364                           481          
00001364  524B                     482          AddA.W  #1, A3                  ; Else, move the pointer forward by a byte get the next byte
00001366  4EF9 00001586            483          Jmp     EA_IMM_BYTE
0000136C                           484          
0000136C  4E75                     485          Rts
0000136E                           486          
0000136E                           487  EA_IMMEDIATE_DEST   ; Determines the destination EA
0000136E  4EB9 000015F8            488          Jsr     GET3TO5                 ; Get source mode
00001374  1A00                     489          Move.B  D0, D5                  ; Move source mode to D5
00001376  4EB9 0000160A            490          Jsr     Get0TO2                 ; Get source register
0000137C                           491       
0000137C                           492          ; List of valid effective addresses
0000137C  BA3C 0000                493          Cmp.B   #Dn_Mode, D5            ; Dn
00001380  6700 002A                494          Beq     EA_DN
00001384                           495          
00001384  BA3C 0002                496          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001388  6700 003A                497          Beq     EA_AN_PNTR
0000138C                           498          
0000138C  BA3C 0003                499          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001390  6700 0046                500          Beq     EA_AN_INC
00001394                           501          
00001394  BA3C 0004                502          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001398  6700 0056                503          Beq     EA_AN_DEC
0000139C                           504          
0000139C                           505          ; Comparing registers at this point because modes are the same
0000139C  B03C 0000                506          Cmp.B   #Word_Reg, D0           ; (xxx).W
000013A0  6700 0066                507          Beq     EA_WORD_ADDR
000013A4                           508          
000013A4  B03C 0001                509          Cmp.B   #Long_Reg, D0           ; (xxx).L
000013A8  6700 00FA                510          Beq     EA_LONG_ADDR
000013AC                           511                 
000013AC                           512  ;==========================================;        
000013AC                           513  ;---------- General EA functions ----------;
000013AC                           514  ;==========================================;
000013AC                           515  EA_DN   ; Adds Dn EA to string
000013AC  1CFC 0044                516          Move.B  #'D', (A6)+             
000013B0  0600 0030                517          Add.B   #$30, D0        
000013B4  1CC0                     518          Move.B  D0, (A6)+               
000013B6                           519                  
000013B6  4E75                     520          Rts
000013B8                           521  
000013B8                           522  EA_AN   ; Adds An EA to string
000013B8  1CFC 0041                523          Move.B  #'A', (A6)+
000013BC  0600 0030                524          Add.B   #$30, D0    
000013C0  1CC0                     525          Move.B  D0, (A6)+               
000013C2                           526                  
000013C2  4E75                     527          Rts
000013C4                           528  
000013C4                           529  EA_AN_PNTR  ; Adds (An) EA to string
000013C4  1CFC 0028                530          Move.B  #'(', (A6)+
000013C8  1CFC 0041                531          Move.B  #'A', (A6)+
000013CC  0600 0030                532          Add.B   #$30, D0
000013D0  1CC0                     533          Move.B  D0, (A6)+
000013D2  1CFC 0029                534          Move.B  #')', (A6)+
000013D6                           535                  
000013D6  4E75                     536          Rts
000013D8                           537          
000013D8                           538  EA_AN_INC   ; Adds (An)+ EA to string
000013D8  1CFC 0028                539          Move.B  #'(', (A6)+
000013DC  1CFC 0041                540          Move.B  #'A', (A6)+
000013E0  0600 0030                541          Add.B   #$30, D0
000013E4  1CC0                     542          Move.B  D0, (A6)+
000013E6  1CFC 0029                543          Move.B  #')', (A6)+
000013EA  1CFC 002B                544          Move.B  #'+', (A6)+
000013EE                           545                  
000013EE  4E75                     546          Rts 
000013F0                           547          
000013F0                           548  EA_AN_DEC   ; Adds -(An) EA to string
000013F0  1CFC 002D                549          Move.B  #'-', (A6)+
000013F4  1CFC 0028                550          Move.B  #'(', (A6)+
000013F8  1CFC 0041                551          Move.B  #'A', (A6)+
000013FC  0600 0030                552          Add.B   #$30, D0
00001400  1CC0                     553          Move.B  D0, (A6)+
00001402  1CFC 0029                554          Move.B  #')', (A6)+
00001406                           555                  
00001406  4E75                     556          Rts 
00001408                           557  
00001408                           558  EA_WORD_ADDR    ; Adds $Word to string
00001408  3C1B                     559          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
0000140A                           560          
0000140A  1CFC 0024                561          Move.B  #'$', (A6)+
0000140E                           562          
0000140E  BC7C 8000                563          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001412  6E00 000C                564          Bgt     EA_SIGN_EXT_16
00001416                           565          
00001416  BC7C 8000                566          Cmp.W   #$8000, D6          ; Word address is greater than 8000
0000141A  6F00 001C                567          Ble     EA_SIGN_EXT_32
0000141E                           568          
0000141E  4E75                     569          Rts
00001420                           570                  
00001420                           571  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
00001420  1CFC 0030                572          Move.B  #'0', (A6)+
00001424  1CFC 0030                573          Move.B  #'0', (A6)+
00001428  1CFC 0030                574          Move.B  #'0', (A6)+
0000142C  1CFC 0030                575          Move.B  #'0', (A6)+
00001430                           576          
00001430  4EB9 00001450            577          Jsr     EA_WORD_TO_STRING       
00001436                           578          
00001436  4E75                     579          Rts
00001438                           580  
00001438                           581  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
00001438  1CFC 0046                582          Move.B  #'F', (A6)+
0000143C  1CFC 0046                583          Move.B  #'F', (A6)+
00001440  1CFC 0046                584          Move.B  #'F', (A6)+
00001444  1CFC 0046                585          Move.B  #'F', (A6)+
00001448                           586          
00001448  4EB9 00001450            587          Jsr     EA_WORD_TO_STRING   
0000144E                           588          
0000144E  4E75                     589          Rts
00001450                           590          
00001450                           591  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
00001450  4280                     592          Clr.L   D0              ; Clear D0
00001452  3006                     593          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
00001454                           594  
00001454  123C 000C                595          Move.B  #12, D1         ; Grab bits 12 to 15
00001458  E268                     596          Lsr     D1, D0
0000145A  0600 0030                597          Add.B   #$30, D0
0000145E  1CC0                     598          Move.B  D0, (A6)+
00001460                           599          
00001460  4280                     600          Clr.L   D0
00001462  3006                     601          Move.W  D6, D0
00001464                           602          
00001464  123C 0004                603          Move.B  #4, D1          ; Grab bits 8 to 11
00001468  E368                     604          Lsl     D1, D0
0000146A  123C 000C                605          Move.B  #12, D1
0000146E  E268                     606          Lsr     D1, D0  
00001470  0600 0030                607          Add.B   #$30, D0
00001474  1CC0                     608          Move.B  D0, (A6)+
00001476                           609          
00001476  4280                     610          Clr.L   D0
00001478  3006                     611          Move.W  D6, D0
0000147A                           612          
0000147A  123C 0008                613          Move.B  #8, D1          ; Grab bits 4 to 7
0000147E  E368                     614          Lsl     D1, D0
00001480  123C 000C                615          Move.B  #12, D1
00001484  E268                     616          Lsr     D1, D0
00001486  0600 0030                617          Add.B   #$30, D0
0000148A  1CC0                     618          Move.B  D0, (A6)+
0000148C                           619          
0000148C  4280                     620          Clr.L   D0
0000148E  3006                     621          Move.W  D6, D0
00001490                           622          
00001490  123C 000C                623          Move.B  #12, D1         ; Grab bits 0 to 3
00001494  E368                     624          Lsl     D1, D0
00001496  123C 000C                625          Move.B  #12, D1
0000149A  E268                     626          Lsr     D1, D0
0000149C  0600 0030                627          Add.B   #$30, D0
000014A0  1CC0                     628          Move.B  D0, (A6)+
000014A2                           629          
000014A2  4E75                     630          Rts
000014A4                           631          
000014A4                           632  EA_LONG_ADDR    ; Adds $Long to string
000014A4  2C1B                     633          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000014A6                           634          
000014A6  1CFC 0024                635          Move.B  #'$', (A6)+
000014AA                           636          
000014AA  4EB9 000014B2            637          Jsr     EA_LONG_TO_STRING
000014B0                           638  
000014B0  4E75                     639          Rts
000014B2                           640                  
000014B2                           641  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
000014B2  4280                     642          Clr.L   D0              ; Clear D0
000014B4  2006                     643          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
000014B6                           644  
000014B6  123C 001C                645          Move.B  #28, D1         ; Grab bits 28 to 31
000014BA  E2A8                     646          Lsr.L   D1, D0
000014BC  0600 0030                647          Add.B   #$30, D0
000014C0  1CC0                     648          Move.B  D0, (A6)+
000014C2                           649          
000014C2  4280                     650          Clr.L   D0             
000014C4  2006                     651          Move.L  D6, D0          
000014C6                           652          
000014C6  123C 0004                653          Move.B  #4, D1          ; Grab bits 24 to 27
000014CA  E3A8                     654          Lsl.L   D1, D0
000014CC  123C 001C                655          Move.B  #28, D1
000014D0  E2A8                     656          Lsr.L   D1, D0
000014D2  0600 0030                657          Add.B   #$30, D0
000014D6  1CC0                     658          Move.B  D0, (A6)+
000014D8                           659          
000014D8  4280                     660          Clr.L   D0             
000014DA  2006                     661          Move.L  D6, D0
000014DC                           662  
000014DC  123C 0008                663          Move.B  #8, D1          ; Grab bits 20 to 23
000014E0  E3A8                     664          Lsl.L   D1, D0
000014E2  123C 001C                665          Move.B  #28, D1
000014E6  E2A8                     666          Lsr.L   D1, D0
000014E8  0600 0030                667          Add.B   #$30, D0
000014EC  1CC0                     668          Move.B  D0, (A6)+
000014EE                           669          
000014EE  4280                     670          Clr.L   D0             
000014F0  2006                     671          Move.L  D6, D0
000014F2                           672  
000014F2  123C 000C                673          Move.B  #12, D1         ; Grab bits 16 to 19
000014F6  E3A8                     674          Lsl.L   D1, D0
000014F8  123C 001C                675          Move.B  #28, D1
000014FC  E2A8                     676          Lsr.L   D1, D0
000014FE  0600 0030                677          Add.B   #$30, D0
00001502  1CC0                     678          Move.B  D0, (A6)+
00001504                           679          
00001504  4280                     680          Clr.L   D0             
00001506  2006                     681          Move.L  D6, D0
00001508                           682  
00001508  123C 0010                683          Move.B  #16, D1         ; Grab bits 12 to 15
0000150C  E3A8                     684          Lsl.L   D1, D0
0000150E  123C 001C                685          Move.B  #28, D1
00001512  E2A8                     686          Lsr.L   D1, D0
00001514  0600 0030                687          Add.B   #$30, D0
00001518  1CC0                     688          Move.B  D0, (A6)+
0000151A                           689          
0000151A  4280                     690          Clr.L   D0             
0000151C  2006                     691          Move.L  D6, D0
0000151E                           692          
0000151E  123C 0014                693          Move.B  #20, D1         ; Grab bits 8 to 11
00001522  E3A8                     694          Lsl.L   D1, D0
00001524  123C 001C                695          Move.B  #28, D1
00001528  E2A8                     696          Lsr.L   D1, D0
0000152A  0600 0030                697          Add.B   #$30, D0
0000152E  1CC0                     698          Move.B  D0, (A6)+
00001530                           699          
00001530  4280                     700          Clr.L   D0             
00001532  2006                     701          Move.L  D6, D0
00001534                           702  
00001534  123C 0018                703          Move.B  #24, D1         ; Grab bits 4 to 7
00001538  E3A8                     704          Lsl.L   D1, D0
0000153A  123C 001C                705          Move.B  #28, D1
0000153E  E2A8                     706          Lsr.L   D1, D0
00001540  0600 0030                707          Add.B   #$30, D0
00001544  1CC0                     708          Move.B  D0, (A6)+
00001546                           709          
00001546  4280                     710          Clr.L   D0             
00001548  2006                     711          Move.L  D6, D0
0000154A                           712  
0000154A  123C 001C                713          Move.B  #28, D1         ; Grab bits 0 to 3
0000154E  E3A8                     714          Lsl.L   D1, D0
00001550  123C 001C                715          Move.B  #28, D1
00001554  E2A8                     716          Lsr.L   D1, D0
00001556  0600 0030                717          Add.B   #$30, D0
0000155A  1CC0                     718          Move.B  D0, (A6)+
0000155C                           719          
0000155C  4E75                     720          Rts
0000155E                           721          
0000155E                           722  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
0000155E  4280                     723          Clr.L   D0              ; Clear D0
00001560  2006                     724          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
00001562                           725  
00001562  123C 0004                726          Move.B  #4, D1          ; Grab bits 4 to 7
00001566  E228                     727          Lsr.B   D1, D0
00001568  0600 0030                728          Add.B   #$30, D0
0000156C  1CC0                     729          Move.B  D0, (A6)+
0000156E                           730          
0000156E  4280                     731          Clr.L   D0             
00001570  2006                     732          Move.L  D6, D0          
00001572                           733          
00001572  123C 0004                734          Move.B  #4, D1          ; Grab bits 0 to 3
00001576  E328                     735          Lsl.B   D1, D0
00001578  123C 0004                736          Move.B  #4, D1
0000157C  E228                     737          Lsr.B   D1, D0
0000157E  0600 0030                738          Add.B   #$30, D0
00001582  1CC0                     739          Move.B  D0, (A6)+
00001584                           740          
00001584  4E75                     741          Rts
00001586                           742  
00001586                           743  EA_IMM_BYTE ; Finds the immediate byte data
00001586  1C1B                     744          Move.B  (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
00001588                           745          
00001588  1CFC 0023                746          Move.B  #'#', (A6)+         
0000158C  1CFC 0024                747          Move.B  #'$', (A6)+         
00001590                           748          
00001590  4EB8 155E                749          Jsr     EA_BYTE_TO_STRING    ; Add the byte to the string
00001594                           750          
00001594  4E75                     751          Rts
00001596                           752                  
00001596                           753  EA_IMM_WORD ; Finds the immediate word data
00001596  3C1B                     754          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
00001598                           755          
00001598  1CFC 0023                756          Move.B  #'#', (A6)+         
0000159C  1CFC 0024                757          Move.B  #'$', (A6)+         
000015A0                           758          
000015A0  4EB8 1450                759          Jsr     EA_WORD_TO_STRING    ; Add the word to the string
000015A4                           760          
000015A4  4E75                     761          Rts
000015A6                           762          
000015A6                           763  EA_IMM_LONG ; Finds the immediate long data
000015A6  2C1B                     764          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
000015A8                           765          
000015A8  1CFC 0023                766          Move.B  #'#', (A6)+
000015AC  1CFC 0024                767          Move.B  #'$', (A6)+
000015B0                           768          
000015B0  4EB8 14B2                769          Jsr     EA_LONG_TO_STRING    ; Add the long to the string
000015B4                           770          
000015B4  4E75                     771          Rts
000015B6                           772  
000015B6                           773  ;===========================================================;       
000015B6                           774  ;---------------- Bit Chopping Sub Routines ----------------;
000015B6                           775  ; These Sub Routines Chop a WORD size piece of data from
000015B6                           776  ; Data register 4 into a smaller piece, leaving just the
000015B6                           777  ; Piece in register 0 while leaving the original piece
000015B6                           778  ; of data intact.
000015B6                           779  ;===========================================================;
000015B6                           780  GET12TO15
000015B6  4280                     781          CLR.L   D0
000015B8  3004                     782          Move.W  D4, D0
000015BA                           783                  
000015BA  123C 000C                784          Move.B  #12, D1
000015BE  E268                     785          LSR     D1, D0
000015C0                           786                  
000015C0  4E75                     787          RTS
000015C2                           788  
000015C2                           789  GET12TO13
000015C2  4280                     790          CLR.L   D0
000015C4  3004                     791          Move.W  D4, D0
000015C6                           792          
000015C6  123C 0002                793          Move.B  #2, D1
000015CA  E368                     794          LSL     D1, D0
000015CC                           795          
000015CC  123C 000E                796          Move.B  #14, D1
000015D0  E268                     797          LSR     D1, D0
000015D2                           798          
000015D2  4E75                     799          RTS
000015D4                           800                  
000015D4                           801  GET9TO11        
000015D4  4280                     802          CLR.L   D0
000015D6  3004                     803          Move.W  D4, D0
000015D8                           804                  
000015D8  123C 0004                805          Move.B  #4, D1
000015DC  E368                     806          LSL     D1, D0
000015DE                           807                  
000015DE  123C 000D                808          Move.B  #13, D1
000015E2  E268                     809          LSR     D1, D0
000015E4                           810                  
000015E4  4E75                     811          RTS
000015E6                           812                  
000015E6                           813  GET6TO8 
000015E6  4280                     814          CLR.L   D0
000015E8  3004                     815          Move.W  D4, D0
000015EA                           816                  
000015EA  123C 0007                817          Move.B  #7, D1
000015EE  E368                     818          LSL     D1, D0
000015F0                           819                  
000015F0  123C 000D                820          Move.B  #13, D1
000015F4  E268                     821          LSR     D1, D0
000015F6                           822                  
000015F6  4E75                     823          RTS
000015F8                           824                  
000015F8                           825  GET3TO5 
000015F8  4280                     826          CLR.L   D0
000015FA  3004                     827          Move.W  D4, D0
000015FC                           828                  
000015FC  123C 000A                829          Move.B  #10, D1
00001600  E368                     830          LSL     D1, D0
00001602                           831                  
00001602  123C 000D                832          Move.B  #13, D1
00001606  E268                     833          LSR     D1, D0
00001608                           834                  
00001608  4E75                     835          RTS
0000160A                           836  GET0TO2 
0000160A  4280                     837          CLR.L   D0
0000160C  3004                     838          Move.W  D4, D0
0000160E                           839                  
0000160E  123C 000D                840          Move.B  #13, D1
00001612  E368                     841          LSL     D1, D0
00001614                           842                  
00001614  123C 000D                843          Move.B  #13, D1
00001618  E268                     844          LSR     D1, D0
0000161A                           845                  
0000161A  4E75                     846          RTS
0000161C                           847  GETBIT8
0000161C  4280                     848          CLR.L   D0
0000161E  3004                     849          Move.W  D4, D0
00001620                           850                  
00001620  123C 0007                851          Move.B  #7, D1
00001624  E368                     852          LSL     D1, D0
00001626                           853                  
00001626  123C 000F                854          Move.B  #15, D1
0000162A  E268                     855          LSR     D1, D0
0000162C                           856                  
0000162C  4E75                     857          RTS 
0000162E                           858          
0000162E                           859  GET6TO7
0000162E  4280                     860          Clr.L   D0
00001630  3004                     861          Move.W  D4, D0
00001632                           862          
00001632  123C 0008                863          Move.B  #8, D1
00001636  E368                     864          Lsl     D1, D0
00001638                           865          
00001638  123C 000E                866          Move.B  #14, D1
0000163C  E268                     867          Lsr     D1, D0
0000163E                           868          
0000163E  4E75                     869          Rts
00001640                           870          
00001640                           871  GETBIT5
00001640  4280                     872          Clr.L   D0
00001642  3004                     873          Move.W  D4, D0
00001644                           874          
00001644  123C 000A                875          Move.B  #10, D1
00001648  E368                     876          Lsl     D1, D0
0000164A                           877          
0000164A  123C 000F                878          Move.B  #15, D1
0000164E  E268                     879          Lsr     D1, D0
00001650                           880          
00001650  4E75                     881          Rts
00001652                           882  
00001652                           883  
00001652                           884      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_TEST1          5E09
ADDQ_TEST2          5009
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_ADD              10E4
EA_ADDA             1118
EA_ADDQ             1212
EA_ADDQ_CHECK_8     1222
EA_ADDQ_DEST        1246
EA_ADDQ_IMMEDIATE   123A
EA_ADD_DEST         11AA
EA_ADD_OPMODE_DEST  1144
EA_ADD_OPMODE_SOURCE  112E
EA_ADD_SIZE         11E2
EA_ADD_SOURCE       115A
EA_AN               13B8
EA_AN_DEC           13F0
EA_AN_INC           13D8
EA_AN_PNTR          13C4
EA_BIT_SHIFT        1294
EA_BYTE_TO_STRING   155E
EA_CMP              1290
EA_DN               13AC
EA_IMMEDIATE        133E
EA_IMMEDIATE_DEST   136E
EA_IMMEDIATE_SIZE   134E
EA_IMM_BYTE         1586
EA_IMM_LONG         15A6
EA_IMM_WORD         1596
EA_LONG_ADDR        14A4
EA_LONG_TO_STRING   14B2
EA_MOVE             101C
EA_MOVE_DEST        107C
EA_MOVE_SIZE        10C4
EA_MOVE_SOURCE      102C
EA_SHIFT_CHECK_8    12F4
EA_SHIFT_COMMA      132E
EA_SHIFT_DN         131C
EA_SHIFT_IMMEDIATE  130C
EA_SHIFT_MEMORY     12A8
EA_SHIFT_REGISTER   12E0
EA_SIGN_EXT_16      1420
EA_SIGN_EXT_32      1438
EA_SUB              128C
EA_WORD_ADDR        1408
EA_WORD_TO_STRING   1450
GET0TO2             160A
GET12TO13           15C2
GET12TO15           15B6
GET3TO5             15F8
GET6TO7             162E
GET6TO8             15E6
GET9TO11            15D4
GETBIT5             1640
GETBIT8             161C
IMM_MODE            7
IMM_REG             4
IMM_TEST1           41F
IMM_TEST2           479
LONG_MODE           7
LONG_REG            1
SHIFT_TEST1         E1D7
SHIFT_TEST2         E1F8
SHIFT_TEST3         EF21
SHIFT_TEST4         E507
SHIFT_TEST5         E104
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
