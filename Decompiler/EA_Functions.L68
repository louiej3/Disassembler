00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.12.29
Created On: 11/24/2014 11:56:49 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34      
00001000                            35      ORG    $1000
00001000                            36      
00001000                            37  START:                  ; first instruction of program
00001000                            38          ;Move.W  #Test_Move1, D4
00001000                            39          ;Move.W  #Test_Move2, D4
00001000                            40          ;Move.W  #Test_Move3, D4
00001000                            41          ;Move.W  #Test_Move4, D4
00001000                            42          ;Move.W  #Test_Move5, D4
00001000                            43          ;Move.W  #$4030, A3
00001000                            44          ;Move.W  #Test_Move6, D4
00001000                            45          ;Move.L  #$12349999, A3
00001000                            46          ;Move.W  #Test_Move7, D4
00001000                            47          ;Move.W  #$11, A3
00001000  383C 2F3C                 48          Move.W  #Test_Move8, D4
00001004  267C 12345678             49          Move.L  #$12345678, A3
0000100A                            50                  
0000100A  6000 0002                 51          Bra     EA_MOVE     ; Branch to EA function for Move
0000100E                            52  
0000100E                            53  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
0000100E                            54  ;-------------------- Effective Address Sub Routines --------------------;
0000100E                            55  ; These subroutines look for the correct effective address
0000100E                            56  ; in each OP code.
0000100E                            57  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
0000100E                            58  
0000100E                            59  ;=============================================;
0000100E                            60  ;--------------- EA Move/MoveA ---------------;
0000100E                            61  ;=============================================;
0000100E                            62  EA_MOVE
0000100E  4EB9 0000101E             63          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
00001014  1CFC 002C                 64          Move.B  #',', (A6)+             ; Add a comma
00001018  4EB9 0000106E             65          Jsr     EA_MOVE_DEST            ; Add the EA for destination
0000101E                            66                  
0000101E                            67  EA_MOVE_SOURCE  ; Find out Move's source
0000101E  4EB9 00001378             68          Jsr     GET3TO5                 ; Get source mode
00001024  1A00                      69          Move.B  D0, D5                  ; Move source mode to D5
00001026  4EB9 0000138A             70          Jsr     Get0TO2                 ; Get source register
0000102C                            71          
0000102C                            72          ; List of valid effective addresses
0000102C  BA3C 0000                 73          Cmp.B   #Dn_Mode, D5            ; Dn
00001030  6700 00FA                 74          Beq     EA_DN
00001034                            75          
00001034  BA3C 0001                 76          Cmp.B   #An_Mode, D5            ; An
00001038  6700 00FE                 77          Beq     EA_AN
0000103C                            78          
0000103C  BA3C 0002                 79          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001040  6700 0102                 80          Beq     EA_AN_PNTR
00001044                            81          
00001044  BA3C 0003                 82          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001048  6700 010E                 83          Beq     EA_AN_INC
0000104C                            84          
0000104C  BA3C 0004                 85          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001050  6700 011E                 86          Beq     EA_AN_DEC
00001054                            87          
00001054                            88          ; Comparing registers at this point because modes are the same
00001054  B03C 0000                 89          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001058  6700 012E                 90          Beq     EA_WORD_ADDR
0000105C                            91          
0000105C  B03C 0001                 92          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001060  6700 01C2                 93          Beq     EA_LONG_ADDR
00001064                            94          
00001064  B03C 0004                 95          Cmp.B   #Imm_Reg, D0            ; #<data>
00001068  6700 004C                 96          Beq     EA_MOVE_SIZE
0000106C                            97          
0000106C  4E75                      98          Rts
0000106E                            99          
0000106E                           100  EA_MOVE_DEST    ; Find out Move's destination
0000106E  4EB9 00001366            101          Jsr     GET6TO8                 ; Get destination mode
00001074  1A00                     102          Move.B  D0, D5                  ; Move destination mode to D5
00001076  4EB9 00001354            103          Jsr     GET9TO11                ; Get destination register
0000107C                           104          
0000107C                           105          ; List of valid effective addresses
0000107C  BA3C 0000                106          Cmp.B   #Dn_Mode, D5            ; Dn
00001080  6700 00AA                107          Beq     EA_DN
00001084                           108          
00001084  BA3C 0001                109          Cmp.B   #An_Mode, D5            ; An
00001088  6700 00AE                110          Beq     EA_AN
0000108C                           111          
0000108C  BA3C 0002                112          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001090  6700 00B2                113          Beq     EA_AN_PNTR
00001094                           114          
00001094  BA3C 0003                115          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001098  6700 00BE                116          Beq     EA_AN_INC
0000109C                           117          
0000109C  BA3C 0004                118          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000010A0  6700 00CE                119          Beq     EA_AN_DEC
000010A4                           120          
000010A4                           121          ; Comparing registers at this point because modes are the same
000010A4  B03C 0000                122          Cmp.B   #Word_Reg, D0           ; (xxx).W
000010A8  6700 00DE                123          Beq     EA_WORD_ADDR
000010AC                           124          
000010AC  B03C 0001                125          Cmp.B   #Long_Reg, D0           ; (xxx).L
000010B0  6700 0172                126          Beq     EA_LONG_ADDR
000010B4                           127          
000010B4  4E75                     128          Rts
000010B6                           129          
000010B6                           130  EA_MOVE_SIZE    ; Find the size of immediate data being moved
000010B6  4EB9 00001342            131          Jsr     GET12TO13               ; Get Move size
000010BC                           132  
000010BC  B03C 0003                133          Cmp.B   #%11, D0                ; Word
000010C0  6700 0254                134          Beq     EA_IMM_WORD
000010C4                           135          
000010C4  B03C 0002                136          Cmp.B   #%10, D0                ; Long
000010C8  6700 025C                137          Beq     EA_IMM_LONG
000010CC                           138          
000010CC  4E75                     139          Rts
000010CE                           140  
000010CE                           141  ;===========================================;        
000010CE                           142  ;--------------- EA Add/AddA ---------------;
000010CE                           143  ;===========================================;
000010CE                           144  EA_ADD
000010CE  4EB9 000010DE            145          Jsr     EA_ADD_SOURCE           ; Add the EA for source
000010D4  1CFC 002C                146          Move.B  #',', (A6)+             ; Add a comma
Line 147 ERROR: Undefined symbol
000010D8  4EB9 004D52B2            147          Jsr     EA_ADD_DEST             ; Add the EA for destination
000010DE                           148          
000010DE                           149  EA_ADD_SOURCE   ; Find out Add's source
000010DE  4EB9 00001378            150          Jsr     GET3TO5                 ; Get source mode
000010E4  1A00                     151          Move.B  D0, D5                  ; Move source mode to D5
000010E6  4EB9 0000138A            152          Jsr     Get0TO2                 ; Get source register
000010EC                           153          
000010EC                           154          ; List of valid effective addresses
000010EC  BA3C 0000                155          Cmp.B   #Dn_Mode, D5            ; Dn
000010F0  6700 003A                156          Beq     EA_DN
000010F4                           157          
000010F4  BA3C 0001                158          Cmp.B   #An_Mode, D5            ; An
000010F8  6700 003E                159          Beq     EA_AN
000010FC                           160          
000010FC  BA3C 0002                161          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001100  6700 0042                162          Beq     EA_AN_PNTR
00001104                           163          
00001104  BA3C 0003                164          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001108  6700 004E                165          Beq     EA_AN_INC
0000110C                           166          
0000110C  BA3C 0004                167          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001110  6700 005E                168          Beq     EA_AN_DEC
00001114                           169          
00001114                           170          ; Comparing registers at this point because modes are the same
00001114  B03C 0000                171          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001118  6700 006E                172          Beq     EA_WORD_ADDR
0000111C                           173          
0000111C  B03C 0001                174          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001120  6700 0102                175          Beq     EA_LONG_ADDR
00001124                           176          
00001124  B03C 0004                177          Cmp.B   #Imm_Reg, D0            ; #<data>
00001128  678C                     178          Beq     EA_MOVE_SIZE
0000112A                           179          
0000112A  4E75                     180          Rts
0000112C                           181          
0000112C                           182  ;==========================================;        
0000112C                           183  ;---------- General EA functions ----------;
0000112C                           184  ;==========================================;
0000112C                           185  EA_DN   ; Adds Dn EA to string
0000112C  1CFC 0044                186          Move.B  #'D', (A6)+             
00001130  0600 0030                187          Add.B   #$30, D0        
00001134  1CC0                     188          Move.B  D0, (A6)+               
00001136                           189                  
00001136  4E75                     190          Rts
00001138                           191  
00001138                           192  EA_AN   ; Adds An EA to string
00001138  1CFC 0041                193          Move.B  #'A', (A6)+
0000113C  0600 0030                194          Add.B   #$30, D0    
00001140  1CC0                     195          Move.B  D0, (A6)+               
00001142                           196                  
00001142  4E75                     197          Rts
00001144                           198  
00001144                           199  EA_AN_PNTR  ; Adds (An) EA to string
00001144  1CFC 0028                200          Move.B  #'(', (A6)+
00001148  1CFC 0041                201          Move.B  #'A', (A6)+
0000114C  0600 0030                202          Add.B   #$30, D0
00001150  1CC0                     203          Move.B  D0, (A6)+
00001152  1CFC 0029                204          Move.B  #')', (A6)+
00001156                           205                  
00001156  4E75                     206          Rts
00001158                           207          
00001158                           208  EA_AN_INC   ; Adds (An)+ EA to string
00001158  1CFC 0028                209          Move.B  #'(', (A6)+
0000115C  1CFC 0041                210          Move.B  #'A', (A6)+
00001160  0600 0030                211          Add.B   #$30, D0
00001164  1CC0                     212          Move.B  D0, (A6)+
00001166  1CFC 0029                213          Move.B  #')', (A6)+
0000116A  1CFC 002B                214          Move.B  #'+', (A6)+
0000116E                           215                  
0000116E  4E75                     216          Rts 
00001170                           217          
00001170                           218  EA_AN_DEC   ; Adds -(An) EA to string
00001170  1CFC 002D                219          Move.B  #'-', (A6)+
00001174  1CFC 0028                220          Move.B  #'(', (A6)+
00001178  1CFC 0041                221          Move.B  #'A', (A6)+
0000117C  0600 0030                222          Add.B   #$30, D0
00001180  1CC0                     223          Move.B  D0, (A6)+
00001182  1CFC 0029                224          Move.B  #')', (A6)+
00001186                           225                  
00001186  4E75                     226          Rts 
00001188                           227  
00001188                           228  EA_WORD_ADDR    ; Adds $Word to string
00001188  3C1B                     229          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
0000118A                           230          
0000118A  1CFC 0024                231          Move.B  #'$', (A6)+
0000118E                           232          
0000118E  BC7C 8000                233          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001192  6E00 000C                234          Bgt     EA_SIGN_EXT_16
00001196                           235          
00001196  BC7C 8000                236          Cmp.W   #$8000, D6          ; Word address is greater than 8000
0000119A  6F00 001C                237          Ble     EA_SIGN_EXT_32
0000119E                           238          
0000119E  4E75                     239          Rts
000011A0                           240                  
000011A0                           241  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
000011A0  1CFC 0030                242          Move.B  #'0', (A6)+
000011A4  1CFC 0030                243          Move.B  #'0', (A6)+
000011A8  1CFC 0030                244          Move.B  #'0', (A6)+
000011AC  1CFC 0030                245          Move.B  #'0', (A6)+
000011B0                           246          
000011B0  4EB9 000011D0            247          Jsr     EA_WORD_TO_STRING       
000011B6                           248          
000011B6  4E75                     249          Rts
000011B8                           250  
000011B8                           251  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
000011B8  1CFC 0046                252          Move.B  #'F', (A6)+
000011BC  1CFC 0046                253          Move.B  #'F', (A6)+
000011C0  1CFC 0046                254          Move.B  #'F', (A6)+
000011C4  1CFC 0046                255          Move.B  #'F', (A6)+
000011C8                           256          
000011C8  4EB9 000011D0            257          Jsr     EA_WORD_TO_STRING   
000011CE                           258          
000011CE  4E75                     259          Rts
000011D0                           260          
000011D0                           261  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
000011D0  4280                     262          Clr.L   D0              ; Clear D0
000011D2  3006                     263          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
000011D4                           264  
000011D4  123C 000C                265          Move.B  #12, D1         ; Grab bits 12 to 15
000011D8  E268                     266          Lsr     D1, D0
000011DA  0600 0030                267          Add.B   #$30, D0
000011DE  1CC0                     268          Move.B  D0, (A6)+
000011E0                           269          
000011E0  4280                     270          Clr.L   D0
000011E2  3006                     271          Move.W  D6, D0
000011E4                           272          
000011E4  123C 0004                273          Move.B  #4, D1          ; Grab bits 8 to 11
000011E8  E368                     274          Lsl     D1, D0
000011EA  123C 000C                275          Move.B  #12, D1
000011EE  E268                     276          Lsr     D1, D0  
000011F0  0600 0030                277          Add.B   #$30, D0
000011F4  1CC0                     278          Move.B  D0, (A6)+
000011F6                           279          
000011F6  4280                     280          Clr.L   D0
000011F8  3006                     281          Move.W  D6, D0
000011FA                           282          
000011FA  123C 0008                283          Move.B  #8, D1          ; Grab bits 4 to 7
000011FE  E368                     284          Lsl     D1, D0
00001200  123C 000C                285          Move.B  #12, D1
00001204  E268                     286          Lsr     D1, D0
00001206  0600 0030                287          Add.B   #$30, D0
0000120A  1CC0                     288          Move.B  D0, (A6)+
0000120C                           289          
0000120C  4280                     290          Clr.L   D0
0000120E  3006                     291          Move.W  D6, D0
00001210                           292          
00001210  123C 000C                293          Move.B  #12, D1         ; Grab bits 0 to 3
00001214  E368                     294          Lsl     D1, D0
00001216  123C 000C                295          Move.B  #12, D1
0000121A  E268                     296          Lsr     D1, D0
0000121C  0600 0030                297          Add.B   #$30, D0
00001220  1CC0                     298          Move.B  D0, (A6)+
00001222                           299          
00001222  4E75                     300          Rts
00001224                           301          
00001224                           302  EA_LONG_ADDR    ; Adds $Long to string
00001224  2C1B                     303          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
00001226                           304          
00001226  1CFC 0024                305          Move.B  #'$', (A6)+
0000122A                           306          
0000122A  4EB9 00001232            307          Jsr     EA_LONG_TO_STRING
00001230                           308  
00001230  4E75                     309          Rts
00001232                           310                  
00001232                           311  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
00001232  4280                     312          Clr.L   D0              ; Clear D0
00001234  2006                     313          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
00001236                           314  
00001236  123C 001C                315          Move.B  #28, D1         ; Grab bits 28 to 31
0000123A  E2A8                     316          Lsr.L   D1, D0
0000123C  0600 0030                317          Add.B   #$30, D0
00001240  1CC0                     318          Move.B  D0, (A6)+
00001242                           319          
00001242  4280                     320          Clr.L   D0             
00001244  2006                     321          Move.L  D6, D0          
00001246                           322          
00001246  123C 0004                323          Move.B  #4, D1          ; Grab bits 24 to 27
0000124A  E3A8                     324          Lsl.L   D1, D0
0000124C  123C 001C                325          Move.B  #28, D1
00001250  E2A8                     326          Lsr.L   D1, D0
00001252  0600 0030                327          Add.B   #$30, D0
00001256  1CC0                     328          Move.B  D0, (A6)+
00001258                           329          
00001258  4280                     330          Clr.L   D0             
0000125A  2006                     331          Move.L  D6, D0
0000125C                           332  
0000125C  123C 0008                333          Move.B  #8, D1          ; Grab bits 20 to 23
00001260  E3A8                     334          Lsl.L   D1, D0
00001262  123C 001C                335          Move.B  #28, D1
00001266  E2A8                     336          Lsr.L   D1, D0
00001268  0600 0030                337          Add.B   #$30, D0
0000126C  1CC0                     338          Move.B  D0, (A6)+
0000126E                           339          
0000126E  4280                     340          Clr.L   D0             
00001270  2006                     341          Move.L  D6, D0
00001272                           342  
00001272  123C 000C                343          Move.B  #12, D1         ; Grab bits 16 to 19
00001276  E3A8                     344          Lsl.L   D1, D0
00001278  123C 001C                345          Move.B  #28, D1
0000127C  E2A8                     346          Lsr.L   D1, D0
0000127E  0600 0030                347          Add.B   #$30, D0
00001282  1CC0                     348          Move.B  D0, (A6)+
00001284                           349          
00001284  4280                     350          Clr.L   D0             
00001286  2006                     351          Move.L  D6, D0
00001288                           352  
00001288  123C 0010                353          Move.B  #16, D1         ; Grab bits 12 to 15
0000128C  E3A8                     354          Lsl.L   D1, D0
0000128E  123C 001C                355          Move.B  #28, D1
00001292  E2A8                     356          Lsr.L   D1, D0
00001294  0600 0030                357          Add.B   #$30, D0
00001298  1CC0                     358          Move.B  D0, (A6)+
0000129A                           359          
0000129A  4280                     360          Clr.L   D0             
0000129C  2006                     361          Move.L  D6, D0
0000129E                           362          
0000129E  123C 0014                363          Move.B  #20, D1         ; Grab bits 8 to 11
000012A2  E3A8                     364          Lsl.L   D1, D0
000012A4  123C 001C                365          Move.B  #28, D1
000012A8  E2A8                     366          Lsr.L   D1, D0
000012AA  0600 0030                367          Add.B   #$30, D0
000012AE  1CC0                     368          Move.B  D0, (A6)+
000012B0                           369          
000012B0  4280                     370          Clr.L   D0             
000012B2  2006                     371          Move.L  D6, D0
000012B4                           372  
000012B4  123C 0018                373          Move.B  #24, D1         ; Grab bits 4 to 7
000012B8  E3A8                     374          Lsl.L   D1, D0
000012BA  123C 001C                375          Move.B  #28, D1
000012BE  E2A8                     376          Lsr.L   D1, D0
000012C0  0600 0030                377          Add.B   #$30, D0
000012C4  1CC0                     378          Move.B  D0, (A6)+
000012C6                           379          
000012C6  4280                     380          Clr.L   D0             
000012C8  2006                     381          Move.L  D6, D0
000012CA                           382  
000012CA  123C 001C                383          Move.B  #28, D1         ; Grab bits 0 to 3
000012CE  E3A8                     384          Lsl.L   D1, D0
000012D0  123C 001C                385          Move.B  #28, D1
000012D4  E2A8                     386          Lsr.L   D1, D0
000012D6  0600 0030                387          Add.B   #$30, D0
000012DA  1CC0                     388          Move.B  D0, (A6)+
000012DC                           389          
000012DC  4E75                     390          Rts
000012DE                           391          
000012DE                           392  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
000012DE  4280                     393          Clr.L   D0              ; Clear D0
000012E0  2006                     394          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
000012E2                           395  
000012E2  123C 0004                396          Move.B  #4, D1         ; Grab bits 4 to 7
000012E6  E2A8                     397          Lsr.L   D1, D0
000012E8  0600 0030                398          Add.B   #$30, D0
000012EC  1CC0                     399          Move.B  D0, (A6)+
000012EE                           400          
000012EE  4280                     401          Clr.L   D0             
000012F0  2006                     402          Move.L  D6, D0          
000012F2                           403          
000012F2  123C 0004                404          Move.B  #4, D1          ; Grab bits 0 to 3
000012F6  E3A8                     405          Lsl.L   D1, D0
000012F8  123C 0004                406          Move.B  #4, D1
000012FC  E2A8                     407          Lsr.L   D1, D0
000012FE  0600 0030                408          Add.B   #$30, D0
00001302  1CC0                     409          Move.B  D0, (A6)+
00001304                           410          
00001304  4E75                     411          Rts
00001306                           412  
00001306                           413  EA_IMM_BYTE ; Finds the immediate byte data
00001306  1C1B                     414          Move.B (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
00001308                           415          
00001308  1CFC 0023                416          Move.B  #'#', (A6)+         
0000130C  1CFC 0024                417          Move.B  #'$', (A6)+         
00001310                           418          
00001310  4EB8 12DE                419          Jsr     EA_BYTE_TO_STRING    
00001314                           420          
00001314  4E75                     421          Rts
00001316                           422                  
00001316                           423  EA_IMM_WORD ; Finds the immediate word data
00001316  3C1B                     424          Move.W (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
00001318                           425          
00001318  1CFC 0023                426          Move.B  #'#', (A6)+         
0000131C  1CFC 0024                427          Move.B  #'$', (A6)+         
00001320                           428          
00001320  4EB8 11D0                429          Jsr     EA_WORD_TO_STRING   ; Add the word to the string
00001324                           430          
00001324  4E75                     431          Rts
00001326                           432          
00001326                           433  EA_IMM_LONG ; Finds the immediate long data
00001326  2C1B                     434          Move.L (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
00001328                           435          
00001328  1CFC 0023                436          Move.B  #'#', (A6)+
0000132C  1CFC 0024                437          Move.B  #'$', (A6)+
00001330                           438          
00001330  4EB8 1232                439          Jsr     EA_LONG_TO_STRING
00001334                           440          
00001334  4E75                     441          Rts
00001336                           442  
00001336                           443  ;===========================================================;       
00001336                           444  ;---------------- Bit Chopping Sub Routines ----------------;
00001336                           445  ; These Sub Routines Chop a WORD size piece of data from
00001336                           446  ; Data register 4 into a smaller piece, leaving just the
00001336                           447  ; Piece in register 0 while leaving the original piece
00001336                           448  ; of data intact.
00001336                           449  ;===========================================================;
00001336                           450  GET12TO15
00001336  4280                     451          CLR.L   D0
00001338  3004                     452          Move.W  D4, D0
0000133A                           453                  
0000133A  123C 000C                454          Move.B  #12, D1
0000133E  E268                     455          LSR     D1, D0
00001340                           456                  
00001340  4E75                     457          RTS
00001342                           458  
00001342                           459  GET12TO13
00001342  4280                     460          CLR.L   D0
00001344  3004                     461          Move.W  D4, D0
00001346                           462          
00001346  123C 0002                463          Move.B  #2, D1
0000134A  E368                     464          LSL     D1, D0
0000134C                           465          
0000134C  123C 000E                466          Move.B  #14, D1
00001350  E268                     467          LSR     D1, D0
00001352                           468          
00001352  4E75                     469          RTS
00001354                           470                  
00001354                           471  GET9TO11        
00001354  4280                     472          CLR.L   D0
00001356  3004                     473          Move.W  D4, D0
00001358                           474                  
00001358  123C 0004                475          Move.B  #4, D1
0000135C  E368                     476          LSL     D1, D0
0000135E                           477                  
0000135E  123C 000D                478          Move.B  #13, D1
00001362  E268                     479          LSR     D1, D0
00001364                           480                  
00001364  4E75                     481          RTS
00001366                           482                  
00001366                           483  GET6TO8 
00001366  4280                     484          CLR.L   D0
00001368  3004                     485          Move.W  D4, D0
0000136A                           486                  
0000136A  123C 0007                487          Move.B  #7, D1
0000136E  E368                     488          LSL     D1, D0
00001370                           489                  
00001370  123C 000D                490          Move.B  #13, D1
00001374  E268                     491          LSR     D1, D0
00001376                           492                  
00001376  4E75                     493          RTS
00001378                           494                  
00001378                           495  GET3TO5 
00001378  4280                     496          CLR.L   D0
0000137A  3004                     497          Move.W  D4, D0
0000137C                           498                  
0000137C  123C 000A                499          Move.B  #10, D1
00001380  E368                     500          LSL     D1, D0
00001382                           501                  
00001382  123C 000D                502          Move.B  #13, D1
00001386  E268                     503          LSR     D1, D0
00001388                           504                  
00001388  4E75                     505          RTS
0000138A                           506  GET0TO2 
0000138A  4280                     507          CLR.L   D0
0000138C  3004                     508          Move.W  D4, D0
0000138E                           509                  
0000138E  123C 000D                510          Move.B  #13, D1
00001392  E368                     511          LSL     D1, D0
00001394                           512                  
00001394  123C 000D                513          Move.B  #13, D1
00001398  E268                     514          LSR     D1, D0
0000139A                           515                  
0000139A  4E75                     516          RTS
0000139C                           517  GETBIT8
0000139C  4280                     518          CLR.L   D0
0000139E  3004                     519          Move.W  D4, D0
000013A0                           520                  
000013A0  123C 0007                521          Move.B  #7, D1
000013A4  E368                     522          LSL     D1, D0
000013A6                           523                  
000013A6  123C 000F                524          Move.B  #15, D1
000013AA  E268                     525          LSR     D1, D0
000013AC                           526                  
000013AC  4E75                     527          RTS 
000013AE                           528  
000013AE                           529      END    START        ; last line of source

1 error detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_ADD              10CE
EA_ADD_SOURCE       10DE
EA_AN               1138
EA_AN_DEC           1170
EA_AN_INC           1158
EA_AN_PNTR          1144
EA_BYTE_TO_STRING   12DE
EA_DN               112C
EA_IMM_BYTE         1306
EA_IMM_LONG         1326
EA_IMM_WORD         1316
EA_LONG_ADDR        1224
EA_LONG_TO_STRING   1232
EA_MOVE             100E
EA_MOVE_DEST        106E
EA_MOVE_SIZE        10B6
EA_MOVE_SOURCE      101E
EA_SIGN_EXT_16      11A0
EA_SIGN_EXT_32      11B8
EA_WORD_ADDR        1188
EA_WORD_TO_STRING   11D0
GET0TO2             138A
GET12TO13           1342
GET12TO15           1336
GET3TO5             1378
GET6TO8             1366
GET9TO11            1354
GETBIT8             139C
IMM_MODE            7
IMM_REG             4
LONG_MODE           7
LONG_REG            1
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
