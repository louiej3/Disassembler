00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/25/2014 11:07:40 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L #$Imm,A7
00000000                            39  
00000000  =0000E1D7                 40  Shift_Test1         EQU     %1110000111010111   ; Asl (A7)
00000000  =0000E1F8                 41  Shift_Test2         EQU     %1110000111111000   ; Asl $Word
00000000  =0000EF21                 42  Shift_Test3         EQU     %1110111100100001   ; Asl.B D7,D1
00000000  =0000E507                 43  Shift_Test4         EQU     %1110010100000111   ; Asl.B #2,D7
00000000  =0000E104                 44  Shift_Test5         EQU     %1110000100000100   ; Asl.B #8,D4
00000000                            45  
00000000  =0000041F                 46  Imm_Test1           EQU     %0000010000011111   ; SubI.B #$Imm,(A7)+
00000000  =00000479                 47  Imm_Test2           EQU     %0000010001111001   ; SubI.W #$Imm,$Long
00000000                            48          
00001000                            49      ORG    $1000
00001000                            50      
00001000                            51  START:                  ; first instruction of program
00001000  267C 00000400             52          Move.L  #$0000400, A3
00001006                            53          
00001006                            54          ;Move.W  #$0034, (A3)
00001006  36FC 4030                 55          Move.W  #$4030, (A3)+
0000100A  26BC 12345678             56          Move.L  #$12345678, (A3)
00001010  554B                      57          Sub.W   #2, A3
00001012                            58          ;Move.L  #$12349999, (A3)
00001012                            59          ;Move.W  #$11, (A3)
00001012                            60          
00001012                            61          ;Move.W  #Test_Move1, D4
00001012                            62          ;Move.W  #Test_Move2, D4
00001012                            63          ;Move.W  #Test_Move3, D4
00001012                            64          ;Move.W  #Test_Move4, D4
00001012                            65          ;Move.W  #Test_Move5, D4
00001012                            66          ;Move.W  #Test_Move6, D4        
00001012                            67          ;Move.W  #Test_Move7, D4        
00001012                            68          ;Move.W  #Test_Move8, D4
00001012                            69          
00001012                            70          ;Move.W  #Add_Test1, D4
00001012                            71          ;Move.W  #Add_Test2, D4
00001012                            72          ;Move.W  #Add_Test3, D4
00001012                            73          ;Move.W  #Add_Test4, D4
00001012                            74          
00001012                            75          ;Move.W  #Shift_Test1, D4
00001012                            76          ;Move.W  #Shift_Test2, D4
00001012                            77          ;Move.W  #Shift_Test3, D4
00001012                            78          ;Move.W  #Shift_Test4, D4
00001012                            79          ;Move.W  #Shift_Test5, D4
00001012                            80          
00001012                            81          ;Move.W  #Imm_Test1, D4
00001012  383C 0479                 82          Move.W  #Imm_Test2, D4
00001016                            83                  
00001016                            84          ;Jmp     EA_MOVE     ; Branch to EA function for Move
00001016                            85          ;Jmp     EA_ADD
00001016                            86          ;Jmp     EA_BIT_SHIFT
00001016  4EF9 000012C4             87          Jmp     EA_IMMEDIATE
0000101C                            88  
0000101C                            89  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
0000101C                            90  ;-------------------- Effective Address Sub Routines --------------------;
0000101C                            91  ; These subroutines look for the correct effective address
0000101C                            92  ; in each OP code.
0000101C                            93  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
0000101C                            94  
0000101C                            95  ;=============================================;
0000101C                            96  ;--------------- EA Move/MoveA ---------------;
0000101C                            97  ;=============================================;
0000101C                            98  EA_MOVE
0000101C  4EB9 0000102C             99          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
00001022  1CFC 002C                100          Move.B  #',', (A6)+             ; Add a comma
00001026  4EB9 0000107C            101          Jsr     EA_MOVE_DEST            ; Add the EA for destination
0000102C                           102          
0000102C                           103          ; <Next instruction>
0000102C                           104                  
0000102C                           105  EA_MOVE_SOURCE  ; Find out Move's source
0000102C  4EB9 0000157E            106          Jsr     GET3TO5                 ; Get source mode
00001032  1A00                     107          Move.B  D0, D5                  ; Move source mode to D5
00001034  4EB9 00001590            108          Jsr     Get0TO2                 ; Get source register
0000103A                           109          
0000103A                           110          ; List of valid effective addresses
0000103A  BA3C 0000                111          Cmp.B   #Dn_Mode, D5            ; Dn
0000103E  6700 02F2                112          Beq     EA_DN
00001042                           113          
00001042  BA3C 0001                114          Cmp.B   #An_Mode, D5            ; An
00001046  6700 02F6                115          Beq     EA_AN
0000104A                           116          
0000104A  BA3C 0002                117          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000104E  6700 02FA                118          Beq     EA_AN_PNTR
00001052                           119          
00001052  BA3C 0003                120          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001056  6700 0306                121          Beq     EA_AN_INC
0000105A                           122          
0000105A  BA3C 0004                123          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000105E  6700 0316                124          Beq     EA_AN_DEC
00001062                           125          
00001062                           126          ; Comparing registers at this point because modes are the same
00001062  B03C 0000                127          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001066  6700 0326                128          Beq     EA_WORD_ADDR
0000106A                           129          
0000106A  B03C 0001                130          Cmp.B   #Long_Reg, D0           ; (xxx).L
0000106E  6700 03BA                131          Beq     EA_LONG_ADDR
00001072                           132          
00001072  B03C 0004                133          Cmp.B   #Imm_Reg, D0            ; #<data>
00001076  6700 004C                134          Beq     EA_MOVE_SIZE
0000107A                           135          
0000107A  4E75                     136          Rts
0000107C                           137          
0000107C                           138  EA_MOVE_DEST    ; Find out Move's destination
0000107C  4EB9 0000156C            139          Jsr     GET6TO8                 ; Get destination mode
00001082  1A00                     140          Move.B  D0, D5                  ; Move destination mode to D5
00001084  4EB9 0000155A            141          Jsr     GET9TO11                ; Get destination register
0000108A                           142          
0000108A                           143          ; List of valid effective addresses
0000108A  BA3C 0000                144          Cmp.B   #Dn_Mode, D5            ; Dn
0000108E  6700 02A2                145          Beq     EA_DN
00001092                           146          
00001092  BA3C 0001                147          Cmp.B   #An_Mode, D5            ; An
00001096  6700 02A6                148          Beq     EA_AN
0000109A                           149          
0000109A  BA3C 0002                150          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000109E  6700 02AA                151          Beq     EA_AN_PNTR
000010A2                           152          
000010A2  BA3C 0003                153          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000010A6  6700 02B6                154          Beq     EA_AN_INC
000010AA                           155          
000010AA  BA3C 0004                156          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000010AE  6700 02C6                157          Beq     EA_AN_DEC
000010B2                           158          
000010B2                           159          ; Comparing registers at this point because modes are the same
000010B2  B03C 0000                160          Cmp.B   #Word_Reg, D0           ; (xxx).W
000010B6  6700 02D6                161          Beq     EA_WORD_ADDR
000010BA                           162          
000010BA  B03C 0001                163          Cmp.B   #Long_Reg, D0           ; (xxx).L
000010BE  6700 036A                164          Beq     EA_LONG_ADDR
000010C2                           165          
000010C2  4E75                     166          Rts
000010C4                           167          
000010C4                           168  EA_MOVE_SIZE    ; Find the size of immediate data being moved
000010C4  4EB9 00001548            169          Jsr     GET12TO13               ; Get Move size
000010CA                           170  
000010CA  B03C 0001                171          Cmp.B   #%01, D0                ; Byte
000010CE  6700 043C                172          Beq     EA_IMM_BYTE
000010D2                           173  
000010D2  B03C 0003                174          Cmp.B   #%11, D0                ; Word
000010D6  6700 0444                175          Beq     EA_IMM_WORD
000010DA                           176          
000010DA  B03C 0002                177          Cmp.B   #%10, D0                ; Long
000010DE  6700 044C                178          Beq     EA_IMM_LONG
000010E2                           179          
000010E2  4E75                     180          Rts
000010E4                           181  
000010E4                           182  ;===========================================;        
000010E4                           183  ;--------------- EA Add/AddA ---------------;
000010E4                           184  ;===========================================;       
000010E4                           185  EA_ADD  ; Figures out the EA for Add        
000010E4  4EB9 0000156C            186          Jsr     GET6TO8                 ; Isolate the Op mode
000010EA                           187          
000010EA  B03C 0003                188          Cmp.B   #%011, D0               ; Compare to AddA word
000010EE  6700 0028                189          Beq     EA_ADDA
000010F2                           190          
000010F2  B03C 0007                191          Cmp.B   #%111, D0               ; Compare to AddA long
000010F6  6700 0020                192          Beq     EA_ADDA
000010FA                           193  
000010FA  B03C 0000                194          Cmp.B   #%000, D0               ; Compare to Add source byte
000010FE  6700 002E                195          Beq     EA_ADD_OPMODE_SOURCE
00001102                           196          
00001102  B03C 0001                197          Cmp.B   #%001, D0               ; Compare to Add source word
00001106  6700 0026                198          Beq     EA_ADD_OPMODE_SOURCE
0000110A                           199          
0000110A  B03C 0002                200          Cmp.B   #%010, D0               ; Compare to Add source Long
0000110E  6700 001E                201          Beq     EA_ADD_OPMODE_SOURCE
00001112                           202          
00001112  4EF9 00001144            203          Jmp     EA_ADD_OPMODE_DEST      ; Must be an Add destination if none of the above
00001118                           204          
00001118                           205  EA_ADDA ; Figures out the EA for AddA
00001118  4EB9 0000115A            206          Jsr     EA_ADD_SOURCE           ; Get the source EA
0000111E  1CFC 002C                207          Move.B  #',', (A6)+             ; Add a comma
00001122  4EB9 0000155A            208          Jsr     GET9TO11                ; Get the register
00001128  4EB9 0000133E            209          Jsr     EA_AN                   ; Add An
0000112E                           210          
0000112E                           211          ; <Next instruction>
0000112E                           212          
0000112E                           213  EA_ADD_OPMODE_SOURCE    ; Finds the EA for Add if it is for the source
0000112E  4EB9 0000115A            214          Jsr     EA_ADD_SOURCE           ; Get the source EA
00001134  1CFC 002C                215          Move.B  #',', (A6)+             ; Add a comma
00001138  4EB9 0000155A            216          Jsr     GET9TO11                ; Get the register
0000113E  4EB9 00001332            217          Jsr     EA_DN                   ; Add Dn
00001144                           218          
00001144                           219          ; <Next instruction>
00001144                           220          
00001144                           221  EA_ADD_OPMODE_DEST      ; Finds the EA for Add if it is for the destination
00001144  4EB9 0000155A            222          Jsr     GET9TO11                ; Get the register
0000114A  4EB9 00001332            223          Jsr     EA_DN                   ; Add Dn
00001150  1CFC 002C                224          Move.B  #',', (A6)+             ; Add a comma
00001154  4EB9 000011AA            225          Jsr     EA_ADD_DEST             ; Get the destination EA 
0000115A                           226          
0000115A                           227          ; <Next instruction>
0000115A                           228  
0000115A                           229  EA_ADD_SOURCE   ; Find out Add source
0000115A  4EB9 0000157E            230          Jsr     GET3TO5                 ; Get source mode
00001160  1A00                     231          Move.B  D0, D5                  ; Move source mode to D5
00001162  4EB9 00001590            232          Jsr     Get0TO2                 ; Get source register
00001168                           233          
00001168                           234          ; List of valid effective addresses
00001168  BA3C 0000                235          Cmp.B   #Dn_Mode, D5            ; Dn
0000116C  6700 01C4                236          Beq     EA_DN
00001170                           237          
00001170  BA3C 0001                238          Cmp.B   #An_Mode, D5            ; An
00001174  6700 01C8                239          Beq     EA_AN
00001178                           240          
00001178  BA3C 0002                241          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000117C  6700 01CC                242          Beq     EA_AN_PNTR
00001180                           243          
00001180  BA3C 0003                244          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001184  6700 01D8                245          Beq     EA_AN_INC
00001188                           246          
00001188  BA3C 0004                247          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000118C  6700 01E8                248          Beq     EA_AN_DEC
00001190                           249          
00001190                           250          ; Comparing registers at this point because modes are the same
00001190  B03C 0000                251          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001194  6700 01F8                252          Beq     EA_WORD_ADDR
00001198                           253          
00001198  B03C 0001                254          Cmp.B   #Long_Reg, D0           ; (xxx).L
0000119C  6700 028C                255          Beq     EA_LONG_ADDR
000011A0                           256          
000011A0  B03C 0004                257          Cmp.B   #Imm_Reg, D0            ; #<data>
000011A4  6700 003C                258          Beq     EA_ADD_SIZE
000011A8                           259          
000011A8  4E75                     260          Rts
000011AA                           261          
000011AA                           262  EA_ADD_DEST ; Find out Add destination
000011AA  4EB9 0000157E            263          Jsr     GET3TO5                 ; Get destination mode
000011B0  1A00                     264          Move.B  D0, D5                  ; Move destination mode to D5
000011B2  4EB9 00001590            265          Jsr     Get0TO2                 ; Get destination register
000011B8                           266          
000011B8                           267          ; List of valid effective addresses
000011B8  BA3C 0002                268          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000011BC  6700 018C                269          Beq     EA_AN_PNTR
000011C0                           270          
000011C0  BA3C 0003                271          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000011C4  6700 0198                272          Beq     EA_AN_INC
000011C8                           273          
000011C8  BA3C 0004                274          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000011CC  6700 01A8                275          Beq     EA_AN_DEC
000011D0                           276          
000011D0                           277          ; Comparing registers at this point because modes are the same
000011D0  B03C 0000                278          Cmp.B   #Word_Reg, D0           ; (xxx).W
000011D4  6700 01B8                279          Beq     EA_WORD_ADDR
000011D8                           280          
000011D8  B03C 0001                281          Cmp.B   #Long_Reg, D0           ; (xxx).L
000011DC  6700 024C                282          Beq     EA_LONG_ADDR
000011E0                           283                  
000011E0  4E75                     284          Rts
000011E2                           285          
000011E2                           286  EA_ADD_SIZE ; Find the size of immediate data being moved
000011E2  4EB9 0000156C            287          Jsr     GET6TO8                 ; Get Move size
000011E8                           288  
000011E8  B03C 0000                289          Cmp.B   #%000, D0               ; Byte
000011EC  6700 031E                290          Beq     EA_IMM_BYTE
000011F0                           291  
000011F0  B03C 0001                292          Cmp.B   #%001, D0               ; Word
000011F4  6700 0326                293          Beq     EA_IMM_WORD
000011F8                           294          
000011F8  B03C 0002                295          Cmp.B   #%010, D0               ; Long
000011FC  6700 032E                296          Beq     EA_IMM_LONG
00001200                           297          
00001200  B03C 0003                298          Cmp.B   #%011, D0               ; AddA Word
00001204  6700 0316                299          Beq     EA_IMM_WORD
00001208                           300     
00001208  B03C 0007                301          Cmp.B   #%111, D0               ; AddA Long
0000120C  6700 031E                302          Beq     EA_IMM_LONG
00001210                           303          
00001210  4E75                     304          Rts
00001212                           305          
00001212                           306  ;=========================================================;        
00001212                           307  ;---------------------- EA Sub/SubA ----------------------;
00001212                           308  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001212                           309  ; Sub/SubA are exactly the same.
00001212                           310  ;=========================================================;
00001212                           311  EA_SUB
00001212  4EF8 10E4                312          Jmp     EA_ADD
00001216                           313  
00001216                           314  ;=========================================================;        
00001216                           315  ;---------------------- EA Cmp/CmpA ----------------------;
00001216                           316  ; Jumps straight to EA_ADD because the EA for Add/AddA and
00001216                           317  ; Cmp/CmpA are exactly the same.
00001216                           318  ;=========================================================;
00001216                           319  EA_CMP       
00001216  4EF8 10E4                320          Jmp     EA_ADD
0000121A                           321  
0000121A                           322  ;=========================================================;
0000121A                           323  ;--------------------- EA Bit Shift ----------------------;
0000121A                           324  ; Finds the EA for ASd, LSd, ROd. All of these OP codes
0000121A                           325  ; are combined because the EA for each code is exactly the
0000121A                           326  ; same.
0000121A                           327  ;=========================================================;
0000121A                           328  EA_BIT_SHIFT    ; Figures out the EA for bit shift functions
0000121A  4EB9 000015B4            329          Jsr     GET6TO7
00001220                           330          
00001220  B03C 0003                331          Cmp.B   #%11, D0                ; If bits 6 and 7 are not %11, then we are shifting a register
00001224  6600 0040                332          Bne     EA_SHIFT_REGISTER
00001228                           333          
00001228  4EB9 0000122E            334          Jsr     EA_SHIFT_MEMORY         ; If bits 6 and 7 are %11, then we are shifting memory
0000122E                           335          
0000122E                           336          ; <Next instruction>
0000122E                           337                  
0000122E                           338  EA_SHIFT_MEMORY ; Adds the correct EA for a memory shift
0000122E  4EB9 0000157E            339          Jsr     GET3TO5                 ; Get source mode
00001234  1A00                     340          Move.B  D0, D5                  ; Move source mode to D5
00001236  4EB9 00001590            341          Jsr     Get0TO2                 ; Get source register
0000123C                           342          
0000123C                           343          ; List of valid effective addresses        
0000123C  BA3C 0002                344          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001240  6700 0108                345          Beq     EA_AN_PNTR
00001244                           346          
00001244  BA3C 0003                347          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001248  6700 0114                348          Beq     EA_AN_INC
0000124C                           349          
0000124C  BA3C 0004                350          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001250  6700 0124                351          Beq     EA_AN_DEC
00001254                           352          
00001254                           353          ; Comparing registers at this point because modes are the same
00001254  B03C 0000                354          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001258  6700 0134                355          Beq     EA_WORD_ADDR
0000125C                           356          
0000125C  B03C 0001                357          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001260  6700 01C8                358          Beq     EA_LONG_ADDR
00001264                           359          
00001264  4E75                     360          Rts
00001266                           361          
00001266                           362  EA_SHIFT_REGISTER   ; Figure out if we are shifting by #<data> or by the value in a data register
00001266  4EB9 000015C6            363          Jsr     GETBIT5
0000126C                           364          
0000126C  B03C 0000                365          Cmp.B   #0, D0                  ; Check if bit 5 is %0
00001270  6700 0008                366          Beq     EA_SHIFT_CHECK_8
00001274                           367          
00001274  4EF9 000012A2            368          Jmp     EA_SHIFT_DN             ; If it's not, we are shifting from a data register
0000127A                           369          
0000127A                           370  EA_SHIFT_CHECK_8    ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
0000127A  4EB9 0000155A            371          Jsr     GET9TO11                ; Isolate the count/register bits
00001280                           372          
00001280  B03C 0000                373          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
00001284  6E00 000C                374          Bgt     EA_SHIFT_IMMEDIATE
00001288                           375          
00001288  103C 0008                376          Move.B  #8, D0                  ; Else, use 8 as the immediate value
0000128C                           377                  
0000128C  4EF9 00001292            378          Jmp     EA_SHIFT_IMMEDIATE
00001292                           379          
00001292                           380  EA_SHIFT_IMMEDIATE  ; Adds an immediate value before the comma
00001292  1CFC 0023                381          Move.B  #'#', (A6)+
00001296  0600 0030                382          Add.B   #$30, D0
0000129A  1CC0                     383          Move.B  D0, (A6)+               ; Add the immediate value to the string
0000129C                           384  
0000129C  4EF9 000012B4            385          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it
000012A2                           386          
000012A2                           387  EA_SHIFT_DN ; Adds a data register before the comma
000012A2  4EB9 0000155A            388          Jsr     GET9TO11                ; Isolate the data register bits
000012A8                           389          
000012A8  4EB9 00001332            390          Jsr     EA_DN                   ; Add the data register to the string
000012AE                           391          
000012AE  4EF9 000012B4            392          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it 
000012B4                           393          
000012B4                           394  EA_SHIFT_COMMA  ; Adds the comma and everything after it to the string
000012B4  1CFC 002C                395          Move.B  #',', (A6)+
000012B8                           396          
000012B8  4EB9 00001590            397          Jsr     GET0TO2                 ; Get the register number
000012BE                           398          
000012BE  4EB9 00001332            399          Jsr     EA_DN                   ; Add the register
000012C4                           400          
000012C4                           401          ; <Next instruction>
000012C4                           402  
000012C4                           403  ;============================================;        
000012C4                           404  ;--------------- EA Immediate ---------------;
000012C4                           405  ;============================================;
000012C4                           406  EA_IMMEDIATE    ; Figures out the EA for immediate data OP codes
000012C4  4EB9 000012D4            407          Jsr     EA_IMMEDIATE_SIZE       ; Get the size of the immediate data and add to string
000012CA  1CFC 002C                408          Move.B  #',', (A6)+             ; Add a comma
000012CE  4EB9 000012F4            409          Jsr     EA_IMMEDIATE_DEST       ; Add the destination EA
000012D4                           410          
000012D4                           411          ; <Next instruction>
000012D4                           412          
000012D4                           413  EA_IMMEDIATE_SIZE   ; Determines the size of the immediate data and adds it
000012D4  4EB9 000015B4            414          Jsr     GET6TO7                 ; Isolate the size bits
000012DA                           415                  
000012DA  B03C 0001                416          Cmp.B   #%01, D0                ; Immediate word
000012DE  6700 023C                417          Beq     EA_IMM_WORD
000012E2                           418          
000012E2  B03C 0002                419          Cmp.B   #%10, D0                ; Immediate long
000012E6  6700 0244                420          Beq     EA_IMM_LONG
000012EA                           421          
000012EA  524B                     422          AddA.W  #1, A3                  ; Else, move the pointer forward by a byte get the next byte
000012EC  4EF9 0000150C            423          Jmp     EA_IMM_BYTE
000012F2                           424          
000012F2  4E75                     425          Rts
000012F4                           426          
000012F4                           427  EA_IMMEDIATE_DEST   ; Determines the destination EA
000012F4  4EB9 0000157E            428          Jsr     GET3TO5                 ; Get source mode
000012FA  1A00                     429          Move.B  D0, D5                  ; Move source mode to D5
000012FC  4EB9 00001590            430          Jsr     Get0TO2                 ; Get source register
00001302                           431       
00001302                           432          ; List of valid effective addresses
00001302  BA3C 0000                433          Cmp.B   #Dn_Mode, D5            ; Dn
00001306  6700 002A                434          Beq     EA_DN
0000130A                           435          
0000130A  BA3C 0002                436          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000130E  6700 003A                437          Beq     EA_AN_PNTR
00001312                           438          
00001312  BA3C 0003                439          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001316  6700 0046                440          Beq     EA_AN_INC
0000131A                           441          
0000131A  BA3C 0004                442          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000131E  6700 0056                443          Beq     EA_AN_DEC
00001322                           444          
00001322                           445          ; Comparing registers at this point because modes are the same
00001322  B03C 0000                446          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001326  6700 0066                447          Beq     EA_WORD_ADDR
0000132A                           448          
0000132A  B03C 0001                449          Cmp.B   #Long_Reg, D0           ; (xxx).L
0000132E  6700 00FA                450          Beq     EA_LONG_ADDR
00001332                           451                 
00001332                           452  ;==========================================;        
00001332                           453  ;---------- General EA functions ----------;
00001332                           454  ;==========================================;
00001332                           455  EA_DN   ; Adds Dn EA to string
00001332  1CFC 0044                456          Move.B  #'D', (A6)+             
00001336  0600 0030                457          Add.B   #$30, D0        
0000133A  1CC0                     458          Move.B  D0, (A6)+               
0000133C                           459                  
0000133C  4E75                     460          Rts
0000133E                           461  
0000133E                           462  EA_AN   ; Adds An EA to string
0000133E  1CFC 0041                463          Move.B  #'A', (A6)+
00001342  0600 0030                464          Add.B   #$30, D0    
00001346  1CC0                     465          Move.B  D0, (A6)+               
00001348                           466                  
00001348  4E75                     467          Rts
0000134A                           468  
0000134A                           469  EA_AN_PNTR  ; Adds (An) EA to string
0000134A  1CFC 0028                470          Move.B  #'(', (A6)+
0000134E  1CFC 0041                471          Move.B  #'A', (A6)+
00001352  0600 0030                472          Add.B   #$30, D0
00001356  1CC0                     473          Move.B  D0, (A6)+
00001358  1CFC 0029                474          Move.B  #')', (A6)+
0000135C                           475                  
0000135C  4E75                     476          Rts
0000135E                           477          
0000135E                           478  EA_AN_INC   ; Adds (An)+ EA to string
0000135E  1CFC 0028                479          Move.B  #'(', (A6)+
00001362  1CFC 0041                480          Move.B  #'A', (A6)+
00001366  0600 0030                481          Add.B   #$30, D0
0000136A  1CC0                     482          Move.B  D0, (A6)+
0000136C  1CFC 0029                483          Move.B  #')', (A6)+
00001370  1CFC 002B                484          Move.B  #'+', (A6)+
00001374                           485                  
00001374  4E75                     486          Rts 
00001376                           487          
00001376                           488  EA_AN_DEC   ; Adds -(An) EA to string
00001376  1CFC 002D                489          Move.B  #'-', (A6)+
0000137A  1CFC 0028                490          Move.B  #'(', (A6)+
0000137E  1CFC 0041                491          Move.B  #'A', (A6)+
00001382  0600 0030                492          Add.B   #$30, D0
00001386  1CC0                     493          Move.B  D0, (A6)+
00001388  1CFC 0029                494          Move.B  #')', (A6)+
0000138C                           495                  
0000138C  4E75                     496          Rts 
0000138E                           497  
0000138E                           498  EA_WORD_ADDR    ; Adds $Word to string
0000138E  3C1B                     499          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
00001390                           500          
00001390  1CFC 0024                501          Move.B  #'$', (A6)+
00001394                           502          
00001394  BC7C 8000                503          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001398  6E00 000C                504          Bgt     EA_SIGN_EXT_16
0000139C                           505          
0000139C  BC7C 8000                506          Cmp.W   #$8000, D6          ; Word address is greater than 8000
000013A0  6F00 001C                507          Ble     EA_SIGN_EXT_32
000013A4                           508          
000013A4  4E75                     509          Rts
000013A6                           510                  
000013A6                           511  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
000013A6  1CFC 0030                512          Move.B  #'0', (A6)+
000013AA  1CFC 0030                513          Move.B  #'0', (A6)+
000013AE  1CFC 0030                514          Move.B  #'0', (A6)+
000013B2  1CFC 0030                515          Move.B  #'0', (A6)+
000013B6                           516          
000013B6  4EB9 000013D6            517          Jsr     EA_WORD_TO_STRING       
000013BC                           518          
000013BC  4E75                     519          Rts
000013BE                           520  
000013BE                           521  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
000013BE  1CFC 0046                522          Move.B  #'F', (A6)+
000013C2  1CFC 0046                523          Move.B  #'F', (A6)+
000013C6  1CFC 0046                524          Move.B  #'F', (A6)+
000013CA  1CFC 0046                525          Move.B  #'F', (A6)+
000013CE                           526          
000013CE  4EB9 000013D6            527          Jsr     EA_WORD_TO_STRING   
000013D4                           528          
000013D4  4E75                     529          Rts
000013D6                           530          
000013D6                           531  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
000013D6  4280                     532          Clr.L   D0              ; Clear D0
000013D8  3006                     533          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
000013DA                           534  
000013DA  123C 000C                535          Move.B  #12, D1         ; Grab bits 12 to 15
000013DE  E268                     536          Lsr     D1, D0
000013E0  0600 0030                537          Add.B   #$30, D0
000013E4  1CC0                     538          Move.B  D0, (A6)+
000013E6                           539          
000013E6  4280                     540          Clr.L   D0
000013E8  3006                     541          Move.W  D6, D0
000013EA                           542          
000013EA  123C 0004                543          Move.B  #4, D1          ; Grab bits 8 to 11
000013EE  E368                     544          Lsl     D1, D0
000013F0  123C 000C                545          Move.B  #12, D1
000013F4  E268                     546          Lsr     D1, D0  
000013F6  0600 0030                547          Add.B   #$30, D0
000013FA  1CC0                     548          Move.B  D0, (A6)+
000013FC                           549          
000013FC  4280                     550          Clr.L   D0
000013FE  3006                     551          Move.W  D6, D0
00001400                           552          
00001400  123C 0008                553          Move.B  #8, D1          ; Grab bits 4 to 7
00001404  E368                     554          Lsl     D1, D0
00001406  123C 000C                555          Move.B  #12, D1
0000140A  E268                     556          Lsr     D1, D0
0000140C  0600 0030                557          Add.B   #$30, D0
00001410  1CC0                     558          Move.B  D0, (A6)+
00001412                           559          
00001412  4280                     560          Clr.L   D0
00001414  3006                     561          Move.W  D6, D0
00001416                           562          
00001416  123C 000C                563          Move.B  #12, D1         ; Grab bits 0 to 3
0000141A  E368                     564          Lsl     D1, D0
0000141C  123C 000C                565          Move.B  #12, D1
00001420  E268                     566          Lsr     D1, D0
00001422  0600 0030                567          Add.B   #$30, D0
00001426  1CC0                     568          Move.B  D0, (A6)+
00001428                           569          
00001428  4E75                     570          Rts
0000142A                           571          
0000142A                           572  EA_LONG_ADDR    ; Adds $Long to string
0000142A  2C1B                     573          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
0000142C                           574          
0000142C  1CFC 0024                575          Move.B  #'$', (A6)+
00001430                           576          
00001430  4EB9 00001438            577          Jsr     EA_LONG_TO_STRING
00001436                           578  
00001436  4E75                     579          Rts
00001438                           580                  
00001438                           581  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
00001438  4280                     582          Clr.L   D0              ; Clear D0
0000143A  2006                     583          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
0000143C                           584  
0000143C  123C 001C                585          Move.B  #28, D1         ; Grab bits 28 to 31
00001440  E2A8                     586          Lsr.L   D1, D0
00001442  0600 0030                587          Add.B   #$30, D0
00001446  1CC0                     588          Move.B  D0, (A6)+
00001448                           589          
00001448  4280                     590          Clr.L   D0             
0000144A  2006                     591          Move.L  D6, D0          
0000144C                           592          
0000144C  123C 0004                593          Move.B  #4, D1          ; Grab bits 24 to 27
00001450  E3A8                     594          Lsl.L   D1, D0
00001452  123C 001C                595          Move.B  #28, D1
00001456  E2A8                     596          Lsr.L   D1, D0
00001458  0600 0030                597          Add.B   #$30, D0
0000145C  1CC0                     598          Move.B  D0, (A6)+
0000145E                           599          
0000145E  4280                     600          Clr.L   D0             
00001460  2006                     601          Move.L  D6, D0
00001462                           602  
00001462  123C 0008                603          Move.B  #8, D1          ; Grab bits 20 to 23
00001466  E3A8                     604          Lsl.L   D1, D0
00001468  123C 001C                605          Move.B  #28, D1
0000146C  E2A8                     606          Lsr.L   D1, D0
0000146E  0600 0030                607          Add.B   #$30, D0
00001472  1CC0                     608          Move.B  D0, (A6)+
00001474                           609          
00001474  4280                     610          Clr.L   D0             
00001476  2006                     611          Move.L  D6, D0
00001478                           612  
00001478  123C 000C                613          Move.B  #12, D1         ; Grab bits 16 to 19
0000147C  E3A8                     614          Lsl.L   D1, D0
0000147E  123C 001C                615          Move.B  #28, D1
00001482  E2A8                     616          Lsr.L   D1, D0
00001484  0600 0030                617          Add.B   #$30, D0
00001488  1CC0                     618          Move.B  D0, (A6)+
0000148A                           619          
0000148A  4280                     620          Clr.L   D0             
0000148C  2006                     621          Move.L  D6, D0
0000148E                           622  
0000148E  123C 0010                623          Move.B  #16, D1         ; Grab bits 12 to 15
00001492  E3A8                     624          Lsl.L   D1, D0
00001494  123C 001C                625          Move.B  #28, D1
00001498  E2A8                     626          Lsr.L   D1, D0
0000149A  0600 0030                627          Add.B   #$30, D0
0000149E  1CC0                     628          Move.B  D0, (A6)+
000014A0                           629          
000014A0  4280                     630          Clr.L   D0             
000014A2  2006                     631          Move.L  D6, D0
000014A4                           632          
000014A4  123C 0014                633          Move.B  #20, D1         ; Grab bits 8 to 11
000014A8  E3A8                     634          Lsl.L   D1, D0
000014AA  123C 001C                635          Move.B  #28, D1
000014AE  E2A8                     636          Lsr.L   D1, D0
000014B0  0600 0030                637          Add.B   #$30, D0
000014B4  1CC0                     638          Move.B  D0, (A6)+
000014B6                           639          
000014B6  4280                     640          Clr.L   D0             
000014B8  2006                     641          Move.L  D6, D0
000014BA                           642  
000014BA  123C 0018                643          Move.B  #24, D1         ; Grab bits 4 to 7
000014BE  E3A8                     644          Lsl.L   D1, D0
000014C0  123C 001C                645          Move.B  #28, D1
000014C4  E2A8                     646          Lsr.L   D1, D0
000014C6  0600 0030                647          Add.B   #$30, D0
000014CA  1CC0                     648          Move.B  D0, (A6)+
000014CC                           649          
000014CC  4280                     650          Clr.L   D0             
000014CE  2006                     651          Move.L  D6, D0
000014D0                           652  
000014D0  123C 001C                653          Move.B  #28, D1         ; Grab bits 0 to 3
000014D4  E3A8                     654          Lsl.L   D1, D0
000014D6  123C 001C                655          Move.B  #28, D1
000014DA  E2A8                     656          Lsr.L   D1, D0
000014DC  0600 0030                657          Add.B   #$30, D0
000014E0  1CC0                     658          Move.B  D0, (A6)+
000014E2                           659          
000014E2  4E75                     660          Rts
000014E4                           661          
000014E4                           662  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
000014E4  4280                     663          Clr.L   D0              ; Clear D0
000014E6  2006                     664          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
000014E8                           665  
000014E8  123C 0004                666          Move.B  #4, D1          ; Grab bits 4 to 7
000014EC  E228                     667          Lsr.B   D1, D0
000014EE  0600 0030                668          Add.B   #$30, D0
000014F2  1CC0                     669          Move.B  D0, (A6)+
000014F4                           670          
000014F4  4280                     671          Clr.L   D0             
000014F6  2006                     672          Move.L  D6, D0          
000014F8                           673          
000014F8  123C 0004                674          Move.B  #4, D1          ; Grab bits 0 to 3
000014FC  E328                     675          Lsl.B   D1, D0
000014FE  123C 0004                676          Move.B  #4, D1
00001502  E228                     677          Lsr.B   D1, D0
00001504  0600 0030                678          Add.B   #$30, D0
00001508  1CC0                     679          Move.B  D0, (A6)+
0000150A                           680          
0000150A  4E75                     681          Rts
0000150C                           682  
0000150C                           683  EA_IMM_BYTE ; Finds the immediate byte data
0000150C  1C1B                     684          Move.B  (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
0000150E                           685          
0000150E  1CFC 0023                686          Move.B  #'#', (A6)+         
00001512  1CFC 0024                687          Move.B  #'$', (A6)+         
00001516                           688          
00001516  4EB8 14E4                689          Jsr     EA_BYTE_TO_STRING    ; Add the byte to the string
0000151A                           690          
0000151A  4E75                     691          Rts
0000151C                           692                  
0000151C                           693  EA_IMM_WORD ; Finds the immediate word data
0000151C  3C1B                     694          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
0000151E                           695          
0000151E  1CFC 0023                696          Move.B  #'#', (A6)+         
00001522  1CFC 0024                697          Move.B  #'$', (A6)+         
00001526                           698          
00001526  4EB8 13D6                699          Jsr     EA_WORD_TO_STRING    ; Add the word to the string
0000152A                           700          
0000152A  4E75                     701          Rts
0000152C                           702          
0000152C                           703  EA_IMM_LONG ; Finds the immediate long data
0000152C  2C1B                     704          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
0000152E                           705          
0000152E  1CFC 0023                706          Move.B  #'#', (A6)+
00001532  1CFC 0024                707          Move.B  #'$', (A6)+
00001536                           708          
00001536  4EB8 1438                709          Jsr     EA_LONG_TO_STRING    ; Add the long to the string
0000153A                           710          
0000153A  4E75                     711          Rts
0000153C                           712  
0000153C                           713  ;===========================================================;       
0000153C                           714  ;---------------- Bit Chopping Sub Routines ----------------;
0000153C                           715  ; These Sub Routines Chop a WORD size piece of data from
0000153C                           716  ; Data register 4 into a smaller piece, leaving just the
0000153C                           717  ; Piece in register 0 while leaving the original piece
0000153C                           718  ; of data intact.
0000153C                           719  ;===========================================================;
0000153C                           720  GET12TO15
0000153C  4280                     721          CLR.L   D0
0000153E  3004                     722          Move.W  D4, D0
00001540                           723                  
00001540  123C 000C                724          Move.B  #12, D1
00001544  E268                     725          LSR     D1, D0
00001546                           726                  
00001546  4E75                     727          RTS
00001548                           728  
00001548                           729  GET12TO13
00001548  4280                     730          CLR.L   D0
0000154A  3004                     731          Move.W  D4, D0
0000154C                           732          
0000154C  123C 0002                733          Move.B  #2, D1
00001550  E368                     734          LSL     D1, D0
00001552                           735          
00001552  123C 000E                736          Move.B  #14, D1
00001556  E268                     737          LSR     D1, D0
00001558                           738          
00001558  4E75                     739          RTS
0000155A                           740                  
0000155A                           741  GET9TO11        
0000155A  4280                     742          CLR.L   D0
0000155C  3004                     743          Move.W  D4, D0
0000155E                           744                  
0000155E  123C 0004                745          Move.B  #4, D1
00001562  E368                     746          LSL     D1, D0
00001564                           747                  
00001564  123C 000D                748          Move.B  #13, D1
00001568  E268                     749          LSR     D1, D0
0000156A                           750                  
0000156A  4E75                     751          RTS
0000156C                           752                  
0000156C                           753  GET6TO8 
0000156C  4280                     754          CLR.L   D0
0000156E  3004                     755          Move.W  D4, D0
00001570                           756                  
00001570  123C 0007                757          Move.B  #7, D1
00001574  E368                     758          LSL     D1, D0
00001576                           759                  
00001576  123C 000D                760          Move.B  #13, D1
0000157A  E268                     761          LSR     D1, D0
0000157C                           762                  
0000157C  4E75                     763          RTS
0000157E                           764                  
0000157E                           765  GET3TO5 
0000157E  4280                     766          CLR.L   D0
00001580  3004                     767          Move.W  D4, D0
00001582                           768                  
00001582  123C 000A                769          Move.B  #10, D1
00001586  E368                     770          LSL     D1, D0
00001588                           771                  
00001588  123C 000D                772          Move.B  #13, D1
0000158C  E268                     773          LSR     D1, D0
0000158E                           774                  
0000158E  4E75                     775          RTS
00001590                           776  GET0TO2 
00001590  4280                     777          CLR.L   D0
00001592  3004                     778          Move.W  D4, D0
00001594                           779                  
00001594  123C 000D                780          Move.B  #13, D1
00001598  E368                     781          LSL     D1, D0
0000159A                           782                  
0000159A  123C 000D                783          Move.B  #13, D1
0000159E  E268                     784          LSR     D1, D0
000015A0                           785                  
000015A0  4E75                     786          RTS
000015A2                           787  GETBIT8
000015A2  4280                     788          CLR.L   D0
000015A4  3004                     789          Move.W  D4, D0
000015A6                           790                  
000015A6  123C 0007                791          Move.B  #7, D1
000015AA  E368                     792          LSL     D1, D0
000015AC                           793                  
000015AC  123C 000F                794          Move.B  #15, D1
000015B0  E268                     795          LSR     D1, D0
000015B2                           796                  
000015B2  4E75                     797          RTS 
000015B4                           798          
000015B4                           799  GET6TO7
000015B4  4280                     800          Clr.L   D0
000015B6  3004                     801          Move.W  D4, D0
000015B8                           802          
000015B8  123C 0008                803          Move.B  #8, D1
000015BC  E368                     804          Lsl     D1, D0
000015BE                           805          
000015BE  123C 000E                806          Move.B  #14, D1
000015C2  E268                     807          Lsr     D1, D0
000015C4                           808          
000015C4  4E75                     809          Rts
000015C6                           810          
000015C6                           811  GETBIT5
000015C6  4280                     812          Clr.L   D0
000015C8  3004                     813          Move.W  D4, D0
000015CA                           814          
000015CA  123C 000A                815          Move.B  #10, D1
000015CE  E368                     816          Lsl     D1, D0
000015D0                           817          
000015D0  123C 000F                818          Move.B  #15, D1
000015D4  E268                     819          Lsr     D1, D0
000015D6                           820          
000015D6  4E75                     821          Rts
000015D8                           822  
000015D8                           823  
000015D8                           824      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_ADD              10E4
EA_ADDA             1118
EA_ADD_DEST         11AA
EA_ADD_OPMODE_DEST  1144
EA_ADD_OPMODE_SOURCE  112E
EA_ADD_SIZE         11E2
EA_ADD_SOURCE       115A
EA_AN               133E
EA_AN_DEC           1376
EA_AN_INC           135E
EA_AN_PNTR          134A
EA_BIT_SHIFT        121A
EA_BYTE_TO_STRING   14E4
EA_CMP              1216
EA_DN               1332
EA_IMMEDIATE        12C4
EA_IMMEDIATE_DEST   12F4
EA_IMMEDIATE_SIZE   12D4
EA_IMM_BYTE         150C
EA_IMM_LONG         152C
EA_IMM_WORD         151C
EA_LONG_ADDR        142A
EA_LONG_TO_STRING   1438
EA_MOVE             101C
EA_MOVE_DEST        107C
EA_MOVE_SIZE        10C4
EA_MOVE_SOURCE      102C
EA_SHIFT_CHECK_8    127A
EA_SHIFT_COMMA      12B4
EA_SHIFT_DN         12A2
EA_SHIFT_IMMEDIATE  1292
EA_SHIFT_MEMORY     122E
EA_SHIFT_REGISTER   1266
EA_SIGN_EXT_16      13A6
EA_SIGN_EXT_32      13BE
EA_SUB              1212
EA_WORD_ADDR        138E
EA_WORD_TO_STRING   13D6
GET0TO2             1590
GET12TO13           1548
GET12TO15           153C
GET3TO5             157E
GET6TO7             15B4
GET6TO8             156C
GET9TO11            155A
GETBIT5             15C6
GETBIT8             15A2
IMM_MODE            7
IMM_REG             4
IMM_TEST1           41F
IMM_TEST2           479
LONG_MODE           7
LONG_REG            1
SHIFT_TEST1         E1D7
SHIFT_TEST2         E1F8
SHIFT_TEST3         EF21
SHIFT_TEST4         E507
SHIFT_TEST5         E104
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
