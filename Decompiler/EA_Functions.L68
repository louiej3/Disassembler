00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/27/2014 12:55:13 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34  
00000000  =0000DEC1                 35  Add_Test1           EQU     %1101111011000001   ; AddA.W D1,A7
00000000  =0000D87C                 36  Add_Test2           EQU     %1101100001111100   ; Add.W #$Imm,D4
00000000  =0000DF57                 37  Add_Test3           EQU     %1101111101010111   ; Add.W D7,(A7)
00000000  =0000DFF9                 38  Add_Test4           EQU     %1101111111111001   ; AddA.L $Long,A7
00000000                            39  
00000000  =0000E1D7                 40  Shift_Test1         EQU     %1110000111010111   ; Asl (A7)
00000000  =0000E1F8                 41  Shift_Test2         EQU     %1110000111111000   ; Asl $Word
00000000  =0000EF21                 42  Shift_Test3         EQU     %1110111100100001   ; Asl.B D7,D1
00000000  =0000E507                 43  Shift_Test4         EQU     %1110010100000111   ; Asl.B #2,D7
00000000  =0000E104                 44  Shift_Test5         EQU     %1110000100000100   ; Asl.B #8,D4
00000000                            45  
00000000  =0000041F                 46  Imm_Test1           EQU     %0000010000011111   ; SubI.B #$Imm,(A7)+
00000000  =00000479                 47  Imm_Test2           EQU     %0000010001111001   ; SubI.W #$Imm,$Long
00000000                            48  
00000000  =00005E09                 49  AddQ_Test1          EQU     %0101111000001001   ; AddQ.B #7,A1
00000000  =00005009                 50  AddQ_Test2          EQU     %0101000000001001   ; AddQ.B #8,A1
00000000                            51          
00001000                            52      ORG    $1000
00001000                            53      
00001000                            54  START:                  ; first instruction of program
00001000  267C 00000400             55          Move.L  #$0000400, A3
00001006                            56          
00001006                            57          ;Move.W  #$0034, (A3)
00001006                            58          ;Move.W  #$4030, (A3)+
00001006  26BC 12345678             59          Move.L  #$12345678, (A3)
0000100C                            60          ;Sub.W   #2, A3
0000100C                            61          ;Move.L  #$12349999, (A3)
0000100C                            62          ;Move.W  #$11, (A3)
0000100C                            63          
0000100C                            64          ;Move.W  #Test_Move1, D4
0000100C                            65          ;Move.W  #Test_Move2, D4
0000100C                            66          ;Move.W  #Test_Move3, D4
0000100C                            67          ;Move.W  #Test_Move4, D4
0000100C                            68          ;Move.W  #Test_Move5, D4
0000100C                            69          ;Move.W  #Test_Move6, D4        
0000100C                            70          ;Move.W  #Test_Move7, D4        
0000100C                            71          ;Move.W  #Test_Move8, D4
0000100C                            72          
0000100C                            73          ;Move.W  #Add_Test1, D4
0000100C                            74          ;Move.W  #Add_Test2, D4
0000100C                            75          ;Move.W  #Add_Test3, D4
0000100C  383C DFF9                 76          Move.W  #Add_Test4, D4
00001010                            77          
00001010                            78          ;Move.W  #Shift_Test1, D4
00001010                            79          ;Move.W  #Shift_Test2, D4
00001010                            80          ;Move.W  #Shift_Test3, D4
00001010                            81          ;Move.W  #Shift_Test4, D4
00001010                            82          ;Move.W  #Shift_Test5, D4
00001010                            83          
00001010                            84          ;Move.W  #Imm_Test1, D4
00001010                            85          ;Move.W  #Imm_Test2, D4
00001010                            86          
00001010                            87          ;Move.W  #AddQ_Test1, D4
00001010                            88          ;Move.W  #AddQ_Test2, D4
00001010                            89                  
00001010                            90          ;Jmp     EA_MOVE     ; Branch to EA function for Move
00001010  4EF9 0000109E             91          Jmp     EA_ADD
00001016                            92          ;Jmp     EA_BIT_SHIFT
00001016                            93          ;Jmp     EA_IMMEDIATE
00001016                            94          ;Jmp     EA_ADDQ
00001016                            95  
00001016                            96  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
00001016                            97  ;-------------------- Effective Address Sub Routines --------------------;
00001016                            98  ; These subroutines look for the correct effective address
00001016                            99  ; in each OP code.
00001016                           100  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
00001016                           101  
00001016                           102  ;=============================================;
00001016                           103  ;--------------- EA Move/MoveA ---------------;
00001016                           104  ;=============================================;
00001016                           105  EA_MOVE
00001016  4EB9 00001026            106          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
0000101C  1CFC 002C                107          Move.B  #',', (A6)+             ; Add a comma
00001020  4EB9 00001036            108          Jsr     EA_MOVE_DEST            ; Add the EA for destination
00001026                           109          
00001026                           110          ; <Next instruction>
00001026                           111                  
00001026                           112  EA_MOVE_SOURCE  ; Find out Move's source
00001026  4EB9 00001506            113          Jsr     EA_0TO5                 ; Get the EA
0000102C                           114          
0000102C  B03C 0004                115          Cmp.B   #Imm_Reg, D0            ; #<data>
00001030  6700 004C                116          Beq     EA_MOVE_SIZE
00001034                           117          
00001034  4E75                     118          Rts
00001036                           119          
00001036                           120  EA_MOVE_DEST    ; Find out Move's destination
00001036  4EB9 0000157E            121          Jsr     GET6TO8                 ; Get destination mode
0000103C  1A00                     122          Move.B  D0, D5                  ; Move destination mode to D5
0000103E  4EB9 0000156C            123          Jsr     GET9TO11                ; Get destination register
00001044                           124          
00001044                           125          ; List of valid effective addresses
00001044  BA3C 0000                126          Cmp.B   #Dn_Mode, D5            ; Dn
00001048  6700 02B2                127          Beq     EA_DN
0000104C                           128          
0000104C  BA3C 0001                129          Cmp.B   #An_Mode, D5            ; An
00001050  6700 02B6                130          Beq     EA_AN
00001054                           131          
00001054  BA3C 0002                132          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001058  6700 02BA                133          Beq     EA_AN_PNTR
0000105C                           134          
0000105C  BA3C 0003                135          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001060  6700 02C6                136          Beq     EA_AN_INC
00001064                           137          
00001064  BA3C 0004                138          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001068  6700 02D6                139          Beq     EA_AN_DEC
0000106C                           140          
0000106C                           141          ; Comparing registers at this point because modes are the same
0000106C  B03C 0000                142          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001070  6700 02E6                143          Beq     EA_WORD_ADDR
00001074                           144          
00001074  B03C 0001                145          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001078  6700 037A                146          Beq     EA_LONG_ADDR
0000107C                           147          
0000107C  4E75                     148          Rts
0000107E                           149          
0000107E                           150  EA_MOVE_SIZE    ; Find the size of immediate data being moved
0000107E  4EB9 0000155A            151          Jsr     GET12TO13               ; Get Move size
00001084                           152  
00001084  B03C 0001                153          Cmp.B   #%01, D0                ; Byte
00001088  6700 044C                154          Beq     EA_IMM_BYTE
0000108C                           155  
0000108C  B03C 0003                156          Cmp.B   #%11, D0                ; Word
00001090  6700 0454                157          Beq     EA_IMM_WORD
00001094                           158          
00001094  B03C 0002                159          Cmp.B   #%10, D0                ; Long
00001098  6700 045C                160          Beq     EA_IMM_LONG
0000109C                           161          
0000109C  4E75                     162          Rts
0000109E                           163  
0000109E                           164  ;===========================================;        
0000109E                           165  ;--------------- EA Add/AddA ---------------;
0000109E                           166  ;===========================================;       
0000109E                           167  EA_ADD  ; Figures out the EA for Add        
0000109E  4EB9 0000157E            168          Jsr     GET6TO8                 ; Isolate the Op mode
000010A4                           169          
000010A4  B03C 0003                170          Cmp.B   #%011, D0               ; Compare to AddA word
000010A8  6700 0028                171          Beq     EA_ADDA
000010AC                           172          
000010AC  B03C 0007                173          Cmp.B   #%111, D0               ; Compare to AddA long
000010B0  6700 0020                174          Beq     EA_ADDA
000010B4                           175  
000010B4  B03C 0000                176          Cmp.B   #%000, D0               ; Compare to Add source byte
000010B8  6700 002E                177          Beq     EA_ADD_OPMODE_SOURCE
000010BC                           178          
000010BC  B03C 0001                179          Cmp.B   #%001, D0               ; Compare to Add source word
000010C0  6700 0026                180          Beq     EA_ADD_OPMODE_SOURCE
000010C4                           181          
000010C4  B03C 0002                182          Cmp.B   #%010, D0               ; Compare to Add source Long
000010C8  6700 001E                183          Beq     EA_ADD_OPMODE_SOURCE
000010CC                           184          
000010CC  4EF9 000010FE            185          Jmp     EA_ADD_OPMODE_DEST      ; Must be an Add destination if none of the above
000010D2                           186          
000010D2                           187  EA_ADDA ; Figures out the EA for AddA
000010D2  4EB9 00001114            188          Jsr     EA_ADD_ADDRESS          ; Get the source EA
000010D8  1CFC 002C                189          Move.B  #',', (A6)+             ; Add a comma
000010DC  4EB9 0000156C            190          Jsr     GET9TO11                ; Get the register
000010E2  4EB9 00001308            191          Jsr     EA_AN                   ; Add An
000010E8                           192          
000010E8                           193          ; <Next instruction>
000010E8                           194          
000010E8                           195  EA_ADD_OPMODE_SOURCE    ; Finds the EA for Add if it is for the source
000010E8  4EB9 00001114            196          Jsr     EA_ADD_ADDRESS          ; Get the source EA
000010EE  1CFC 002C                197          Move.B  #',', (A6)+             ; Add a comma
000010F2  4EB9 0000156C            198          Jsr     GET9TO11                ; Get the register
000010F8  4EB9 000012FC            199          Jsr     EA_DN                   ; Add Dn
000010FE                           200          
000010FE                           201          ; <Next instruction>
000010FE                           202          
000010FE                           203  EA_ADD_OPMODE_DEST      ; Finds the EA for Add if it is for the destination
000010FE  4EB9 0000156C            204          Jsr     GET9TO11                ; Get the register
00001104  4EB9 000012FC            205          Jsr     EA_DN                   ; Add Dn
0000110A  1CFC 002C                206          Move.B  #',', (A6)+             ; Add a comma
0000110E  4EB9 00001114            207          Jsr     EA_ADD_ADDRESS          ; Get the destination EA 
00001114                           208          
00001114                           209          ; <Next instruction>
00001114                           210          
00001114                           211  EA_ADD_ADDRESS
00001114  4EB9 00001506            212          Jsr     EA_0TO5
0000111A                           213          
0000111A  B03C 0004                214          Cmp.B   #Imm_Reg, D0            ; #<data>
0000111E  6700 0004                215          Beq     EA_ADD_SIZE
00001122                           216  
00001122  4E75                     217          Rts
00001124                           218          
00001124                           219  EA_ADD_SIZE ; Find the size of immediate data being moved
00001124  4EB9 0000157E            220          Jsr     GET6TO8                 ; Get Move size
0000112A                           221  
0000112A  B03C 0000                222          Cmp.B   #%000, D0               ; Byte
0000112E  6700 03A6                223          Beq     EA_IMM_BYTE
00001132                           224  
00001132  B03C 0001                225          Cmp.B   #%001, D0               ; Word
00001136  6700 03AE                226          Beq     EA_IMM_WORD
0000113A                           227          
0000113A  B03C 0002                228          Cmp.B   #%010, D0               ; Long
0000113E  6700 03B6                229          Beq     EA_IMM_LONG
00001142                           230          
00001142  B03C 0003                231          Cmp.B   #%011, D0               ; AddA Word
00001146  6700 039E                232          Beq     EA_IMM_WORD
0000114A                           233     
0000114A  B03C 0007                234          Cmp.B   #%111, D0               ; AddA Long
0000114E  6700 03A6                235          Beq     EA_IMM_LONG
00001152                           236          
00001152  4E75                     237          Rts
00001154                           238          
00001154                           239  ;=================================================;        
00001154                           240  ;-------------------- EA AddQ --------------------;
00001154                           241  ;=================================================;
00001154                           242  EA_ADDQ ; Figures out the EA for AddQ
00001154  4EB9 00001164            243          Jsr     EA_ADDQ_CHECK_8         ; Get the immediate value
0000115A  1CFC 002C                244          Move.B  #',', (A6)+             ; Add a comma
0000115E  4EB9 00001188            245          Jsr     EA_ADDQ_DEST            ; Add the destination
00001164                           246  
00001164                           247  EA_ADDQ_CHECK_8 ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001164  4EB9 0000156C            248          Jsr     GET9TO11                ; Isolate the count/register bits
0000116A                           249          
0000116A  B03C 0000                250          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
0000116E  6E00 000C                251          Bgt     EA_ADDQ_IMMEDIATE
00001172                           252          
00001172  103C 0008                253          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001176                           254          
00001176  4EF9 0000117C            255          Jmp     EA_ADDQ_IMMEDIATE
0000117C                           256          
0000117C                           257  EA_ADDQ_IMMEDIATE   ; Adds an immediate value before the comma
0000117C  1CFC 0023                258          Move.B  #'#', (A6)+
00001180  0600 0030                259          Add.B   #$30, D0
00001184  1CC0                     260          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001186                           261          
00001186  4E75                     262          Rts
00001188                           263          
00001188                           264  EA_ADDQ_DEST    ; Determines the destination       
00001188  4EB9 00001590            265          Jsr     GET3TO5                 ; Get source mode
0000118E  1A00                     266          Move.B  D0, D5                  ; Move source mode to D5
00001190  4EB9 000015A2            267          Jsr     Get0TO2                 ; Get source register
00001196                           268          
00001196                           269          ; List of valid effective addresses
00001196  BA3C 0000                270          Cmp.B   #Dn_Mode, D5            ; Dn
0000119A  6700 0160                271          Beq     EA_DN
0000119E                           272          
0000119E  BA3C 0001                273          Cmp.B   #An_Mode, D5            ; An
000011A2  6700 0164                274          Beq     EA_AN
000011A6                           275          
000011A6  BA3C 0002                276          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000011AA  6700 0168                277          Beq     EA_AN_PNTR
000011AE                           278          
000011AE  BA3C 0003                279          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000011B2  6700 0174                280          Beq     EA_AN_INC
000011B6                           281          
000011B6  BA3C 0004                282          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000011BA  6700 0184                283          Beq     EA_AN_DEC
000011BE                           284          
000011BE                           285          ; Comparing registers at this point because modes are the same
000011BE  B03C 0000                286          Cmp.B   #Word_Reg, D0           ; (xxx).W
000011C2  6700 0194                287          Beq     EA_WORD_ADDR
000011C6                           288          
000011C6  B03C 0001                289          Cmp.B   #Long_Reg, D0           ; (xxx).L
000011CA  6700 0228                290          Beq     EA_LONG_ADDR
000011CE                           291          
000011CE                           292  ;=========================================================;        
000011CE                           293  ;---------------------- EA Sub/SubA ----------------------;
000011CE                           294  ; Jumps straight to EA_ADD because the EA for Add/AddA and
000011CE                           295  ; Sub/SubA are exactly the same.
000011CE                           296  ;=========================================================;
000011CE                           297  EA_SUB
000011CE  4EF8 109E                298          Jmp     EA_ADD
000011D2                           299  
000011D2                           300  ;=========================================================;        
000011D2                           301  ;---------------------- EA Cmp/CmpA ----------------------;
000011D2                           302  ; Jumps straight to EA_ADD because the EA for Add/AddA and
000011D2                           303  ; Cmp/CmpA are exactly the same.
000011D2                           304  ;=========================================================;
000011D2                           305  EA_CMP       
000011D2  4EF8 109E                306          Jmp     EA_ADD
000011D6                           307          
000011D6                           308  ;=========================================================;        
000011D6                           309  ;------------------------ EA Lea -------------------------;
000011D6                           310  ; Jumps straight to EA_ADD because the EA for AddA and Lea
000011D6                           311  ; are exactly the same.
000011D6                           312  ;=========================================================;
000011D6                           313  EA_LEA
000011D6  4EF8 109E                314          Jmp     EA_ADD
000011DA                           315          
000011DA                           316  ;=========================================================;        
000011DA                           317  ;------------------------ EA And -------------------------;
000011DA                           318  ; Jumps straight to EA_ADD because the EA for Add and And
000011DA                           319  ; are exactly the same.
000011DA                           320  ;=========================================================;
000011DA                           321  EA_AND
000011DA  4EF8 109E                322          Jmp     EA_ADD
000011DE                           323          
000011DE                           324  ;=========================================================;        
000011DE                           325  ;------------------------ EA Neg -------------------------;
000011DE                           326  ; Jumps to EA_ADD_SOURCE because the Neg only requires an
000011DE                           327  ; EA and EA_ADD_SOURCE has all of the addressing modes.
000011DE                           328  ;=========================================================;
000011DE                           329  EA_NEG
000011DE  4EB9 00001506            330          Jsr     EA_0TO5
000011E4                           331          
000011E4                           332          ; <Next instruction>
000011E4                           333  
000011E4                           334  ;=========================================================;
000011E4                           335  ;--------------------- EA Bit Shift ----------------------;
000011E4                           336  ; Finds the EA for ASd, LSd, ROd. All of these OP codes
000011E4                           337  ; are combined because the EA for each code is exactly the
000011E4                           338  ; same.
000011E4                           339  ;=========================================================;
000011E4                           340  EA_BIT_SHIFT    ; Figures out the EA for bit shift functions
000011E4  4EB9 000015C6            341          Jsr     GET6TO7
000011EA                           342          
000011EA  B03C 0003                343          Cmp.B   #%11, D0                ; If bits 6 and 7 are not %11, then we are shifting a register
000011EE  6600 0040                344          Bne     EA_SHIFT_REGISTER
000011F2                           345          
000011F2  4EB9 000011F8            346          Jsr     EA_SHIFT_MEMORY         ; If bits 6 and 7 are %11, then we are shifting memory
000011F8                           347          
000011F8                           348          ; <Next instruction>
000011F8                           349                  
000011F8                           350  EA_SHIFT_MEMORY ; Adds the correct EA for a memory shift
000011F8  4EB9 00001590            351          Jsr     GET3TO5                 ; Get source mode
000011FE  1A00                     352          Move.B  D0, D5                  ; Move source mode to D5
00001200  4EB9 000015A2            353          Jsr     Get0TO2                 ; Get source register
00001206                           354          
00001206                           355          ; List of valid effective addresses        
00001206  BA3C 0002                356          Cmp.B   #An_Pntr_Mode, D5       ; (An)
0000120A  6700 0108                357          Beq     EA_AN_PNTR
0000120E                           358          
0000120E  BA3C 0003                359          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001212  6700 0114                360          Beq     EA_AN_INC
00001216                           361          
00001216  BA3C 0004                362          Cmp.B   #An_Dec_Mode, D5        ; -(An)
0000121A  6700 0124                363          Beq     EA_AN_DEC
0000121E                           364          
0000121E                           365          ; Comparing registers at this point because modes are the same
0000121E  B03C 0000                366          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001222  6700 0134                367          Beq     EA_WORD_ADDR
00001226                           368          
00001226  B03C 0001                369          Cmp.B   #Long_Reg, D0           ; (xxx).L
0000122A  6700 01C8                370          Beq     EA_LONG_ADDR
0000122E                           371          
0000122E  4E75                     372          Rts
00001230                           373          
00001230                           374  EA_SHIFT_REGISTER   ; Figure out if we are shifting by #<data> or by the value in a data register
00001230  4EB9 000015D8            375          Jsr     GETBIT5
00001236                           376          
00001236  B03C 0000                377          Cmp.B   #0, D0                  ; Check if bit 5 is %0
0000123A  6700 0008                378          Beq     EA_SHIFT_CHECK_8
0000123E                           379          
0000123E  4EF9 0000126C            380          Jmp     EA_SHIFT_DN             ; If it's not, we are shifting from a data register
00001244                           381          
00001244                           382  EA_SHIFT_CHECK_8    ; A bit value of 1-7 corresponds to 1-7, but 0 corresponds to 8
00001244  4EB9 0000156C            383          Jsr     GET9TO11                ; Isolate the count/register bits
0000124A                           384          
0000124A  B03C 0000                385          Cmp.B   #0, D0                  ; If the bits are greater than 0, proceed normally
0000124E  6E00 000C                386          Bgt     EA_SHIFT_IMMEDIATE
00001252                           387          
00001252  103C 0008                388          Move.B  #8, D0                  ; Else, use 8 as the immediate value
00001256                           389                  
00001256  4EF9 0000125C            390          Jmp     EA_SHIFT_IMMEDIATE
0000125C                           391          
0000125C                           392  EA_SHIFT_IMMEDIATE  ; Adds an immediate value before the comma
0000125C  1CFC 0023                393          Move.B  #'#', (A6)+
00001260  0600 0030                394          Add.B   #$30, D0
00001264  1CC0                     395          Move.B  D0, (A6)+               ; Add the immediate value to the string
00001266                           396  
00001266  4EF9 0000127E            397          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it
0000126C                           398          
0000126C                           399  EA_SHIFT_DN ; Adds a data register before the comma
0000126C  4EB9 0000156C            400          Jsr     GET9TO11                ; Isolate the data register bits
00001272                           401          
00001272  4EB9 000012FC            402          Jsr     EA_DN                   ; Add the data register to the string
00001278                           403          
00001278  4EF9 0000127E            404          Jmp     EA_SHIFT_COMMA          ; Add the comma and everything after it 
0000127E                           405          
0000127E                           406  EA_SHIFT_COMMA  ; Adds the comma and everything after it to the string
0000127E  1CFC 002C                407          Move.B  #',', (A6)+
00001282                           408          
00001282  4EB9 000015A2            409          Jsr     GET0TO2                 ; Get the register number
00001288                           410          
00001288  4EB9 000012FC            411          Jsr     EA_DN                   ; Add the register
0000128E                           412          
0000128E                           413          ; <Next instruction>
0000128E                           414  
0000128E                           415  ;============================================;        
0000128E                           416  ;--------------- EA Immediate ---------------;
0000128E                           417  ;============================================;
0000128E                           418  EA_IMMEDIATE    ; Figures out the EA for immediate data OP codes
0000128E  4EB9 0000129E            419          Jsr     EA_IMMEDIATE_SIZE       ; Get the size of the immediate data and add to string
00001294  1CFC 002C                420          Move.B  #',', (A6)+             ; Add a comma
00001298  4EB9 000012BE            421          Jsr     EA_IMMEDIATE_DEST       ; Add the destination EA
0000129E                           422          
0000129E                           423          ; <Next instruction>
0000129E                           424          
0000129E                           425  EA_IMMEDIATE_SIZE   ; Determines the size of the immediate data and adds it
0000129E  4EB9 000015C6            426          Jsr     GET6TO7                 ; Isolate the size bits
000012A4                           427                  
000012A4  B03C 0001                428          Cmp.B   #%01, D0                ; Immediate word
000012A8  6700 023C                429          Beq     EA_IMM_WORD
000012AC                           430          
000012AC  B03C 0002                431          Cmp.B   #%10, D0                ; Immediate long
000012B0  6700 0244                432          Beq     EA_IMM_LONG
000012B4                           433          
000012B4  524B                     434          AddA.W  #1, A3                  ; Else, move the pointer forward by a byte get the next byte
000012B6  4EF9 000014D6            435          Jmp     EA_IMM_BYTE
000012BC                           436          
000012BC  4E75                     437          Rts
000012BE                           438          
000012BE                           439  EA_IMMEDIATE_DEST   ; Determines the destination EA
000012BE  4EB9 00001590            440          Jsr     GET3TO5                 ; Get source mode
000012C4  1A00                     441          Move.B  D0, D5                  ; Move source mode to D5
000012C6  4EB9 000015A2            442          Jsr     Get0TO2                 ; Get source register
000012CC                           443       
000012CC                           444          ; List of valid effective addresses
000012CC  BA3C 0000                445          Cmp.B   #Dn_Mode, D5            ; Dn
000012D0  6700 002A                446          Beq     EA_DN
000012D4                           447          
000012D4  BA3C 0002                448          Cmp.B   #An_Pntr_Mode, D5       ; (An)
000012D8  6700 003A                449          Beq     EA_AN_PNTR
000012DC                           450          
000012DC  BA3C 0003                451          Cmp.B   #An_Inc_Mode, D5        ; (An)+
000012E0  6700 0046                452          Beq     EA_AN_INC
000012E4                           453          
000012E4  BA3C 0004                454          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000012E8  6700 0056                455          Beq     EA_AN_DEC
000012EC                           456          
000012EC                           457          ; Comparing registers at this point because modes are the same
000012EC  B03C 0000                458          Cmp.B   #Word_Reg, D0           ; (xxx).W
000012F0  6700 0066                459          Beq     EA_WORD_ADDR
000012F4                           460          
000012F4  B03C 0001                461          Cmp.B   #Long_Reg, D0           ; (xxx).L
000012F8  6700 00FA                462          Beq     EA_LONG_ADDR
000012FC                           463                 
000012FC                           464  ;==========================================;        
000012FC                           465  ;---------- General EA functions ----------;
000012FC                           466  ;==========================================;
000012FC                           467  EA_DN   ; Adds Dn EA to string
000012FC  1CFC 0044                468          Move.B  #'D', (A6)+             
00001300  0600 0030                469          Add.B   #$30, D0        
00001304  1CC0                     470          Move.B  D0, (A6)+               
00001306                           471                  
00001306  4E75                     472          Rts
00001308                           473  
00001308                           474  EA_AN   ; Adds An EA to string
00001308  1CFC 0041                475          Move.B  #'A', (A6)+
0000130C  0600 0030                476          Add.B   #$30, D0    
00001310  1CC0                     477          Move.B  D0, (A6)+               
00001312                           478                  
00001312  4E75                     479          Rts
00001314                           480  
00001314                           481  EA_AN_PNTR  ; Adds (An) EA to string
00001314  1CFC 0028                482          Move.B  #'(', (A6)+
00001318  1CFC 0041                483          Move.B  #'A', (A6)+
0000131C  0600 0030                484          Add.B   #$30, D0
00001320  1CC0                     485          Move.B  D0, (A6)+
00001322  1CFC 0029                486          Move.B  #')', (A6)+
00001326                           487                  
00001326  4E75                     488          Rts
00001328                           489          
00001328                           490  EA_AN_INC   ; Adds (An)+ EA to string
00001328  1CFC 0028                491          Move.B  #'(', (A6)+
0000132C  1CFC 0041                492          Move.B  #'A', (A6)+
00001330  0600 0030                493          Add.B   #$30, D0
00001334  1CC0                     494          Move.B  D0, (A6)+
00001336  1CFC 0029                495          Move.B  #')', (A6)+
0000133A  1CFC 002B                496          Move.B  #'+', (A6)+
0000133E                           497                  
0000133E  4E75                     498          Rts 
00001340                           499          
00001340                           500  EA_AN_DEC   ; Adds -(An) EA to string
00001340  1CFC 002D                501          Move.B  #'-', (A6)+
00001344  1CFC 0028                502          Move.B  #'(', (A6)+
00001348  1CFC 0041                503          Move.B  #'A', (A6)+
0000134C  0600 0030                504          Add.B   #$30, D0
00001350  1CC0                     505          Move.B  D0, (A6)+
00001352  1CFC 0029                506          Move.B  #')', (A6)+
00001356                           507                  
00001356  4E75                     508          Rts 
00001358                           509  
00001358                           510  EA_WORD_ADDR    ; Adds $Word to string
00001358  3C1B                     511          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
0000135A                           512          
0000135A  1CFC 0024                513          Move.B  #'$', (A6)+
0000135E                           514          
0000135E  BC7C 8000                515          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001362  6E00 000C                516          Bgt     EA_SIGN_EXT_16
00001366                           517          
00001366  BC7C 8000                518          Cmp.W   #$8000, D6          ; Word address is greater than 8000
0000136A  6F00 001C                519          Ble     EA_SIGN_EXT_32
0000136E                           520          
0000136E  4E75                     521          Rts
00001370                           522                  
00001370                           523  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
00001370  1CFC 0030                524          Move.B  #'0', (A6)+
00001374  1CFC 0030                525          Move.B  #'0', (A6)+
00001378  1CFC 0030                526          Move.B  #'0', (A6)+
0000137C  1CFC 0030                527          Move.B  #'0', (A6)+
00001380                           528          
00001380  4EB9 000013A0            529          Jsr     EA_WORD_TO_STRING       
00001386                           530          
00001386  4E75                     531          Rts
00001388                           532  
00001388                           533  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
00001388  1CFC 0046                534          Move.B  #'F', (A6)+
0000138C  1CFC 0046                535          Move.B  #'F', (A6)+
00001390  1CFC 0046                536          Move.B  #'F', (A6)+
00001394  1CFC 0046                537          Move.B  #'F', (A6)+
00001398                           538          
00001398  4EB9 000013A0            539          Jsr     EA_WORD_TO_STRING   
0000139E                           540          
0000139E  4E75                     541          Rts
000013A0                           542          
000013A0                           543  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
000013A0  4280                     544          Clr.L   D0              ; Clear D0
000013A2  3006                     545          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
000013A4                           546  
000013A4  123C 000C                547          Move.B  #12, D1         ; Grab bits 12 to 15
000013A8  E268                     548          Lsr     D1, D0
000013AA  0600 0030                549          Add.B   #$30, D0
000013AE  1CC0                     550          Move.B  D0, (A6)+
000013B0                           551          
000013B0  4280                     552          Clr.L   D0
000013B2  3006                     553          Move.W  D6, D0
000013B4                           554          
000013B4  123C 0004                555          Move.B  #4, D1          ; Grab bits 8 to 11
000013B8  E368                     556          Lsl     D1, D0
000013BA  123C 000C                557          Move.B  #12, D1
000013BE  E268                     558          Lsr     D1, D0  
000013C0  0600 0030                559          Add.B   #$30, D0
000013C4  1CC0                     560          Move.B  D0, (A6)+
000013C6                           561          
000013C6  4280                     562          Clr.L   D0
000013C8  3006                     563          Move.W  D6, D0
000013CA                           564          
000013CA  123C 0008                565          Move.B  #8, D1          ; Grab bits 4 to 7
000013CE  E368                     566          Lsl     D1, D0
000013D0  123C 000C                567          Move.B  #12, D1
000013D4  E268                     568          Lsr     D1, D0
000013D6  0600 0030                569          Add.B   #$30, D0
000013DA  1CC0                     570          Move.B  D0, (A6)+
000013DC                           571          
000013DC  4280                     572          Clr.L   D0
000013DE  3006                     573          Move.W  D6, D0
000013E0                           574          
000013E0  123C 000C                575          Move.B  #12, D1         ; Grab bits 0 to 3
000013E4  E368                     576          Lsl     D1, D0
000013E6  123C 000C                577          Move.B  #12, D1
000013EA  E268                     578          Lsr     D1, D0
000013EC  0600 0030                579          Add.B   #$30, D0
000013F0  1CC0                     580          Move.B  D0, (A6)+
000013F2                           581          
000013F2  4E75                     582          Rts
000013F4                           583          
000013F4                           584  EA_LONG_ADDR    ; Adds $Long to string
000013F4  2C1B                     585          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000013F6                           586          
000013F6  1CFC 0024                587          Move.B  #'$', (A6)+
000013FA                           588          
000013FA  4EB9 00001402            589          Jsr     EA_LONG_TO_STRING
00001400                           590  
00001400  4E75                     591          Rts
00001402                           592                  
00001402                           593  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
00001402  4280                     594          Clr.L   D0              ; Clear D0
00001404  2006                     595          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
00001406                           596  
00001406  123C 001C                597          Move.B  #28, D1         ; Grab bits 28 to 31
0000140A  E2A8                     598          Lsr.L   D1, D0
0000140C  0600 0030                599          Add.B   #$30, D0
00001410  1CC0                     600          Move.B  D0, (A6)+
00001412                           601          
00001412  4280                     602          Clr.L   D0             
00001414  2006                     603          Move.L  D6, D0          
00001416                           604          
00001416  123C 0004                605          Move.B  #4, D1          ; Grab bits 24 to 27
0000141A  E3A8                     606          Lsl.L   D1, D0
0000141C  123C 001C                607          Move.B  #28, D1
00001420  E2A8                     608          Lsr.L   D1, D0
00001422  0600 0030                609          Add.B   #$30, D0
00001426  1CC0                     610          Move.B  D0, (A6)+
00001428                           611          
00001428  4280                     612          Clr.L   D0             
0000142A  2006                     613          Move.L  D6, D0
0000142C                           614  
0000142C  123C 0008                615          Move.B  #8, D1          ; Grab bits 20 to 23
00001430  E3A8                     616          Lsl.L   D1, D0
00001432  123C 001C                617          Move.B  #28, D1
00001436  E2A8                     618          Lsr.L   D1, D0
00001438  0600 0030                619          Add.B   #$30, D0
0000143C  1CC0                     620          Move.B  D0, (A6)+
0000143E                           621          
0000143E  4280                     622          Clr.L   D0             
00001440  2006                     623          Move.L  D6, D0
00001442                           624  
00001442  123C 000C                625          Move.B  #12, D1         ; Grab bits 16 to 19
00001446  E3A8                     626          Lsl.L   D1, D0
00001448  123C 001C                627          Move.B  #28, D1
0000144C  E2A8                     628          Lsr.L   D1, D0
0000144E  0600 0030                629          Add.B   #$30, D0
00001452  1CC0                     630          Move.B  D0, (A6)+
00001454                           631          
00001454  4280                     632          Clr.L   D0             
00001456  2006                     633          Move.L  D6, D0
00001458                           634  
00001458  123C 0010                635          Move.B  #16, D1         ; Grab bits 12 to 15
0000145C  E3A8                     636          Lsl.L   D1, D0
0000145E  123C 001C                637          Move.B  #28, D1
00001462  E2A8                     638          Lsr.L   D1, D0
00001464  0600 0030                639          Add.B   #$30, D0
00001468  1CC0                     640          Move.B  D0, (A6)+
0000146A                           641          
0000146A  4280                     642          Clr.L   D0             
0000146C  2006                     643          Move.L  D6, D0
0000146E                           644          
0000146E  123C 0014                645          Move.B  #20, D1         ; Grab bits 8 to 11
00001472  E3A8                     646          Lsl.L   D1, D0
00001474  123C 001C                647          Move.B  #28, D1
00001478  E2A8                     648          Lsr.L   D1, D0
0000147A  0600 0030                649          Add.B   #$30, D0
0000147E  1CC0                     650          Move.B  D0, (A6)+
00001480                           651          
00001480  4280                     652          Clr.L   D0             
00001482  2006                     653          Move.L  D6, D0
00001484                           654  
00001484  123C 0018                655          Move.B  #24, D1         ; Grab bits 4 to 7
00001488  E3A8                     656          Lsl.L   D1, D0
0000148A  123C 001C                657          Move.B  #28, D1
0000148E  E2A8                     658          Lsr.L   D1, D0
00001490  0600 0030                659          Add.B   #$30, D0
00001494  1CC0                     660          Move.B  D0, (A6)+
00001496                           661          
00001496  4280                     662          Clr.L   D0             
00001498  2006                     663          Move.L  D6, D0
0000149A                           664  
0000149A  123C 001C                665          Move.B  #28, D1         ; Grab bits 0 to 3
0000149E  E3A8                     666          Lsl.L   D1, D0
000014A0  123C 001C                667          Move.B  #28, D1
000014A4  E2A8                     668          Lsr.L   D1, D0
000014A6  0600 0030                669          Add.B   #$30, D0
000014AA  1CC0                     670          Move.B  D0, (A6)+
000014AC                           671          
000014AC  4E75                     672          Rts
000014AE                           673          
000014AE                           674  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
000014AE  4280                     675          Clr.L   D0              ; Clear D0
000014B0  2006                     676          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
000014B2                           677  
000014B2  123C 0004                678          Move.B  #4, D1          ; Grab bits 4 to 7
000014B6  E228                     679          Lsr.B   D1, D0
000014B8  0600 0030                680          Add.B   #$30, D0
000014BC  1CC0                     681          Move.B  D0, (A6)+
000014BE                           682          
000014BE  4280                     683          Clr.L   D0             
000014C0  2006                     684          Move.L  D6, D0          
000014C2                           685          
000014C2  123C 0004                686          Move.B  #4, D1          ; Grab bits 0 to 3
000014C6  E328                     687          Lsl.B   D1, D0
000014C8  123C 0004                688          Move.B  #4, D1
000014CC  E228                     689          Lsr.B   D1, D0
000014CE  0600 0030                690          Add.B   #$30, D0
000014D2  1CC0                     691          Move.B  D0, (A6)+
000014D4                           692          
000014D4  4E75                     693          Rts
000014D6                           694  
000014D6                           695  EA_IMM_BYTE ; Finds the immediate byte data
000014D6  1C1B                     696          Move.B  (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
000014D8                           697          
000014D8  1CFC 0023                698          Move.B  #'#', (A6)+         
000014DC  1CFC 0024                699          Move.B  #'$', (A6)+         
000014E0                           700          
000014E0  4EB8 14AE                701          Jsr     EA_BYTE_TO_STRING    ; Add the byte to the string
000014E4                           702          
000014E4  4E75                     703          Rts
000014E6                           704                  
000014E6                           705  EA_IMM_WORD ; Finds the immediate word data
000014E6  3C1B                     706          Move.W  (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
000014E8                           707          
000014E8  1CFC 0023                708          Move.B  #'#', (A6)+         
000014EC  1CFC 0024                709          Move.B  #'$', (A6)+         
000014F0                           710          
000014F0  4EB8 13A0                711          Jsr     EA_WORD_TO_STRING    ; Add the word to the string
000014F4                           712          
000014F4  4E75                     713          Rts
000014F6                           714          
000014F6                           715  EA_IMM_LONG ; Finds the immediate long data
000014F6  2C1B                     716          Move.L  (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
000014F8                           717          
000014F8  1CFC 0023                718          Move.B  #'#', (A6)+
000014FC  1CFC 0024                719          Move.B  #'$', (A6)+
00001500                           720          
00001500  4EB8 1402                721          Jsr     EA_LONG_TO_STRING    ; Add the long to the string
00001504                           722          
00001504  4E75                     723          Rts
00001506                           724          
00001506                           725  EA_0TO5 ; Determines the EA for an EA in bits 0-5. DOES NOT HANDLE IMMEDIATE VALUES.
00001506  4EB9 00001590            726          Jsr     GET3TO5                 ; Get source mode
0000150C  1A00                     727          Move.B  D0, D5                  ; Move source mode to D5
0000150E  4EB9 000015A2            728          Jsr     Get0TO2                 ; Get source register
00001514                           729          
00001514                           730          ; List of valid effective addresses
00001514  BA3C 0000                731          Cmp.B   #Dn_Mode, D5            ; Dn
00001518  6700 FDE2                732          Beq     EA_DN
0000151C                           733          
0000151C  BA3C 0001                734          Cmp.B   #An_Mode, D5            ; An
00001520  6700 FDE6                735          Beq     EA_AN
00001524                           736          
00001524  BA3C 0002                737          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001528  6700 FDEA                738          Beq     EA_AN_PNTR
0000152C                           739          
0000152C  BA3C 0003                740          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001530  6700 FDF6                741          Beq     EA_AN_INC
00001534                           742          
00001534  BA3C 0004                743          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001538  6700 FE06                744          Beq     EA_AN_DEC
0000153C                           745          
0000153C                           746          ; Comparing registers at this point because modes are the same
0000153C  B03C 0000                747          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001540  6700 FE16                748          Beq     EA_WORD_ADDR
00001544                           749          
00001544  B03C 0001                750          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001548  6700 FEAA                751          Beq     EA_LONG_ADDR
0000154C                           752          
0000154C  4E75                     753          Rts
0000154E                           754          
0000154E                           755  ;===========================================================;       
0000154E                           756  ;---------------- Bit Chopping Sub Routines ----------------;
0000154E                           757  ; These Sub Routines Chop a WORD size piece of data from
0000154E                           758  ; Data register 4 into a smaller piece, leaving just the
0000154E                           759  ; Piece in register 0 while leaving the original piece
0000154E                           760  ; of data intact.
0000154E                           761  ;===========================================================;
0000154E                           762  GET12TO15
0000154E  4280                     763          CLR.L   D0
00001550  3004                     764          Move.W  D4, D0
00001552                           765                  
00001552  123C 000C                766          Move.B  #12, D1
00001556  E268                     767          LSR     D1, D0
00001558                           768                  
00001558  4E75                     769          RTS
0000155A                           770  
0000155A                           771  GET12TO13
0000155A  4280                     772          CLR.L   D0
0000155C  3004                     773          Move.W  D4, D0
0000155E                           774          
0000155E  123C 0002                775          Move.B  #2, D1
00001562  E368                     776          LSL     D1, D0
00001564                           777          
00001564  123C 000E                778          Move.B  #14, D1
00001568  E268                     779          LSR     D1, D0
0000156A                           780          
0000156A  4E75                     781          RTS
0000156C                           782                  
0000156C                           783  GET9TO11        
0000156C  4280                     784          CLR.L   D0
0000156E  3004                     785          Move.W  D4, D0
00001570                           786                  
00001570  123C 0004                787          Move.B  #4, D1
00001574  E368                     788          LSL     D1, D0
00001576                           789                  
00001576  123C 000D                790          Move.B  #13, D1
0000157A  E268                     791          LSR     D1, D0
0000157C                           792                  
0000157C  4E75                     793          RTS
0000157E                           794                  
0000157E                           795  GET6TO8 
0000157E  4280                     796          CLR.L   D0
00001580  3004                     797          Move.W  D4, D0
00001582                           798                  
00001582  123C 0007                799          Move.B  #7, D1
00001586  E368                     800          LSL     D1, D0
00001588                           801                  
00001588  123C 000D                802          Move.B  #13, D1
0000158C  E268                     803          LSR     D1, D0
0000158E                           804                  
0000158E  4E75                     805          RTS
00001590                           806                  
00001590                           807  GET3TO5 
00001590  4280                     808          CLR.L   D0
00001592  3004                     809          Move.W  D4, D0
00001594                           810                  
00001594  123C 000A                811          Move.B  #10, D1
00001598  E368                     812          LSL     D1, D0
0000159A                           813                  
0000159A  123C 000D                814          Move.B  #13, D1
0000159E  E268                     815          LSR     D1, D0
000015A0                           816                  
000015A0  4E75                     817          RTS
000015A2                           818  GET0TO2 
000015A2  4280                     819          CLR.L   D0
000015A4  3004                     820          Move.W  D4, D0
000015A6                           821                  
000015A6  123C 000D                822          Move.B  #13, D1
000015AA  E368                     823          LSL     D1, D0
000015AC                           824                  
000015AC  123C 000D                825          Move.B  #13, D1
000015B0  E268                     826          LSR     D1, D0
000015B2                           827                  
000015B2  4E75                     828          RTS
000015B4                           829  GETBIT8
000015B4  4280                     830          CLR.L   D0
000015B6  3004                     831          Move.W  D4, D0
000015B8                           832                  
000015B8  123C 0007                833          Move.B  #7, D1
000015BC  E368                     834          LSL     D1, D0
000015BE                           835                  
000015BE  123C 000F                836          Move.B  #15, D1
000015C2  E268                     837          LSR     D1, D0
000015C4                           838                  
000015C4  4E75                     839          RTS 
000015C6                           840          
000015C6                           841  GET6TO7
000015C6  4280                     842          Clr.L   D0
000015C8  3004                     843          Move.W  D4, D0
000015CA                           844          
000015CA  123C 0008                845          Move.B  #8, D1
000015CE  E368                     846          Lsl     D1, D0
000015D0                           847          
000015D0  123C 000E                848          Move.B  #14, D1
000015D4  E268                     849          Lsr     D1, D0
000015D6                           850          
000015D6  4E75                     851          Rts
000015D8                           852          
000015D8                           853  GETBIT5
000015D8  4280                     854          Clr.L   D0
000015DA  3004                     855          Move.W  D4, D0
000015DC                           856          
000015DC  123C 000A                857          Move.B  #10, D1
000015E0  E368                     858          Lsl     D1, D0
000015E2                           859          
000015E2  123C 000F                860          Move.B  #15, D1
000015E6  E268                     861          Lsr     D1, D0
000015E8                           862          
000015E8  4E75                     863          Rts
000015EA                           864  
000015EA                           865  
000015EA                           866      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_TEST1          5E09
ADDQ_TEST2          5009
ADD_TEST1           DEC1
ADD_TEST2           D87C
ADD_TEST3           DF57
ADD_TEST4           DFF9
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_0TO5             1506
EA_ADD              109E
EA_ADDA             10D2
EA_ADDQ             1154
EA_ADDQ_CHECK_8     1164
EA_ADDQ_DEST        1188
EA_ADDQ_IMMEDIATE   117C
EA_ADD_ADDRESS      1114
EA_ADD_OPMODE_DEST  10FE
EA_ADD_OPMODE_SOURCE  10E8
EA_ADD_SIZE         1124
EA_AN               1308
EA_AND              11DA
EA_AN_DEC           1340
EA_AN_INC           1328
EA_AN_PNTR          1314
EA_BIT_SHIFT        11E4
EA_BYTE_TO_STRING   14AE
EA_CMP              11D2
EA_DN               12FC
EA_IMMEDIATE        128E
EA_IMMEDIATE_DEST   12BE
EA_IMMEDIATE_SIZE   129E
EA_IMM_BYTE         14D6
EA_IMM_LONG         14F6
EA_IMM_WORD         14E6
EA_LEA              11D6
EA_LONG_ADDR        13F4
EA_LONG_TO_STRING   1402
EA_MOVE             1016
EA_MOVE_DEST        1036
EA_MOVE_SIZE        107E
EA_MOVE_SOURCE      1026
EA_NEG              11DE
EA_SHIFT_CHECK_8    1244
EA_SHIFT_COMMA      127E
EA_SHIFT_DN         126C
EA_SHIFT_IMMEDIATE  125C
EA_SHIFT_MEMORY     11F8
EA_SHIFT_REGISTER   1230
EA_SIGN_EXT_16      1370
EA_SIGN_EXT_32      1388
EA_SUB              11CE
EA_WORD_ADDR        1358
EA_WORD_TO_STRING   13A0
GET0TO2             15A2
GET12TO13           155A
GET12TO15           154E
GET3TO5             1590
GET6TO7             15C6
GET6TO8             157E
GET9TO11            156C
GETBIT5             15D8
GETBIT8             15B4
IMM_MODE            7
IMM_REG             4
IMM_TEST1           41F
IMM_TEST2           479
LONG_MODE           7
LONG_REG            1
SHIFT_TEST1         E1D7
SHIFT_TEST2         E1F8
SHIFT_TEST3         EF21
SHIFT_TEST4         E507
SHIFT_TEST5         E104
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
