00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/16/2014 6:16:43 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-16-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34      
00001000                            35      ORG    $1000
00001000                            36      
00001000                            37  START:                  ; first instruction of program
00001000                            38          ;Move.W  #Test_Move1, D4
00001000                            39          ;Move.W  #Test_Move2, D4
00001000                            40          ;Move.W  #Test_Move3, D4
00001000                            41          ;Move.W  #Test_Move4, D4
00001000                            42          ;Move.W  #Test_Move5, D4
00001000                            43          ;Move.W  #$4030, A3
00001000                            44          ;Move.W  #Test_Move6, D4
00001000                            45          ;Move.L  #$12349999, A3
00001000                            46          ;Move.W  #Test_Move7, D4
00001000                            47          ;Move.W  #$11, A3
00001000  383C 2F3C                 48          Move.W  #Test_Move8, D4
00001004  267C 12345678             49          Move.L  #$12345678, A3
0000100A                            50                  
0000100A  6000 0002                 51          Bra     EA_MOVE     ; Branch to EA function for Move
0000100E                            52  
0000100E                            53  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
0000100E                            54  ;-------------------- Effective Address Sub Routines --------------------;
0000100E                            55  ; These subroutines look for the correct effective address
0000100E                            56  ; in each OP code.
0000100E                            57  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
0000100E                            58  
0000100E                            59  ;=============================================;
0000100E                            60  ;--------------- EA Move/MoveA ---------------;
0000100E                            61  ;=============================================;
0000100E                            62  EA_MOVE
0000100E  4EB9 0000101E             63          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
00001014  1CFC 002C                 64          Move.B  #',', (A6)+             ; Add a comma
00001018  4EB9 0000106E             65          Jsr     EA_MOVE_DEST            ; Add the EA for destination
0000101E                            66                  
0000101E                            67  EA_MOVE_SOURCE  ; Find out Move's source
0000101E  4EB9 000012E2             68          Jsr     GET3TO5                 ; Get source mode
00001024  1A00                      69          Move.B  D0, D5                  ; Move source mode to D5
00001026  4EB9 000012F4             70          Jsr     Get0TO2                 ; Get source register
0000102C                            71          
0000102C                            72          ; List of valid effective addresses
0000102C  BA3C 0000                 73          Cmp.B   #Dn_Mode, D5            ; Dn
00001030  6700 009C                 74          Beq     EA_DN
00001034                            75          
00001034  BA3C 0001                 76          Cmp.B   #An_Mode, D5            ; An
00001038  6700 00A0                 77          Beq     EA_AN
0000103C                            78          
0000103C  BA3C 0002                 79          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001040  6700 00A4                 80          Beq     EA_AN_PNTR
00001044                            81          
00001044  BA3C 0003                 82          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001048  6700 00B0                 83          Beq     EA_AN_INC
0000104C                            84          
0000104C  BA3C 0004                 85          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001050  6700 00C0                 86          Beq     EA_AN_DEC
00001054                            87          
00001054                            88          ; Comparing registers at this point because modes are the same
00001054  B03C 0000                 89          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001058  6700 00D0                 90          Beq     EA_WORD_ADDR
0000105C                            91          
0000105C  B03C 0001                 92          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001060  6700 0164                 93          Beq     EA_LONG_ADDR
00001064                            94          
00001064  B03C 0004                 95          Cmp.B   #Imm_Reg, D0            ; #<data>
00001068  6700 004C                 96          Beq     EA_MOVE_SIZE
0000106C                            97          
0000106C  4E75                      98          Rts
0000106E                            99          
0000106E                           100  EA_MOVE_DEST    ; Find out Move's destination
0000106E  4EB9 000012D0            101          Jsr     GET6TO8                 ; Get destination mode
00001074  1A00                     102          Move.B  D0, D5                  ; Move destination mode to D5
00001076  4EB9 000012BE            103          Jsr     GET9TO11                ; Get destination register
0000107C                           104          
0000107C                           105          ; List of valid effective addresses
0000107C  BA3C 0000                106          Cmp.B   #Dn_Mode, D5            ; Dn
00001080  6700 004C                107          Beq     EA_DN
00001084                           108          
00001084  BA3C 0001                109          Cmp.B   #An_Mode, D5            ; An
00001088  6700 0050                110          Beq     EA_AN
0000108C                           111          
0000108C  BA3C 0002                112          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001090  6700 0054                113          Beq     EA_AN_PNTR
00001094                           114          
00001094  BA3C 0003                115          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001098  6700 0060                116          Beq     EA_AN_INC
0000109C                           117          
0000109C  BA3C 0004                118          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000010A0  6700 0070                119          Beq     EA_AN_DEC
000010A4                           120          
000010A4                           121          ; Comparing registers at this point because modes are the same
000010A4  B03C 0000                122          Cmp.B   #Word_Reg, D0           ; (xxx).W
000010A8  6700 0080                123          Beq     EA_WORD_ADDR
000010AC                           124          
000010AC  B03C 0001                125          Cmp.B   #Long_Reg, D0           ; (xxx).L
000010B0  6700 0114                126          Beq     EA_LONG_ADDR
000010B4                           127          
000010B4  4E75                     128          Rts
000010B6                           129          
000010B6                           130  EA_MOVE_SIZE    ; Find the size of immediate data being moved
000010B6  4EB9 000012AC            131          Jsr     GET12TO13               ; Get Move size
000010BC                           132  
000010BC  B03C 0003                133          Cmp.B   #%11, D0                 ; Word
000010C0  6700 01BE                134          Beq     EA_IMM_WORD
000010C4                           135          
000010C4  B03C 0002                136          Cmp.B   #%10, D0                 ; Long
000010C8  6700 01C6                137          Beq     EA_IMM_LONG
000010CC                           138          
000010CC  4E75                     139          Rts
000010CE                           140          
000010CE                           141  ;==========================================;        
000010CE                           142  ;---------- General EA functions ----------;
000010CE                           143  ;==========================================;
000010CE                           144  EA_DN   ; Adds Dn EA to string
000010CE  1CFC 0044                145          Move.B  #'D', (A6)+             
000010D2  0600 0030                146          Add.B   #$30, D0        
000010D6  1CC0                     147          Move.B  D0, (A6)+               
000010D8                           148                  
000010D8  4E75                     149          Rts
000010DA                           150  
000010DA                           151  EA_AN   ; Adds An EA to string
000010DA  1CFC 0041                152          Move.B  #'A', (A6)+
000010DE  0600 0030                153          Add.B   #$30, D0    
000010E2  1CC0                     154          Move.B  D0, (A6)+               
000010E4                           155                  
000010E4  4E75                     156          Rts
000010E6                           157  
000010E6                           158  EA_AN_PNTR  ; Adds (An) EA to string
000010E6  1CFC 0028                159          Move.B  #'(', (A6)+
000010EA  1CFC 0041                160          Move.B  #'A', (A6)+
000010EE  0600 0030                161          Add.B   #$30, D0
000010F2  1CC0                     162          Move.B  D0, (A6)+
000010F4  1CFC 0029                163          Move.B  #')', (A6)+
000010F8                           164                  
000010F8  4E75                     165          Rts
000010FA                           166          
000010FA                           167  EA_AN_INC   ; Adds (An)+ EA to string
000010FA  1CFC 0028                168          Move.B  #'(', (A6)+
000010FE  1CFC 0041                169          Move.B  #'A', (A6)+
00001102  0600 0030                170          Add.B   #$30, D0
00001106  1CC0                     171          Move.B  D0, (A6)+
00001108  1CFC 0029                172          Move.B  #')', (A6)+
0000110C  1CFC 002B                173          Move.B  #'+', (A6)+
00001110                           174                  
00001110  4E75                     175          Rts 
00001112                           176          
00001112                           177  EA_AN_DEC   ; Adds -(An) EA to string
00001112  1CFC 002D                178          Move.B  #'-', (A6)+
00001116  1CFC 0028                179          Move.B  #'(', (A6)+
0000111A  1CFC 0041                180          Move.B  #'A', (A6)+
0000111E  0600 0030                181          Add.B   #$30, D0
00001122  1CC0                     182          Move.B  D0, (A6)+
00001124  1CFC 0029                183          Move.B  #')', (A6)+
00001128                           184                  
00001128  4E75                     185          Rts 
0000112A                           186  
0000112A                           187  EA_WORD_ADDR    ; Adds $Word to string
0000112A  3C1B                     188          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
0000112C                           189          
0000112C  1CFC 0024                190          Move.B  #'$', (A6)+
00001130                           191          
00001130  BC7C 8000                192          Cmp.W   #$8000, D6          ; Word address is less than 8000
00001134  6E00 000C                193          Bgt     EA_SIGN_EXT_16
00001138                           194          
00001138  BC7C 8000                195          Cmp.W   #$8000, D6          ; Word address is greater than 8000
0000113C  6F00 001C                196          Ble     EA_SIGN_EXT_32
00001140                           197          
00001140  4E75                     198          Rts
00001142                           199                  
00001142                           200  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
00001142  1CFC 0030                201          Move.B  #'0', (A6)+
00001146  1CFC 0030                202          Move.B  #'0', (A6)+
0000114A  1CFC 0030                203          Move.B  #'0', (A6)+
0000114E  1CFC 0030                204          Move.B  #'0', (A6)+
00001152                           205          
00001152  4EB9 00001172            206          Jsr     EA_WORD_TO_STRING       
00001158                           207          
00001158  4E75                     208          Rts
0000115A                           209  
0000115A                           210  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
0000115A  1CFC 0046                211          Move.B  #'F', (A6)+
0000115E  1CFC 0046                212          Move.B  #'F', (A6)+
00001162  1CFC 0046                213          Move.B  #'F', (A6)+
00001166  1CFC 0046                214          Move.B  #'F', (A6)+
0000116A                           215          
0000116A  4EB9 00001172            216          Jsr     EA_WORD_TO_STRING   
00001170                           217          
00001170  4E75                     218          Rts
00001172                           219          
00001172                           220  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
00001172  4280                     221          Clr.L   D0              ; Clear D0
00001174  3006                     222          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
00001176                           223  
00001176  123C 000C                224          Move.B  #12, D1         ; Grab bits 12 to 15
0000117A  E268                     225          Lsr     D1, D0
0000117C  0600 0030                226          Add.B   #$30, D0
00001180  1CC0                     227          Move.B  D0, (A6)+
00001182                           228          
00001182  4280                     229          Clr.L   D0
00001184  3006                     230          Move.W  D6, D0
00001186                           231          
00001186  123C 0004                232          Move.B  #4, D1          ; Grab bits 8 to 11
0000118A  E368                     233          Lsl     D1, D0
0000118C  123C 000C                234          Move.B  #12, D1
00001190  E268                     235          Lsr     D1, D0  
00001192  0600 0030                236          Add.B   #$30, D0
00001196  1CC0                     237          Move.B  D0, (A6)+
00001198                           238          
00001198  4280                     239          Clr.L   D0
0000119A  3006                     240          Move.W  D6, D0
0000119C                           241          
0000119C  123C 0008                242          Move.B  #8, D1          ; Grab bits 4 to 7
000011A0  E368                     243          Lsl     D1, D0
000011A2  123C 000C                244          Move.B  #12, D1
000011A6  E268                     245          Lsr     D1, D0
000011A8  0600 0030                246          Add.B   #$30, D0
000011AC  1CC0                     247          Move.B  D0, (A6)+
000011AE                           248          
000011AE  4280                     249          Clr.L   D0
000011B0  3006                     250          Move.W  D6, D0
000011B2                           251          
000011B2  123C 000C                252          Move.B  #12, D1         ; Grab bits 0 to 3
000011B6  E368                     253          Lsl     D1, D0
000011B8  123C 000C                254          Move.B  #12, D1
000011BC  E268                     255          Lsr     D1, D0
000011BE  0600 0030                256          Add.B   #$30, D0
000011C2  1CC0                     257          Move.B  D0, (A6)+
000011C4                           258          
000011C4  4E75                     259          Rts
000011C6                           260          
000011C6                           261  EA_LONG_ADDR    ; Adds $Long to string
000011C6  2C1B                     262          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000011C8                           263          
000011C8  1CFC 0024                264          Move.B  #'$', (A6)+
000011CC                           265          
000011CC  4EB9 000011D4            266          Jsr     EA_LONG_TO_STRING
000011D2                           267  
000011D2  4E75                     268          Rts
000011D4                           269                  
000011D4                           270  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
000011D4  4280                     271          Clr.L   D0              ; Clear D0
000011D6  2006                     272          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
000011D8                           273  
000011D8  123C 001C                274          Move.B  #28, D1         ; Grab bits 28 to 31
000011DC  E2A8                     275          Lsr.L   D1, D0
000011DE  0600 0030                276          Add.B   #$30, D0
000011E2  1CC0                     277          Move.B  D0, (A6)+
000011E4                           278          
000011E4  4280                     279          Clr.L   D0             
000011E6  2006                     280          Move.L  D6, D0          
000011E8                           281          
000011E8  123C 0004                282          Move.B  #4, D1          ; Grab bits 24 to 27
000011EC  E3A8                     283          Lsl.L   D1, D0
000011EE  123C 001C                284          Move.B  #28, D1
000011F2  E2A8                     285          Lsr.L   D1, D0
000011F4  0600 0030                286          Add.B   #$30, D0
000011F8  1CC0                     287          Move.B  D0, (A6)+
000011FA                           288          
000011FA  4280                     289          Clr.L   D0             
000011FC  2006                     290          Move.L  D6, D0
000011FE                           291  
000011FE  123C 0008                292          Move.B  #8, D1          ; Grab bits 20 to 23
00001202  E3A8                     293          Lsl.L   D1, D0
00001204  123C 001C                294          Move.B  #28, D1
00001208  E2A8                     295          Lsr.L   D1, D0
0000120A  0600 0030                296          Add.B   #$30, D0
0000120E  1CC0                     297          Move.B  D0, (A6)+
00001210                           298          
00001210  4280                     299          Clr.L   D0             
00001212  2006                     300          Move.L  D6, D0
00001214                           301  
00001214  123C 000C                302          Move.B  #12, D1         ; Grab bits 16 to 19
00001218  E3A8                     303          Lsl.L   D1, D0
0000121A  123C 001C                304          Move.B  #28, D1
0000121E  E2A8                     305          Lsr.L   D1, D0
00001220  0600 0030                306          Add.B   #$30, D0
00001224  1CC0                     307          Move.B  D0, (A6)+
00001226                           308          
00001226  4280                     309          Clr.L   D0             
00001228  2006                     310          Move.L  D6, D0
0000122A                           311  
0000122A  123C 0010                312          Move.B  #16, D1         ; Grab bits 12 to 15
0000122E  E3A8                     313          Lsl.L   D1, D0
00001230  123C 001C                314          Move.B  #28, D1
00001234  E2A8                     315          Lsr.L   D1, D0
00001236  0600 0030                316          Add.B   #$30, D0
0000123A  1CC0                     317          Move.B  D0, (A6)+
0000123C                           318          
0000123C  4280                     319          Clr.L   D0             
0000123E  2006                     320          Move.L  D6, D0
00001240                           321          
00001240  123C 0014                322          Move.B  #20, D1         ; Grab bits 8 to 11
00001244  E3A8                     323          Lsl.L   D1, D0
00001246  123C 001C                324          Move.B  #28, D1
0000124A  E2A8                     325          Lsr.L   D1, D0
0000124C  0600 0030                326          Add.B   #$30, D0
00001250  1CC0                     327          Move.B  D0, (A6)+
00001252                           328          
00001252  4280                     329          Clr.L   D0             
00001254  2006                     330          Move.L  D6, D0
00001256                           331  
00001256  123C 0018                332          Move.B  #24, D1         ; Grab bits 4 to 7
0000125A  E3A8                     333          Lsl.L   D1, D0
0000125C  123C 001C                334          Move.B  #28, D1
00001260  E2A8                     335          Lsr.L   D1, D0
00001262  0600 0030                336          Add.B   #$30, D0
00001266  1CC0                     337          Move.B  D0, (A6)+
00001268                           338          
00001268  4280                     339          Clr.L   D0             
0000126A  2006                     340          Move.L  D6, D0
0000126C                           341  
0000126C  123C 001C                342          Move.B  #28, D1         ; Grab bits 0 to 3
00001270  E3A8                     343          Lsl.L   D1, D0
00001272  123C 001C                344          Move.B  #28, D1
00001276  E2A8                     345          Lsr.L   D1, D0
00001278  0600 0030                346          Add.B   #$30, D0
0000127C  1CC0                     347          Move.B  D0, (A6)+
0000127E                           348          
0000127E  4E75                     349          Rts
00001280                           350                  
00001280                           351  EA_IMM_WORD ; Finds the immediate word data
00001280  3C1B                     352          Move.W (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
00001282                           353          
00001282  1CFC 0023                354          Move.B  #'#', (A6)+         
00001286  1CFC 0024                355          Move.B  #'$', (A6)+         
0000128A                           356          
0000128A  4EB8 1172                357          Jsr     EA_WORD_TO_STRING   ; Add the word to the string
0000128E                           358          
0000128E  4E75                     359          Rts
00001290                           360          
00001290                           361  EA_IMM_LONG ; Finds the immediate long data
00001290  2C1B                     362          Move.L (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
00001292                           363          
00001292  1CFC 0023                364          Move.B  #'#', (A6)+
00001296  1CFC 0024                365          Move.B  #'$', (A6)+
0000129A                           366          
0000129A  4EB8 11D4                367          Jsr     EA_LONG_TO_STRING
0000129E                           368          
0000129E  4E75                     369          Rts
000012A0                           370  
000012A0                           371  ;===========================================================;       
000012A0                           372  ;---------------- Bit Chopping Sub Routines ----------------;
000012A0                           373  ; These Sub Routines Chop a WORD size piece of data from
000012A0                           374  ; Data register 4 into a smaller piece, leaving just the
000012A0                           375  ; Piece in register 0 while leaving the original piece
000012A0                           376  ; of data intact.
000012A0                           377  ;===========================================================;
000012A0                           378  GET12TO15
000012A0  4280                     379          CLR.L   D0
000012A2  3004                     380          Move.W  D4, D0
000012A4                           381                  
000012A4  123C 000C                382          Move.B  #12, D1
000012A8  E268                     383          LSR     D1, D0
000012AA                           384                  
000012AA  4E75                     385          RTS
000012AC                           386  
000012AC                           387  GET12TO13
000012AC  4280                     388          CLR.L   D0
000012AE  3004                     389          Move.W  D4, D0
000012B0                           390          
000012B0  123C 0002                391          Move.B  #2, D1
000012B4  E368                     392          LSL     D1, D0
000012B6                           393          
000012B6  123C 000E                394          Move.B  #14, D1
000012BA  E268                     395          LSR     D1, D0
000012BC                           396          
000012BC  4E75                     397          RTS
000012BE                           398                  
000012BE                           399  GET9TO11        
000012BE  4280                     400          CLR.L   D0
000012C0  3004                     401          Move.W  D4, D0
000012C2                           402                  
000012C2  123C 0004                403          Move.B  #4, D1
000012C6  E368                     404          LSL     D1, D0
000012C8                           405                  
000012C8  123C 000D                406          Move.B  #13, D1
000012CC  E268                     407          LSR     D1, D0
000012CE                           408                  
000012CE  4E75                     409          RTS
000012D0                           410                  
000012D0                           411  GET6TO8 
000012D0  4280                     412          CLR.L   D0
000012D2  3004                     413          Move.W  D4, D0
000012D4                           414                  
000012D4  123C 0007                415          Move.B  #7, D1
000012D8  E368                     416          LSL     D1, D0
000012DA                           417                  
000012DA  123C 000D                418          Move.B  #13, D1
000012DE  E268                     419          LSR     D1, D0
000012E0                           420                  
000012E0  4E75                     421          RTS
000012E2                           422                  
000012E2                           423  GET3TO5 
000012E2  4280                     424          CLR.L   D0
000012E4  3004                     425          Move.W  D4, D0
000012E6                           426                  
000012E6  123C 000A                427          Move.B  #10, D1
000012EA  E368                     428          LSL     D1, D0
000012EC                           429                  
000012EC  123C 000D                430          Move.B  #13, D1
000012F0  E268                     431          LSR     D1, D0
000012F2                           432                  
000012F2  4E75                     433          RTS
000012F4                           434  GET0TO2 
000012F4  4280                     435          CLR.L   D0
000012F6  3004                     436          Move.W  D4, D0
000012F8                           437                  
000012F8  123C 000D                438          Move.B  #13, D1
000012FC  E368                     439          LSL     D1, D0
000012FE                           440                  
000012FE  123C 000D                441          Move.B  #13, D1
00001302  E268                     442          LSR     D1, D0
00001304                           443                  
00001304  4E75                     444          RTS
00001306                           445  GETBIT8
00001306  4280                     446          CLR.L   D0
00001308  3004                     447          Move.W  D4, D0
0000130A                           448                  
0000130A  123C 0007                449          Move.B  #7, D1
0000130E  E368                     450          LSL     D1, D0
00001310                           451                  
00001310  123C 000F                452          Move.B  #15, D1
00001314  E268                     453          LSR     D1, D0
00001316                           454                  
00001316  4E75                     455          RTS 
00001318                           456  
00001318                           457      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_AN               10DA
EA_AN_DEC           1112
EA_AN_INC           10FA
EA_AN_PNTR          10E6
EA_DN               10CE
EA_IMM_LONG         1290
EA_IMM_WORD         1280
EA_LONG_ADDR        11C6
EA_LONG_TO_STRING   11D4
EA_MOVE             100E
EA_MOVE_DEST        106E
EA_MOVE_SIZE        10B6
EA_MOVE_SOURCE      101E
EA_SIGN_EXT_16      1142
EA_SIGN_EXT_32      115A
EA_WORD_ADDR        112A
EA_WORD_TO_STRING   1172
GET0TO2             12F4
GET12TO13           12AC
GET12TO15           12A0
GET3TO5             12E2
GET6TO8             12D0
GET9TO11            12BE
GETBIT8             1306
IMM_MODE            7
IMM_REG             4
LONG_MODE           7
LONG_REG            1
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
