00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/16/2014 5:55:13 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Move EA Test
00000000                             3  * Written by : John Louie
00000000                             4  * Date       : 11-11-14
00000000                             5  * Description: Testing Move EA
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  ;=================================================;
00000000                             9  ;----- Variables to identify modes/registers -----;
00000000                            10  ;=================================================;
00000000  =00000000                 11  Dn_Mode             EQU     %000
00000000  =00000001                 12  An_Mode             EQU     %001
00000000  =00000002                 13  An_Pntr_Mode        EQU     %010
00000000  =00000003                 14  An_Inc_Mode         EQU     %011
00000000  =00000004                 15  An_Dec_Mode         EQU     %100
00000000  =00000007                 16  Word_Mode           EQU     %111
00000000  =00000000                 17  Word_Reg            EQU     %000
00000000  =00000007                 18  Long_Mode           EQU     %111
00000000  =00000001                 19  Long_Reg            EQU     %001
00000000  =00000007                 20  Imm_Mode            EQU     %111
00000000  =00000004                 21  Imm_Reg             EQU     %100
00000000                            22  
00000000                            23  ;==============================================;
00000000                            24  ;--------------- Test variables ---------------;
00000000                            25  ;==============================================;
00000000  =00001401                 26  Test_Move1          EQU     %0001010000000001   ; Move.B D1,D2
00000000  =00001444                 27  Test_Move2          EQU     %0001010001000100   ; Move.B A2,D4 INCORRECT
00000000  =00001E90                 28  Test_Move3          EQU     %0001111010010000   ; Move.B (A0),(A7)
00000000  =00001EE2                 29  Test_Move4          EQU     %0001111011100010   ; Move.B -(A2),(A7)+
00000000  =00001238                 30  Test_Move5          EQU     %0001001000111000   ; Move.B $Word,D1
00000000  =00001E39                 31  Test_Move6          EQU     %0001111000111001   ; Move.B $Long,D7
00000000  =000034BC                 32  Test_Move7          EQU     %0011010010111100   ; Move.W #$Imm,(A2)
00000000  =00002F3C                 33  Test_Move8          EQU     %0010111100111100   ; Move.L #$Imm,-(A7)
00000000                            34      
00001000                            35      ORG    $1000
00001000                            36      
00001000                            37  START:                  ; first instruction of program
00001000                            38          ;Move.W  #Test_Move1, D4
00001000                            39          ;Move.W  #Test_Move2, D4
00001000                            40          ;Move.W  #Test_Move3, D4
00001000                            41          ;Move.W  #Test_Move4, D4
00001000                            42          ;Move.W  #Test_Move5, D4
00001000                            43          ;Move.W  #$4030, A3
00001000                            44          ;Move.W  #Test_Move6, D4
00001000                            45          ;Move.L  #$12349999, A3
00001000                            46          ;Move.W  #Test_Move7, D4
00001000                            47          ;Move.W  #$11, A3
00001000  383C 2F3C                 48          Move.W  #Test_Move8, D4
00001004  267C 12345678             49          Move.L  #$12345678, A3
0000100A                            50                  
0000100A  6000 0002                 51          Bra     EA_MOVE     ; Branch to EA function for Move
0000100E                            52  
0000100E                            53  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];  
0000100E                            54  ;-------------------- Effective Address Sub Routines --------------------;
0000100E                            55  ; These subroutines look for the correct effective address
0000100E                            56  ; in each OP code.
0000100E                            57  ;]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]];
0000100E                            58  
0000100E                            59  ;=============================================;
0000100E                            60  ;--------------- EA Move/MoveA ---------------;
0000100E                            61  ;=============================================;
0000100E                            62  EA_MOVE
0000100E  4EB9 0000101E             63          Jsr     EA_MOVE_SOURCE          ; Add the EA for source
00001014  1CFC 002C                 64          Move.B  #',', (A6)+             ; Add a comma
00001018  4EB9 0000106E             65          Jsr     EA_MOVE_DEST            ; Add the EA for destination
0000101E                            66                  
0000101E                            67  EA_MOVE_SOURCE  ; Find out Move's source
0000101E  4EB9 00001322             68          Jsr     GET3TO5                 ; Get source mode
00001024  1A00                      69          Move.B  D0, D5                  ; Move source mode to D5
00001026  4EB9 00001334             70          Jsr     Get0TO2                 ; Get source register
0000102C                            71          
0000102C                            72          ; List of valid effective addresses
0000102C  BA3C 0000                 73          Cmp.B   #Dn_Mode, D5            ; Dn
00001030  6700 00A4                 74          Beq     EA_DN
00001034                            75          
00001034  BA3C 0001                 76          Cmp.B   #An_Mode, D5            ; An
00001038  6700 00A8                 77          Beq     EA_AN
0000103C                            78          
0000103C  BA3C 0002                 79          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001040  6700 00AC                 80          Beq     EA_AN_PNTR
00001044                            81          
00001044  BA3C 0003                 82          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001048  6700 00B8                 83          Beq     EA_AN_INC
0000104C                            84          
0000104C  BA3C 0004                 85          Cmp.B   #An_Dec_Mode, D5        ; -(An)
00001050  6700 00C8                 86          Beq     EA_AN_DEC
00001054                            87          
00001054                            88          ; Comparing registers at this point because modes are the same
00001054  B03C 0000                 89          Cmp.B   #Word_Reg, D0           ; (xxx).W
00001058  6700 00D8                 90          Beq     EA_WORD_ADDR
0000105C                            91          
0000105C  B03C 0001                 92          Cmp.B   #Long_Reg, D0           ; (xxx).L
00001060  6700 016C                 93          Beq     EA_LONG_ADDR
00001064                            94          
00001064  B03C 0004                 95          Cmp.B   #Imm_Reg, D0            ; #<data>
00001068  6700 004C                 96          Beq     EA_MOVE_SIZE
0000106C                            97          
0000106C  4E75                      98          Rts
0000106E                            99          
0000106E                           100  EA_MOVE_DEST    ; Find out Move's destination
0000106E  4EB9 00001310            101          Jsr     GET6TO8                 ; Get destination mode
00001074  1A00                     102          Move.B  D0, D5                  ; Move destination mode to D5
00001076  4EB9 000012FE            103          Jsr     GET9TO11                ; Get destination register
0000107C                           104          
0000107C                           105          ; List of valid effective addresses
0000107C  BA3C 0000                106          Cmp.B   #Dn_Mode, D5            ; Dn
00001080  6700 0054                107          Beq     EA_DN
00001084                           108          
00001084  BA3C 0001                109          Cmp.B   #An_Mode, D5            ; An
00001088  6700 0058                110          Beq     EA_AN
0000108C                           111          
0000108C  BA3C 0002                112          Cmp.B   #An_Pntr_Mode, D5       ; (An)
00001090  6700 005C                113          Beq     EA_AN_PNTR
00001094                           114          
00001094  BA3C 0003                115          Cmp.B   #An_Inc_Mode, D5        ; (An)+
00001098  6700 0068                116          Beq     EA_AN_INC
0000109C                           117          
0000109C  BA3C 0004                118          Cmp.B   #An_Dec_Mode, D5        ; -(An)
000010A0  6700 0078                119          Beq     EA_AN_DEC
000010A4                           120          
000010A4                           121          ; Comparing registers at this point because modes are the same
000010A4  B03C 0000                122          Cmp.B   #Word_Reg, D0           ; (xxx).W
000010A8  6700 0088                123          Beq     EA_WORD_ADDR
000010AC                           124          
000010AC  B03C 0001                125          Cmp.B   #Long_Reg, D0           ; (xxx).L
000010B0  6700 011C                126          Beq     EA_LONG_ADDR
000010B4                           127          
000010B4  4E75                     128          Rts
000010B6                           129          
000010B6                           130  EA_MOVE_SIZE    ; Find the size of immediate data being moved
000010B6  4EB9 000012EC            131          Jsr     GET12TO13               ; Get Move size
000010BC                           132  
000010BC  B03C 0001                133          Cmp.B   #%01, D0                 ; Byte
000010C0  6700 01EE                134          Beq     EA_IMM_BYTE
000010C4                           135  
000010C4  B03C 0003                136          Cmp.B   #%11, D0                 ; Word
000010C8  6700 01F6                137          Beq     EA_IMM_WORD
000010CC                           138          
000010CC  B03C 0002                139          Cmp.B   #%10, D0                 ; Long
000010D0  6700 01FE                140          Beq     EA_IMM_LONG
000010D4                           141          
000010D4  4E75                     142          Rts
000010D6                           143          
000010D6                           144  ;==========================================;        
000010D6                           145  ;---------- General EA functions ----------;
000010D6                           146  ;==========================================;
000010D6                           147  EA_DN   ; Adds Dn EA to string
000010D6  1CFC 0044                148          Move.B  #'D', (A6)+             
000010DA  0600 0030                149          Add.B   #$30, D0        
000010DE  1CC0                     150          Move.B  D0, (A6)+               
000010E0                           151                  
000010E0  4E75                     152          Rts
000010E2                           153  
000010E2                           154  EA_AN   ; Adds An EA to string
000010E2  1CFC 0041                155          Move.B  #'A', (A6)+
000010E6  0600 0030                156          Add.B   #$30, D0    
000010EA  1CC0                     157          Move.B  D0, (A6)+               
000010EC                           158                  
000010EC  4E75                     159          Rts
000010EE                           160  
000010EE                           161  EA_AN_PNTR  ; Adds (An) EA to string
000010EE  1CFC 0028                162          Move.B  #'(', (A6)+
000010F2  1CFC 0041                163          Move.B  #'A', (A6)+
000010F6  0600 0030                164          Add.B   #$30, D0
000010FA  1CC0                     165          Move.B  D0, (A6)+
000010FC  1CFC 0029                166          Move.B  #')', (A6)+
00001100                           167                  
00001100  4E75                     168          Rts
00001102                           169          
00001102                           170  EA_AN_INC   ; Adds (An)+ EA to string
00001102  1CFC 0028                171          Move.B  #'(', (A6)+
00001106  1CFC 0041                172          Move.B  #'A', (A6)+
0000110A  0600 0030                173          Add.B   #$30, D0
0000110E  1CC0                     174          Move.B  D0, (A6)+
00001110  1CFC 0029                175          Move.B  #')', (A6)+
00001114  1CFC 002B                176          Move.B  #'+', (A6)+
00001118                           177                  
00001118  4E75                     178          Rts 
0000111A                           179          
0000111A                           180  EA_AN_DEC   ; Adds -(An) EA to string
0000111A  1CFC 002D                181          Move.B  #'-', (A6)+
0000111E  1CFC 0028                182          Move.B  #'(', (A6)+
00001122  1CFC 0041                183          Move.B  #'A', (A6)+
00001126  0600 0030                184          Add.B   #$30, D0
0000112A  1CC0                     185          Move.B  D0, (A6)+
0000112C  1CFC 0029                186          Move.B  #')', (A6)+
00001130                           187                  
00001130  4E75                     188          Rts 
00001132                           189  
00001132                           190  EA_WORD_ADDR    ; Adds $Word to string
00001132  3C1B                     191          Move.W  (A3)+, D6           ; Move the word address into D6 and move forward in memory
00001134                           192          
00001134  1CFC 0024                193          Move.B  #'$', (A6)+
00001138                           194          
00001138  BC7C 8000                195          Cmp.W   #$8000, D6          ; Word address is less than 8000
0000113C  6E00 000C                196          Bgt     EA_SIGN_EXT_16
00001140                           197          
00001140  BC7C 8000                198          Cmp.W   #$8000, D6          ; Word address is greater than 8000
00001144  6F00 001C                199          Ble     EA_SIGN_EXT_32
00001148                           200          
00001148  4E75                     201          Rts
0000114A                           202                  
0000114A                           203  EA_SIGN_EXT_16  ; Adds 0 if the word address is 16 bit
0000114A  1CFC 0030                204          Move.B  #'0', (A6)+
0000114E  1CFC 0030                205          Move.B  #'0', (A6)+
00001152  1CFC 0030                206          Move.B  #'0', (A6)+
00001156  1CFC 0030                207          Move.B  #'0', (A6)+
0000115A                           208          
0000115A  4EB9 0000117A            209          Jsr     EA_WORD_TO_STRING       
00001160                           210          
00001160  4E75                     211          Rts
00001162                           212  
00001162                           213  EA_SIGN_EXT_32 ; Adds F is the word address is 32 bit
00001162  1CFC 0046                214          Move.B  #'F', (A6)+
00001166  1CFC 0046                215          Move.B  #'F', (A6)+
0000116A  1CFC 0046                216          Move.B  #'F', (A6)+
0000116E  1CFC 0046                217          Move.B  #'F', (A6)+
00001172                           218          
00001172  4EB9 0000117A            219          Jsr     EA_WORD_TO_STRING   
00001178                           220          
00001178  4E75                     221          Rts
0000117A                           222          
0000117A                           223  EA_WORD_TO_STRING   ; Adds the word in D6 to the string
0000117A  4280                     224          Clr.L   D0              ; Clear D0
0000117C  3006                     225          Move.W  D6, D0          ; Move the word into D0 so it can be shifted
0000117E                           226  
0000117E  123C 000C                227          Move.B  #12, D1         ; Grab bits 12 to 15
00001182  E268                     228          Lsr     D1, D0
00001184  0600 0030                229          Add.B   #$30, D0
00001188  1CC0                     230          Move.B  D0, (A6)+
0000118A                           231          
0000118A  4280                     232          Clr.L   D0
0000118C  3006                     233          Move.W  D6, D0
0000118E                           234          
0000118E  123C 0004                235          Move.B  #4, D1          ; Grab bits 8 to 11
00001192  E368                     236          Lsl     D1, D0
00001194  123C 000C                237          Move.B  #12, D1
00001198  E268                     238          Lsr     D1, D0  
0000119A  0600 0030                239          Add.B   #$30, D0
0000119E  1CC0                     240          Move.B  D0, (A6)+
000011A0                           241          
000011A0  4280                     242          Clr.L   D0
000011A2  3006                     243          Move.W  D6, D0
000011A4                           244          
000011A4  123C 0008                245          Move.B  #8, D1          ; Grab bits 4 to 7
000011A8  E368                     246          Lsl     D1, D0
000011AA  123C 000C                247          Move.B  #12, D1
000011AE  E268                     248          Lsr     D1, D0
000011B0  0600 0030                249          Add.B   #$30, D0
000011B4  1CC0                     250          Move.B  D0, (A6)+
000011B6                           251          
000011B6  4280                     252          Clr.L   D0
000011B8  3006                     253          Move.W  D6, D0
000011BA                           254          
000011BA  123C 000C                255          Move.B  #12, D1         ; Grab bits 0 to 3
000011BE  E368                     256          Lsl     D1, D0
000011C0  123C 000C                257          Move.B  #12, D1
000011C4  E268                     258          Lsr     D1, D0
000011C6  0600 0030                259          Add.B   #$30, D0
000011CA  1CC0                     260          Move.B  D0, (A6)+
000011CC                           261          
000011CC  4E75                     262          Rts
000011CE                           263          
000011CE                           264  EA_LONG_ADDR    ; Adds $Long to string
000011CE  2C1B                     265          Move.L  (A3)+, D6           ; Move the long address into D6 and move forward in memory
000011D0                           266          
000011D0  1CFC 0024                267          Move.B  #'$', (A6)+
000011D4                           268          
000011D4  4EB9 000011DC            269          Jsr     EA_LONG_TO_STRING
000011DA                           270  
000011DA  4E75                     271          Rts
000011DC                           272                  
000011DC                           273  EA_LONG_TO_STRING   ; Adds the long in D6 to the string
000011DC  4280                     274          Clr.L   D0              ; Clear D0
000011DE  2006                     275          Move.L  D6, D0          ; Move the long into D0 so it can be shifted
000011E0                           276  
000011E0  123C 001C                277          Move.B  #28, D1         ; Grab bits 28 to 31
000011E4  E2A8                     278          Lsr.L   D1, D0
000011E6  0600 0030                279          Add.B   #$30, D0
000011EA  1CC0                     280          Move.B  D0, (A6)+
000011EC                           281          
000011EC  4280                     282          Clr.L   D0             
000011EE  2006                     283          Move.L  D6, D0          
000011F0                           284          
000011F0  123C 0004                285          Move.B  #4, D1          ; Grab bits 24 to 27
000011F4  E3A8                     286          Lsl.L   D1, D0
000011F6  123C 001C                287          Move.B  #28, D1
000011FA  E2A8                     288          Lsr.L   D1, D0
000011FC  0600 0030                289          Add.B   #$30, D0
00001200  1CC0                     290          Move.B  D0, (A6)+
00001202                           291          
00001202  4280                     292          Clr.L   D0             
00001204  2006                     293          Move.L  D6, D0
00001206                           294  
00001206  123C 0008                295          Move.B  #8, D1          ; Grab bits 20 to 23
0000120A  E3A8                     296          Lsl.L   D1, D0
0000120C  123C 001C                297          Move.B  #28, D1
00001210  E2A8                     298          Lsr.L   D1, D0
00001212  0600 0030                299          Add.B   #$30, D0
00001216  1CC0                     300          Move.B  D0, (A6)+
00001218                           301          
00001218  4280                     302          Clr.L   D0             
0000121A  2006                     303          Move.L  D6, D0
0000121C                           304  
0000121C  123C 000C                305          Move.B  #12, D1         ; Grab bits 16 to 19
00001220  E3A8                     306          Lsl.L   D1, D0
00001222  123C 001C                307          Move.B  #28, D1
00001226  E2A8                     308          Lsr.L   D1, D0
00001228  0600 0030                309          Add.B   #$30, D0
0000122C  1CC0                     310          Move.B  D0, (A6)+
0000122E                           311          
0000122E  4280                     312          Clr.L   D0             
00001230  2006                     313          Move.L  D6, D0
00001232                           314  
00001232  123C 0010                315          Move.B  #16, D1         ; Grab bits 12 to 15
00001236  E3A8                     316          Lsl.L   D1, D0
00001238  123C 001C                317          Move.B  #28, D1
0000123C  E2A8                     318          Lsr.L   D1, D0
0000123E  0600 0030                319          Add.B   #$30, D0
00001242  1CC0                     320          Move.B  D0, (A6)+
00001244                           321          
00001244  4280                     322          Clr.L   D0             
00001246  2006                     323          Move.L  D6, D0
00001248                           324          
00001248  123C 0014                325          Move.B  #20, D1         ; Grab bits 8 to 11
0000124C  E3A8                     326          Lsl.L   D1, D0
0000124E  123C 001C                327          Move.B  #28, D1
00001252  E2A8                     328          Lsr.L   D1, D0
00001254  0600 0030                329          Add.B   #$30, D0
00001258  1CC0                     330          Move.B  D0, (A6)+
0000125A                           331          
0000125A  4280                     332          Clr.L   D0             
0000125C  2006                     333          Move.L  D6, D0
0000125E                           334  
0000125E  123C 0018                335          Move.B  #24, D1         ; Grab bits 4 to 7
00001262  E3A8                     336          Lsl.L   D1, D0
00001264  123C 001C                337          Move.B  #28, D1
00001268  E2A8                     338          Lsr.L   D1, D0
0000126A  0600 0030                339          Add.B   #$30, D0
0000126E  1CC0                     340          Move.B  D0, (A6)+
00001270                           341          
00001270  4280                     342          Clr.L   D0             
00001272  2006                     343          Move.L  D6, D0
00001274                           344  
00001274  123C 001C                345          Move.B  #28, D1         ; Grab bits 0 to 3
00001278  E3A8                     346          Lsl.L   D1, D0
0000127A  123C 001C                347          Move.B  #28, D1
0000127E  E2A8                     348          Lsr.L   D1, D0
00001280  0600 0030                349          Add.B   #$30, D0
00001284  1CC0                     350          Move.B  D0, (A6)+
00001286                           351          
00001286  4E75                     352          Rts
00001288                           353          
00001288                           354  EA_BYTE_TO_STRING   ; Adds the byte in D6 to the string
00001288  4280                     355          Clr.L   D0              ; Clear D0
0000128A  2006                     356          Move.L  D6, D0          ; Move the byte into D0 so it can be shifted
0000128C                           357  
0000128C  123C 0004                358          Move.B  #4, D1         ; Grab bits 4 to 7
00001290  E2A8                     359          Lsr.L   D1, D0
00001292  0600 0030                360          Add.B   #$30, D0
00001296  1CC0                     361          Move.B  D0, (A6)+
00001298                           362          
00001298  4280                     363          Clr.L   D0             
0000129A  2006                     364          Move.L  D6, D0          
0000129C                           365          
0000129C  123C 0004                366          Move.B  #4, D1          ; Grab bits 0 to 3
000012A0  E3A8                     367          Lsl.L   D1, D0
000012A2  123C 0004                368          Move.B  #4, D1
000012A6  E2A8                     369          Lsr.L   D1, D0
000012A8  0600 0030                370          Add.B   #$30, D0
000012AC  1CC0                     371          Move.B  D0, (A6)+
000012AE                           372          
000012AE  4E75                     373          Rts
000012B0                           374  
000012B0                           375  EA_IMM_BYTE ; Finds the immediate byte data
000012B0  1C1B                     376          Move.B (A3)+, D6            ; Move the immediate byte data into D6 and move forward in memory
000012B2                           377          
000012B2  1CFC 0023                378          Move.B  #'#', (A6)+         
000012B6  1CFC 0024                379          Move.B  #'$', (A6)+         
000012BA                           380          
000012BA  4EB8 1288                381          Jsr     EA_BYTE_TO_STRING    
000012BE                           382          
000012BE  4E75                     383          Rts
000012C0                           384          
000012C0                           385  EA_IMM_WORD ; Finds the immediate word data
000012C0  3C1B                     386          Move.W (A3)+, D6            ; Move the immediate word data into D6 and move forward in memory
000012C2                           387          
000012C2  1CFC 0023                388          Move.B  #'#', (A6)+         ; Add # to the string
000012C6  1CFC 0024                389          Move.B  #'$', (A6)+         ; Add $ to the string
000012CA                           390          
000012CA  4EB8 117A                391          Jsr     EA_WORD_TO_STRING   ; Add the word to the string
000012CE                           392          
000012CE  4E75                     393          Rts
000012D0                           394  
000012D0                           395          ; Once you know that the data size for the op-code is size Word or Byte
000012D0                           396          
000012D0                           397          ; grab a word of data from (A3)+ (Move.W (A3)+, Dn)
000012D0                           398          ; put in the char '#' and '$'
000012D0                           399          ; convert data to ASCII in some way (maybe)
000012D0                           400          
000012D0                           401  EA_IMM_LONG ; Finds the immediate long data
000012D0  2C1B                     402          Move.L (A3)+, D6            ; Move the immediate long data into D6 and move forward in memory
000012D2                           403          
000012D2  1CFC 0023                404          Move.B  #'#', (A6)+
000012D6  1CFC 0024                405          Move.B  #'$', (A6)+
000012DA                           406          
000012DA  4EB8 11DC                407          Jsr     EA_LONG_TO_STRING
000012DE                           408          
000012DE  4E75                     409          Rts
000012E0                           410  
000012E0                           411  ;===========================================================;       
000012E0                           412  ;---------------- Bit Chopping Sub Routines ----------------;
000012E0                           413  ; These Sub Routines Chop a WORD size piece of data from
000012E0                           414  ; Data register 4 into a smaller piece, leaving just the
000012E0                           415  ; Piece in register 0 while leaving the original piece
000012E0                           416  ; of data intact.
000012E0                           417  ;===========================================================;
000012E0                           418  
000012E0                           419  GET12TO15
000012E0  4280                     420          CLR.L   D0
000012E2  3004                     421          Move.W  D4, D0
000012E4                           422                  
000012E4  123C 000C                423          Move.B  #12, D1
000012E8  E268                     424          LSR     D1, D0
000012EA                           425                  
000012EA  4E75                     426          RTS
000012EC                           427  
000012EC                           428  GET12TO13
000012EC  4280                     429          CLR.L   D0
000012EE  3004                     430          Move.W  D4, D0
000012F0                           431          
000012F0  123C 0002                432          Move.B  #2, D1
000012F4  E368                     433          LSL     D1, D0
000012F6                           434          
000012F6  123C 000E                435          Move.B  #14, D1
000012FA  E268                     436          LSR     D1, D0
000012FC                           437          
000012FC  4E75                     438          RTS
000012FE                           439                  
000012FE                           440  GET9TO11        
000012FE  4280                     441          CLR.L   D0
00001300  3004                     442          Move.W  D4, D0
00001302                           443                  
00001302  123C 0004                444          Move.B  #4, D1
00001306  E368                     445          LSL     D1, D0
00001308                           446                  
00001308  123C 000D                447          Move.B  #13, D1
0000130C  E268                     448          LSR     D1, D0
0000130E                           449                  
0000130E  4E75                     450          RTS
00001310                           451                  
00001310                           452  GET6TO8 
00001310  4280                     453          CLR.L   D0
00001312  3004                     454          Move.W  D4, D0
00001314                           455                  
00001314  123C 0007                456          Move.B  #7, D1
00001318  E368                     457          LSL     D1, D0
0000131A                           458                  
0000131A  123C 000D                459          Move.B  #13, D1
0000131E  E268                     460          LSR     D1, D0
00001320                           461                  
00001320  4E75                     462          RTS
00001322                           463                  
00001322                           464  GET3TO5 
00001322  4280                     465          CLR.L   D0
00001324  3004                     466          Move.W  D4, D0
00001326                           467                  
00001326  123C 000A                468          Move.B  #10, D1
0000132A  E368                     469          LSL     D1, D0
0000132C                           470                  
0000132C  123C 000D                471          Move.B  #13, D1
00001330  E268                     472          LSR     D1, D0
00001332                           473                  
00001332  4E75                     474          RTS
00001334                           475  GET0TO2 
00001334  4280                     476          CLR.L   D0
00001336  3004                     477          Move.W  D4, D0
00001338                           478                  
00001338  123C 000D                479          Move.B  #13, D1
0000133C  E368                     480          LSL     D1, D0
0000133E                           481                  
0000133E  123C 000D                482          Move.B  #13, D1
00001342  E268                     483          LSR     D1, D0
00001344                           484                  
00001344  4E75                     485          RTS
00001346                           486  GETBIT8
00001346  4280                     487          CLR.L   D0
00001348  3004                     488          Move.W  D4, D0
0000134A                           489                  
0000134A  123C 0007                490          Move.B  #7, D1
0000134E  E368                     491          LSL     D1, D0
00001350                           492                  
00001350  123C 000F                493          Move.B  #15, D1
00001354  E268                     494          LSR     D1, D0
00001356                           495                  
00001356  4E75                     496          RTS 
00001358                           497  
00001358                           498      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AN_DEC_MODE         4
AN_INC_MODE         3
AN_MODE             1
AN_PNTR_MODE        2
DN_MODE             0
EA_AN               10E2
EA_AN_DEC           111A
EA_AN_INC           1102
EA_AN_PNTR          10EE
EA_BYTE_TO_STRING   1288
EA_DN               10D6
EA_IMM_BYTE         12B0
EA_IMM_LONG         12D0
EA_IMM_WORD         12C0
EA_LONG_ADDR        11CE
EA_LONG_TO_STRING   11DC
EA_MOVE             100E
EA_MOVE_DEST        106E
EA_MOVE_SIZE        10B6
EA_MOVE_SOURCE      101E
EA_SIGN_EXT_16      114A
EA_SIGN_EXT_32      1162
EA_WORD_ADDR        1132
EA_WORD_TO_STRING   117A
GET0TO2             1334
GET12TO13           12EC
GET12TO15           12E0
GET3TO5             1322
GET6TO8             1310
GET9TO11            12FE
GETBIT8             1346
IMM_MODE            7
IMM_REG             4
LONG_MODE           7
LONG_REG            1
START               1000
TEST_MOVE1          1401
TEST_MOVE2          1444
TEST_MOVE3          1E90
TEST_MOVE4          1EE2
TEST_MOVE5          1238
TEST_MOVE6          1E39
TEST_MOVE7          34BC
TEST_MOVE8          2F3C
WORD_MODE           7
WORD_REG            0
